END RESULT OF base.html, frontpage.html and contact.html are available in CodeNotes.txt (A and B):

base.html:
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>Sample Website</title>
        <link rel = "stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.0/css/bulma.min.css">
    </head>
    
    <body>
        <nav class="navbar is-dark">
            <div class="navbar-brand">
                <a class="navbar-item" href="{% url 'frontpage' %}">Bicycles</a>

                <a role="button" class="navbar-burger burger" aria-label="menu" aria-expanded="false" data-target="main-navbar">
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                </a>
            </div>

            <div id="main-navbar" class="navbar-menu">
                <div class="navbar-end">
                    <a href="{% url 'contact' %}" class="navbar-item">Contact</a>
                </div>
            </div>
        </nav>

        <section class="section">
            {% block content %}
            {% endblock %}
        </section>
    </body>
</html>

frontpage.html:
{% extends 'base.html' %} {# importing the base.html #}

{% block content %}
    <h1 class="title">The Frontpage</h1>
{% endblock %}

contact.html:
{% extends 'base.html' %} {# importing the base.html #}

{% block content %}
    <h1 class="title">Contact</h1>

    Contact form, information, etc
{% endblock %}


Code Notes for C1 - 17:
admin.py:
from django.contrib import admin

from .models import MainCategory, SubCategory, Product # Import the Category class

# Register your models here.
admin.site.register(MainCategory) # Register the new database in store
admin.site.register(SubCategory) 
admin.site.register(Product)

apps.py:
from django.apps import AppConfig


class StoreConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'apps.store'

models.py:
from django.db import models

# Create your models here.
# Database model
class MainCategory(models.Model):
    title = models.CharField(max_length = 255) # Character field for the database
    slug = models.SlugField(max_length = 255) # a description containing only letters, hyphens, numbers or underscores


    class Meta:
        verbose_name_plural = 'Main Categories' # Correcting the plural of the cataegory correct instead of categorys.

    def __str__(self): # To see the title character in admin
        return self.title


class SubCategory(models.Model):
    main_category = models.ForeignKey(MainCategory, related_name='sub_categories', on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    slug = models.SlugField(max_length=255)

    class Meta:
        verbose_name_plural = 'Sub Categories'

    def __str__(self):
        return self.title
  
  
class Product(models.Model): # Adding the product in the database
    sub_category = models.ForeignKey(SubCategory, related_name='products', on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    slug = models.SlugField(max_length=255)
    description = models.TextField(blank=True, null=True)
    price = models.FloatField()

    def __str__(self):
        return self.title

END RESULT after C:
context_processors.py:
from .models import MainCategory

def menu_main_categories(request):
    categories = MainCategory.objects.all()
    return {'menu_main_categories': categories}

store/views.py:
from django.shortcuts import render, get_object_or_404

from .models import Product, MainCategory, SubCategory

# Create your views here.
def product_detail(request, slug):
    product = get_object_or_404(Product, slug=slug) # To call the product database

    context = {
        'product': product
    }

    return render(request, 'product_detail.html', context)

def main_category_detail(request, slug):
    category = get_object_or_404(MainCategory, slug=slug)
    subcategories = SubCategory.objects.filter(main_category=category)

    
    context = {
        'category': category,
        'menu_sub_categories': subcategories  # Pass only filtered subcategories
    }

    return render(request, 'main_category_detail.html', context)


def sub_category_detail(request, slug):
    sub_category = get_object_or_404(SubCategory, slug=slug)  # Get the subcategory based on the slug
    products = Product.objects.filter(sub_category=sub_category)  # Get products related to the subcategory

    context = {
        'sub_category': sub_category,
        'products': products  # Pass the products to the template
    }

    return render(request, 'sub_category_detail.html', context)

urls.py:
from django.contrib import admin
from django.urls import path

from apps.core.views import frontpage, contact # Importing the frontpage and contact
from apps.store.views import product_detail, main_category_detail, sub_category_detail # Importing the product_detail

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', frontpage, name='frontpage'), # Adding the frontpage for url
    path('contact/', contact, name='contact'),
    path('category/<slug:slug>/', main_category_detail, name='main_category_detail'),
    path('subcategory/<slug:slug>/', sub_category_detail, name='sub_category_detail'),
    path('<slug:slug>/', product_detail, name='product_detail'), # references the slug from the store/views.py
]

models.py:
from django.db import models

# Create your models here.
# Database model
class MainCategory(models.Model):
    title = models.CharField(max_length = 255) # Character field for the database
    slug = models.SlugField(max_length = 255) # a description containing only letters, hyphens, numbers or underscores


    class Meta:
        verbose_name_plural = 'Main Categories' # Correcting the plural of the cataegory correct instead of categorys.

    def __str__(self): # To see the title character in admin
        return self.title


class SubCategory(models.Model):
    main_category = models.ForeignKey(MainCategory, related_name='sub_categories', on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    slug = models.SlugField(max_length=255)

    class Meta:
        verbose_name_plural = 'Sub Categories'

    def __str__(self):
        return self.title
  
  
class Product(models.Model): # Adding the product in the database
    sub_category = models.ForeignKey(SubCategory, related_name='products', on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    slug = models.SlugField(max_length=255)
    description = models.TextField(blank=True, null=True)
    price = models.FloatField()

    def __str__(self):
        return self.title

frontpage.html:
{% extends 'base.html' %} {# importing the base.html #}

{% block content %}
    <div class="columns is-multiline">
        {% for product in products %} {# Using for loop to view products #}
        <div class="column is-3">
            <div class="card">
                <div class="card-content">
                    <div class="media">
                        <div class="media-content">
                            <p class="title is-4">{{ product.title }}</p>
                            <p class="subtitle is-6">P{{ product.price }}</p>
                        </div>
                    </div>
                </div>

                <footer class="card-footer">
                    <a href="{% url 'product_detail' product.slug %}" class="card-footer-item">View</a>
                </footer>
            </div>
        </div>
        {% endfor %}
    </div>
    <h1 class="title">The Frontpage</h1>
{% endblock %}

base.html:
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>Sample Website</title>
        <link rel = "stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.0/css/bulma.min.css">
    </head>
    
    <body>
        <nav class="navbar is-dark">
            <div class="navbar-brand">
                <a class="navbar-item" href="{% url 'frontpage' %}">Bicycles</a>
        
                <a role="button" class="navbar-burger burger" aria-label="menu" aria-expanded="false" data-target="main-navbar">
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                </a>
            </div>
        
            <div id="main-navbar" class="navbar-menu">
                <div class="navbar-end">
                    {% for category in menu_main_categories %}
                        <a href="{% url 'main_category_detail' category.slug %}" class="navbar-item">{{ category.title }}</a>
                    {% endfor %}
                    <a href="{% url 'contact' %}" class="navbar-item">Contact</a>
                </div>
            </div>
        </nav>        

        <section class="section">
            {% block content %}
            {% endblock %}
        </section>
    </body>
</html>

main_category_detail.html:
{% extends 'base.html' %}

{% block content %}
    <h1 class="title">{{ category.title }}</h1>
    <div class="columns is-multiline">
        {% for sub_category in menu_sub_categories %} {# Loop through filtered subcategories #}
        <div class="column is-3">
            <div class="card">
                <div class="card-content">
                    <div class="media">
                        <div class="media-content">
                            <p class="title is-4">{{ sub_category.title }}</p>
                        </div>
                    </div>
                </div>
                <footer class="card-footer">
                    <a href="{% url 'sub_category_detail' sub_category.slug %}" class="card-footer-item">View</a>
                </footer>
            </div>
        </div>
        {% endfor %}
    </div>
{% endblock %}


sub_category_detail.html:
{% extends 'base.html' %}

{% block content %}
    <h1 class="title">{{ sub_category.title }}</h1>
    <div class="columns is-multiline">
        {% for product in products %}
        <div class="column is-3">
            <div class="card">
                <div class="card-content">
                    <div class="media">
                        <div class="media-content">
                            <p class="title is-4">{{ product.title }}</p>
                            <p class="subtitle is-6">${{ product.price }}</p>
                        </div>
                    </div>
                </div>
                <footer class="card-footer">
                    <a href="{% url 'product_detail' product.slug %}" class="card-footer-item">View</a>
                </footer>
            </div>
        </div>
        {% endfor %}
    </div>
{% endblock %}

product_detail.html:
{% extends 'base.html' %}

{% block content %}
    <h1 class="title">{{ product.title }}</h1>
    <h2 class="subtitle">P{{ product.price }}</h2>

    {% if product.description %}
        <p>{{ product.description }}</p>
    {% endif %}
{% endblock %}


D. Basic Cart System and some changes in the layout:

base.html:
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>{% block title %} {% endblock %} Sample Website</title>
        <link rel = "stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.0/css/bulma.min.css">
    </head>
    
    <body>
        <nav class="navbar is-dark">
            <div class="navbar-brand">
                <a class="navbar-item" href="{% url 'frontpage' %}">Bikes</a>
        
                <a role="button" class="navbar-burger burger" aria-label="menu" aria-expanded="false" data-target="main-navbar">
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                </a>
            </div>
        
            <div id="main-navbar" class="navbar-menu">
                <div class="navbar-end">
                    {% for category in menu_main_categories %}
                        <a href="{% url 'main_category_detail' category.slug %}" class="navbar-item">{{ category.title }}</a>
                    {% endfor %}

                    <div class="navbar-item"></div>
                        <a href="{% url 'cart' %}" class="button is-primary">Cart</a>
                    </div>
                </div>
            </div>
        </nav>        

        <section class="section">
            {% block content %}
            {% endblock %}
        </section>

        <footer class ="footer">
            <div class = "columns">
                <div class="column is-4">
                    <h2 class="subtitle">Bicycles</h2>
                </div>

                <div class = "column is-8">
                    <a href="{% url 'contact' %}" class="navbar-item">Contact</a>
                    <a href="{% url 'about' %}" class="navbar-item">About</a>
                </div>
            </div>
        </footer>
    </body>
</html>

about.html:
{% extends 'base.html' %} {# importing the base.html #}

{% block title %} About | {% endblock %}

{% block content %}
    <h1 class="title">About</h1>

    <p>
        This is the information about Bikes
    </p>
{% endblock %}

core/views.py:
from django.shortcuts import render

from apps.store.models import Product # Importing the Products inside the models.py in Store folder

# Create your views here.
def frontpage(request):
    # products = Product.objects.all() # Getting all products in the database.
    products = Product.objects.filter(is_featured=True) # Showing all products where is_featured = true

    context = { # Dictionary for products
        'products': products
    }

    return render(request, 'frontpage.html', context) # To view the html file of frontpage
    # Add context to view all related products

def contact(request):
    return render(request, 'contact.html')

def about(request):
    return render(request, 'about.html')


urls.py:
from django.contrib import admin
from django.urls import path

from apps.cart.views import cart
from apps.core.views import frontpage, contact, about # Importing the frontpage and contact
from apps.store.views import product_detail, main_category_detail, sub_category_detail # Importing the product_detail

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', frontpage, name='frontpage'), # Adding the frontpage for url
    path('cart/', cart, name='cart'),
    path('contact/', contact, name='contact'),
    path('about/', about, name='about'),
    path('category/<slug:slug>/', main_category_detail, name='main_category_detail'),
    path('subcategory/<slug:slug>/', sub_category_detail, name='sub_category_detail'),
    path('<slug:slug>/', product_detail, name='product_detail'), # references the slug from the store/views.py
]

store/models.py:
from django.db import models

# Create your models here.
# Database model
class MainCategory(models.Model):
    title = models.CharField(max_length = 255) # Character field for the database
    slug = models.SlugField(max_length = 255) # a description containing only letters, hyphens, numbers or underscores
    main_ordering = models.IntegerField(default=0)


    class Meta:
        verbose_name_plural = 'Main Categories' # Correcting the plural of the cataegory correct instead of categorys.
        ordering = ('main_ordering',)

    def __str__(self): # To see the title character in admin
        return self.title


class SubCategory(models.Model):
    main_category = models.ForeignKey(MainCategory, related_name='sub_categories', on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    slug = models.SlugField(max_length=255)
    sub_ordering = models.IntegerField(default=0)

    class Meta:
        verbose_name_plural = 'Sub Categories'
        ordering = ('sub_ordering',)

    def __str__(self):
        return self.title
  
  
class Product(models.Model): # Adding the product in the database
    sub_category = models.ForeignKey(SubCategory, related_name='products', on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    slug = models.SlugField(max_length=255)
    description = models.TextField(blank=True, null=True)
    price = models.FloatField()
    is_featured = models.BooleanField(default=False)
    date_added = models.DateTimeField(auto_now_add=True)


    class Meta:
        ordering = ('-date_added',) # Newest one comes first. You can remove the "-" if you want the oldest one to come first.

    def __str__(self):
        return self.title

cart.html:
{% extends 'base.html' %}

{% block title %} Cart | {% endblock %}

{% block content %}
    <h1 class="title">Cart</h1>
{% endblock %}

cart/views.py:
from django.shortcuts import render

# Create your views here.
def cart(request):
    return render(request, 'cart.html')

Snippet from settings.py of INSTALLED_APPS list:
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'apps.core.apps.CoreConfig', # Adding the core folder and its related files
    'apps.store.apps.StoreConfig', # Adding store folder and its related files
    'apps.cart.apps.CartConfig', # Adding the cart folder and its related files
]

E. Cart system and vue.js
cart.py:
from django.conf import settings

from apps.store.models import Product

class Cart(object):
    def __init__(self, request):
        self.session = request.session # Request a session from the settings
        cart = self.session.get(settings.CART_SESSION_ID) # Get the cart from the session using the session ID defined in settings

        if not cart: # returns an empty dictionary if there's no cart
            cart = self.session[settings.CART_SESSION_ID] = {} 

        self.cart = cart

    def __iter__(self):
        product_ids = self.cart.keys() # Get product_id in the cart

        product_clean_ids = [] # Initializing a list for storing product_id

        for p in product_ids:
            product_clean_ids.append(p) # Appends the empty list

            self.cart[str(p)]['product'] = Product.objects.get(pk=p) # Getting the product_id in the database

        for item in self.cart.values():
            item['total_price'] = int(item['price']) * int(item['quantity'])

            yield item # Makes the for loop iterable

    def __len__(self): # returns the total number of products in the cart
        return sum(item['quantity'] for item in self.cart.values())

    def add(self, product, quantity = 1, update_quantity=False): 
        product_id = str(product.id)
        price = product.price

        if product_id not in self.cart:
            self.cart[product_id] = {'quantity': 0, 'price': price, 'id': product_id} # Setting the product details to this one if it is not in the cart

        if update_quantity:
            self.cart[product_id]['quantity'] = quantity # Setting it to specified quantity if updated
        else: 
            self.cart[product_id]['quantity'] += 1 # increment it by 1 otherwise
        
        self.save()

    def remove(self, product_id): # Removing items in cart
        if product_id in self.cart:
            del self.cart[product_id]
            self.save()
    
    def save(self): # Saving all related actions in cart system
        self.session[settings.CART_SESSION_ID] = self.cart
        self.session.modified = True

api.py:
import json

from django.http import JsonResponse # Import JSON responses from HTTP
from django.shortcuts import get_object_or_404

from apps.cart.cart import Cart # Import Cart class from cart.py

from .models import Product # Import database from Product

def api_add_to_cart(request):
    data = json.loads(request.body)
    jsonresponse = {'success': True}
    product_id = data['product_id']
    update = data['update']
    quantity = data['quantity'] 

    cart = Cart(request) # Instantiate the cart class

    product = get_object_or_404(Product, pk=product_id) 
    # Getting the product details from the database. "pk" stands for primary key. Otherwise, error 404 will occur

    # If the update is not set, add the product with the default quantity of 1, without updating the current quantity.
    if not update:
        cart.add(product=product, quantity=1, update_quantity=False)
    else: # update the quantity of the product in the cart.
        cart.add(product=product, quantity=quantity, update_quantity=True)

    return JsonResponse(jsonresponse)

def api_remove_from_cart(request):
    data = json.loads(request.body)
    jsonresponse = {'success': True}
    product_id = str(data['product_id'])

    cart = Cart(request)
    cart.remove(product_id) # Calls remove function in cart.py to remove an item in a cart

    return JsonResponse(jsonresponse)


product_detail.html:
{% extends 'base.html' %}

{% block title %} {{ product.title }} | {% endblock %}

{% block content %}
    <div id="productapp">
        <h1 class="title">{{ product.title }}</h1>
        <h2 class="subtitle">P{{ product.price }}</h2>

        {% if product.description %}
            <p>{{ product.description }}</p>
        {% endif %}

        <button @click="addToCart({{ product.id }})">Add to Cart</button>
    </div>
{% endblock %}

{% block scripts %}
<script>
    var productapp = new Vue({
        el: '#productapp',
        delimiters: ['[[', ']]'], 
        data () {
            return {}
        },
        mounted(){
            console.log('Mounted');
        },
        methods: {
            addToCart(product_id) {
                console.log('Product_id:', product_id);

                var data = {
                    'product_id': product_id, 
                    'update': false,
                    'quantity': 1
                };

                fetch('/api/add_to_cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)  
                })
                .then((response) => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();  
                })
                .then((data) => {
                    console.log('Success:', data);
                })
                .catch(function (error){
                    console.log('Error:', error);
                });
            }
        }
    });
</script>
{% endblock %}

cart.html:
{% extends 'base.html' %}

{% block title %} Cart | {% endblock %}

{% block content %}
    <div id="cartapp">
        <h1 class="title">Cart</h1>

        {% if cart %}
            {% for item in cart %}
                {% with product=item.product %}
                    <p>Product - {{ product.title }}</p>
                    <button @click="removeFromCart({{ product.id }})">Remove from cart</button>
                {% endwith %}
            {% endfor %}
        {% else %}
            <p>Your cart is empty!</p>
        {% endif%}
    </div>
{% endblock %}

{% block scripts %}
<script>
    var productapp = new Vue({
        el: '#cartapp',
        delimiters: ['[[', ']]'], 
        data () {
            return {}
        },
        mounted(){
            console.log('Mounted');
        },
        methods: {
            removeFromCart(product_id) {
                console.log('Product_id:', product_id);

                var data = {
                    'product_id': product_id, 
                };

                fetch('/api/remove_from_cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)  
                })
                .then((response) => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();  
                })
                .then((data) => {
                    console.log('Success:', data);
                })
                .catch(function (error){
                    console.log('Error:', error);
                });
            }
        }
    });
</script>
{% endblock %}

F. Continuation of Cart system functionality
product_detail.html:
{% extends 'base.html' %}

{% block title %} {{ product.title }} | {% endblock %}

{% block content %}
    <div id="productapp">
        <h1 class="title">{{ product.title }}</h1>
        <h2 class="subtitle">P{{ product.price }}</h2>

        {% if product.description %}
            <p>{{ product.description }}</p>
        {% endif %}

        <button @click="addToCart('{{ product.id }}')">Add to Cart</button>
    </div>
{% endblock %}

{% block scripts %}
<script>
    var productapp = new Vue({
        el: '#productapp',
        delimiters: ['[[', ']]'], 
        data () {
            return {}
        },
        mounted(){
            console.log('Vue instance mounted for cart');
        },
        methods: {
            addToCart(product_id) {
                console.log('Product_id:', product_id);

                var data = {
                    'product_id': product_id, 
                    'update': false,
                    'quantity': 1
                };

                fetch('/api/add_to_cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)  
                })
                .then((response) => {
                    console.log(response)

                    store.commit('increment', 1);
                })
                .catch(function (error){
                    console.log('Error 2:');
                    console.log(error);
                });
            }
        }
    });
</script>
{% endblock %}

base.html:
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>{% block title %} {% endblock %} Sample Website</title>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.0/css/bulma.min.css">
    </head>
    <body>
        <nav class="navbar is-dark">
            <div class="navbar-brand">
                <a class="navbar-item" href="{% url 'frontpage' %}">Bikes</a>
                <a role="button" class="navbar-burger burger" aria-label="menu" aria-expanded="false" data-target="main-navbar">
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                </a>
            </div>
            <div id="main-navbar" class="navbar-menu">
                <div class="navbar-end">
                    {% for category in menu_main_categories %}
                        <a href="{% url 'main_category_detail' category.slug %}" class="navbar-item">{{ category.title }}</a>
                    {% endfor %}
                        <div class="navbar-item">
                            <div id="navbarapp">
                                <a href="{% url 'cart' %}" class="button is-primary">Cart ([[ numItems ]])</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </nav>
        <section class="section">
            {% block content %}
            {% endblock %}
        </section>
        <footer class="footer">
            <div class="columns">
                <div class="column is-4">
                    <h2 class="subtitle">Bicycles</h2>
                </div>
                <div class="column is-8">
                    <a href="{% url 'contact' %}" class="navbar-item">Contact</a>
                    <a href="{% url 'about' %}" class="navbar-item">About</a>
                </div>
            </div>
        </footer>
        <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
        <script src="https://unpkg.com/vuex@4.1.0/dist/vuex.global.js"></script>
    
        <script>
            var store = new Vuex.Store({
                state: {
                    numItems: {{ cart.get_total_length }}
                },
                mutations: {
                    increment(state, quantity) {
                        state.numItems += quantity;
                    }
                }
            });

            var navbarapp = new Vue({
                el: '#navbarapp',
                delimiters: ['[[', ']]'],
                store: store,
                computed: {
                    numItems: function() {
                        return store.state.numItems
                    }
                }
            });
        </script>
    {% block scripts %}
    {% endblock %}
    </body>
</html>

cart/views.py:
from django.shortcuts import render

from .cart import Cart

# Create your views here.
def cart_detail(request):
    cart = Cart(request)
    productsstring = ''

    print(f'Cart items: {list(cart)}')  # Debugging step

    for item in cart:
        product = item['product']
        b = "{'id': '%s', 'title': '%s', 'price': '%s', 'quantity': '%s', 'total_price': '%s'}," % (
            product.id, product.title, product.price, item['quantity'], item['total_price'])

        productsstring += b

    print(f'Products string: {productsstring}')  

    context = {
        'cart': cart,
        'productsstring': productsstring
    }

    return render(request, 'cart.html', context)

cart.py:
from django.conf import settings

from apps.store.models import Product

class Cart(object):
    def __init__(self, request):
        self.session = request.session # Request a session from the settings
        cart = self.session.get(settings.CART_SESSION_ID) # Get the cart from the session using the session ID defined in settings

        if not cart: # returns an empty dictionary if there's no cart
            cart = self.session[settings.CART_SESSION_ID] = {} 

        self.cart = cart

    def __iter__(self):
        product_ids = self.cart.keys() # Get product_id in the cart

        product_clean_ids = [] # Initializing a list for storing product_id

        for p in product_ids:
            product_clean_ids.append(p) # Appends the empty list

            self.cart[str(p)]['product'] = Product.objects.get(pk=p) # Getting the product_id in the database

        for item in self.cart.values():
            item['total_price'] = float(item['price']) * int(item['quantity'])

            yield item # Makes the for loop iterable

    def __len__(self): # returns the total number of products in the cart
        return sum(item['quantity'] for item in self.cart.values())

    def add(self, product, quantity = 1, update_quantity=False): 
        product_id = str(product.id)
        price = product.price

        if product_id not in self.cart:
            self.cart[product_id] = {'quantity': 0, 'price': price, 'id': product_id} # Setting the product details to this one if it is not in the cart

        if update_quantity:
            self.cart[product_id]['quantity'] = quantity # Setting it to specified quantity if updated
        else: 
            self.cart[product_id]['quantity'] += 1   # increment it by 1 otherwise
        
        self.save()

    def remove(self, product_id): # Removing items in cart
        if product_id in self.cart:
            del self.cart[product_id]
            self.save()
    
    def save(self): # Saving all related actions in cart system
        self.session[settings.CART_SESSION_ID] = self.cart
        self.session.modified = True

    def get_total_length(self):
        return sum(int(item['quantity']) for item in self.cart.values())
    
    def get_total_cost(self):
        return sum(float(item['total_price']) for item in self.cart.values())

cart.html:
{% extends 'base.html' %}

{% block title %} Cart | {% endblock %}

{% block content %}
    <div id="cartapp">
        <h1 class="title">Cart</h1>
        {% if cart %}
            <div class="table">
                <table class="table">
                    <thead>
                        <th>Product</th>
                        <th>Quantity</th>
                        <th>Price</th>
                        <th></th>
                    </thead>
                    <tbody>
                        <tr v-for="product in products">
                            <td>[[ product.title ]]</td>
                            <td>[[ product.quantity ]] <button @click="incrementQuantity(product.id, product.quantity)">+</button></td>
                            <td>[[ product.total_price ]]</td>
                            <td><button @click="removeFromCart(product.id)">Remove from cart</button></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        {% else %}
            <p>Your cart is empty!</p>
        {% endif %}
    </div>
{% endblock %}

{% block scripts %}
<script>
    var productapp = new Vue({
        el: '#cartapp',
        delimiters: ['[[', ']]'],
        store: store,
        data() {
            return {
                products: [{{ productsstring|safe }}]

            };
        },
        mounted () {
            console.log('Vue instance mounted for cart');
        },
        methods: {
            incrementQuantity(product_id, quantity) {
                console.log('Product_id:', product_id);

                var data = {
                    'product_id': product_id,
                    'update': true,
                    'quantity': parseInt(quantity) + 1
                };

                store.commit('increment', 1);
                
                fetch('/api/add_to_cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)
                })
                .then((response) => {
                    console.log(response);
                    
                    for (var i = 0; i < this.products.length; i++) {
                        var product = this.products[i];

                        if (product.id === product_id) {
                            this.products[i].quantity = parseInt(this.products[i].quantity) + 1;
                            this.products[i].total_price = parseInt(this.products[i].quantity) * parseFloat(this.products[i].price);
                        }
                    }
                })
                .catch(function (error) {
                    console.log('Error 2:');
                    console.log(error);
                }); 
            },
            removeFromCart(product_id) {
                console.log('Product_id:', product_id);

                var data = {
                    'product_id': product_id
                };

                fetch('/api/remove_from_cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)
                })
                .then((response) => {
                    console.log(response);
                    this.products = this.products.filter(product => product.id !== product_id);
                })
                .catch(function (error) {
                    console.log('Error 2:', error);
                });
            }
        }
    });
</script>
{% endblock %}

G. Product Picture and more functionality on cart syste,
store/models.py:
from io import BytesIO
from django.core.files import File
from django.db import models
from PIL import Image

# Create your models here.
# Database model
class MainCategory(models.Model):
    title = models.CharField(max_length = 255) # Character field for the database
    slug = models.SlugField(max_length = 255) # a description containing only letters, hyphens, numbers or underscores
    main_ordering = models.IntegerField(default=0)


    class Meta:
        verbose_name_plural = 'Main Categories' # Correcting the plural of the cataegory correct instead of categorys.
        ordering = ('main_ordering',)

    def __str__(self): # To see the title character in admin
        return self.title


class SubCategory(models.Model):
    main_category = models.ForeignKey(MainCategory, related_name='sub_categories', on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    slug = models.SlugField(max_length=255)
    sub_ordering = models.IntegerField(default=0)

    sub_category_image = models.ImageField(upload_to='uploads/', blank=True, null=True)
    sub_category_thumbnail = models.ImageField(upload_to='uploads/', blank=True, null=True)

    class Meta:
        verbose_name_plural = 'Sub Categories'
        ordering = ('sub_ordering',)

    def __str__(self):
        return self.title
  
  
class Product(models.Model): # Adding the product in the database
    sub_category = models.ForeignKey(SubCategory, related_name='products', on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    slug = models.SlugField(max_length=255)
    description = models.TextField(blank=True, null=True)
    price = models.FloatField()
    is_featured = models.BooleanField(default=False)

    product_image = models.ImageField(upload_to='uploads/', blank=True, null=True)
    product_thumbnail = models.ImageField(upload_to='uploads/', blank=True, null=True)
    date_added = models.DateTimeField(auto_now_add=True)


    class Meta:
        ordering = ('-date_added',) # Newest one comes first. You can remove the "-" if you want the oldest one to come first.

    def __str__(self):
        return self.title
    
    def save(self, *args, **kwargs):
        self.product_thumbnail = self.make_product_thumbnail(self.product_image)

        super().save(*args, **kwargs)
    
    def make_product_thumbnail(self, image, size=(300, 200)):
        product_img = Image.open(image)
        product_img.convert('RGB')
        product_img.thumbnail(size)

        product_thumb_io = BytesIO()
        product_img.save(product_thumb_io, 'JPEG', quality=85)

        from os.path import basename
        product_thumbnail = File(product_thumb_io, name=basename(image.name))

        return product_thumbnail

frontpage.html:
{% extends 'base.html' %} {# importing the base.html #}

{% block title %} Welcome | {% endblock %}

{% block content %}
    <div class="columns is-multiline">
        {% for product in products %} {# Using for loop to view products #}
        <div class="column is-3">
            <div class="card">
                <div class="card-image">
                    <figure class="image">
                        <img src="{{ product.product_image.url }}" alt="{{ product.title }}">
                    </figure>
                </div>
                <div class="card-content">
                    <div class="media">
                        <div class="media-content">
                            <p class="title is-4">{{ product.title }}</p>
                            <p class="subtitle is-6">P{{ product.price }}</p>
                        </div>
                    </div>
                </div>

                <footer class="card-footer">
                    <a href="{% url 'product_detail' product.slug %}" class="card-footer-item">View</a>
                </footer>
            </div>
        </div>
        {% endfor %}
    </div>
{% endblock %}

snippet from settings.py:
STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

product_detail.html:
{% extends 'base.html' %}

{% block title %} {{ product.title }} | {% endblock %}

{% block content %}
    <div id="productapp">
        <img src ="{{ product.product_image.url }}">
        <h1 class="title">{{ product.title }}</h1>
        <h2 class="subtitle">P{{ product.price }}</h2>

        {% if product.description %}
            <p>{{ product.description }}</p>
        {% endif %}

        <button @click="addToCart('{{ product.id }}')">Add to Cart</button>
    </div>
{% endblock %}

{% block scripts %}
<script>
    var productapp = new Vue({
        el: '#productapp',
        delimiters: ['[[', ']]'], 
        data () {
            return {}
        },
        mounted(){
            console.log('Vue instance mounted for cart');
        },
        methods: {
            addToCart(product_id) {
                console.log('Product_id:', product_id);

                var data = {
                    'product_id': product_id, 
                    'update': false,
                    'quantity': 1
                };

                fetch('/api/add_to_cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)  
                })
                .then((response) => {
                    console.log(response)

                    store.commit('increment', 1);
                })
                .catch(function (error){
                    console.log('Error 2:');
                    console.log(error);
                });
            }
        }
    });
</script>
{% endblock %}


cart.py:
from django.conf import settings

from apps.store.models import Product

class Cart(object):
    def __init__(self, request):
        self.session = request.session # Request a session from the settings
        cart = self.session.get(settings.CART_SESSION_ID) # Get the cart from the session using the session ID defined in settings

        if not cart: # returns an empty dictionary if there's no cart
            cart = self.session[settings.CART_SESSION_ID] = {} 

        self.cart = cart

    def __iter__(self):
        product_ids = self.cart.keys() # Get product_id in the cart

        product_clean_ids = [] # Initializing a list for storing product_id

        for p in product_ids:
            product_clean_ids.append(p) # Appends the empty list

            self.cart[str(p)]['product'] = Product.objects.get(pk=p) # Getting the product_id in the database

        for item in self.cart.values():
            item['total_price'] = float(item['price']) * int(item['quantity'])

            yield item # Makes the for loop iterable

    def __len__(self): # returns the total number of products in the cart
        return sum(item['quantity'] for item in self.cart.values())

    def add(self, product, quantity = 1, update_quantity=False): 
        product_id = str(product.id)
        price = product.price

        if product_id not in self.cart:
            self.cart[product_id] = {'quantity': 0, 'price': price, 'id': product_id} # Setting the product details to this one if it is not in the cart

        if update_quantity:
            self.cart[product_id]['quantity'] = quantity # Setting it to specified quantity if updated
        else: 
            self.cart[product_id]['quantity'] += 1   # increment it by 1 otherwise
        
        self.save()

    def remove(self, product_id): # Removing items in cart
        if product_id in self.cart:
            del self.cart[product_id]
            self.save()
    
    def save(self): # Saving all related actions in cart system
        self.session[settings.CART_SESSION_ID] = self.cart
        self.session.modified = True

    def get_total_length(self):
        return sum(int(item['quantity']) for item in self.cart.values())
    
    def get_total_cost(self):
        return sum(float(item.get('total_price', 0)) for item in self.cart.values())


base.html:
{% load static %}
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>{% block title %} {% endblock %} Sample Website</title>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.0/css/bulma.min.css">
        <link rel="stylesheet" href="{% static 'main.css' %}">
    </head>
    <body>
        <nav class="navbar is-dark">
            <div class="navbar-brand">
                <a class="navbar-item" href="{% url 'frontpage' %}">Bikes</a>
                <a role="button" class="navbar-burger burger" aria-label="menu" aria-expanded="false" data-target="main-navbar">
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                </a>
            </div>
            <div id="main-navbar" class="navbar-menu">
                <div class="navbar-end">
                    {% for category in menu_main_categories %}
                        <a href="{% url 'main_category_detail' category.slug %}" class="navbar-item">{{ category.title }}</a>
                    {% endfor %}
                        <div class="navbar-item">
                            <div id="navbarapp">
                                <a href="{% url 'cart' %}" class="button is-primary">Cart ([[ numItems ]])</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </nav>
        <section class="section">
            {% block content %}
            {% endblock %}
        </section>
        <footer class="footer">
            <div class="columns">
                <div class="column is-4">
                    <h2 class="subtitle">Bicycles</h2>
                </div>
                <div class="column is-8">
                    <a href="{% url 'contact' %}" class="navbar-item">Contact</a>
                    <a href="{% url 'about' %}" class="navbar-item">About</a>
                </div>
            </div>
        </footer>
        <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
        <script src="https://unpkg.com/vuex@4.1.0/dist/vuex.global.js"></script>
    
        <script>
            var store = new Vuex.Store({
                state: {
                    numItems: {{ cart.get_total_length }},
                    totalCost: {{ cart.get_total_cost }}
                },
                mutations: {
                    increment(state, quantity) {
                        state.numItems += quantity;
                    },
                    changeTotalCost(state, newCost) {
                        state.totalCost += newCost
                    }
                }
            });

            var navbarapp = new Vue({
                el: '#navbarapp',
                delimiters: ['[[', ']]'],
                store: store,
                computed: {
                    numItems: function() {
                        return store.state.numItems
                    }
                }
            });
        </script>
    {% block scripts %}
    {% endblock %}
    </body>
</html>


order/apps.py:
from django.apps import AppConfig


class OrderConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'apps.order'


order/models.py:
from django.db import models

from apps.store.models import Product

# Create your models here.
class Order(models.Model):
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    email = models.CharField(max_length=100)
    address = models.CharField(max_length=100)
    zip_code = models.CharField(max_length=100)
    place = models.CharField(max_length=100)
    contact_number = models.CharField(max_length=100, default='00000000000')

    order_created_at = models.DateTimeField(auto_now_add=True)

    paid = models.BooleanField(default=False)
    paid_amount = models.FloatField(blank=True, null=True)

    def __str__(self):
        return '%s' % self.first_name
    
class OrderItem(models.Model):
    order = models.ForeignKey(Order, related_name='items', on_delete=models.CASCADE)
    product = models.ForeignKey(Product, related_name='items', on_delete=models.DO_NOTHING)
    price = models.FloatField()
    quantity = models.IntegerField(default=1)

    def __str__ (self):
        return '%s' % self.id


order/admin.py:
from django.contrib import admin

from .models import Order, OrderItem

# Register your models here.
admin.site.register(Order)
admin.site.register(OrderItem)


cart.html:
{% extends 'base.html' %}

{% block title %} Cart | {% endblock %}

{% block content %}
    <div id="cartapp">
        <h1 class="title">Cart</h1>
        {% if cart %}
            <div class="table">
                <table class="table">
                    <thead>
                        <th>Product</th>
                        <th>Quantity</th>
                        <th>Price</th>
                        <th></th>
                    </thead>
                    <tbody>
                        <tr v-for="product in products">
                            <td>[[ product.title ]]</td>
                            <td><button @click="decrementQuantity(product.id, product.quantity, product.price)">-</button> [[ product.quantity ]] <button @click="incrementQuantity(product.id, product.quantity, product.price)">+</button></td>
                            <td>[[ product.total_price ]]</td>
                            <td><button @click="removeFromCart(product.id)">Remove from cart</button></td>
                        </tr>
                    </tbody>

                    <tfoot>
                        <tr>
                            <td>Total Cost:</td>
                            <td>[[ numItems ]]</td>
                            <td></td>
                            <td>[[ totalCost ]]</td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        {% else %}
            <p>Your cart is empty!</p>
        {% endif %}
    </div>
{% endblock %}

{% block scripts %}
<script>
    var productapp = new Vue({
        el: '#cartapp',
        delimiters: ['[[', ']]'],
        store: store,
        data() {
            return {
                products: [{{ productsstring|safe }}]

            };
        },
        computed: {
            numItems: function() {
                return store.state.numItems
            },
            totalCost: function () {
                return store.state.totalCost
            }
        },
        mounted () {
            console.log('Vue instance mounted for cart');
        },
        methods: {
            incrementQuantity(product_id, quantity, price) {
                console.log('Product_id:', product_id);

                var data = {
                    'product_id': product_id,
                    'update': true,
                    'quantity': parseInt(quantity) + 1
                };

                console.log(price);
                store.commit('increment', 1);
                store.commit('changeTotalCost', parseFloat(price));

                fetch('/api/add_to_cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)
                })
                .then((response) => {
                    console.log(response);
                    
                    for (var i = 0; i < this.products.length; i++) {
                        var product = this.products[i];

                        if (product.id === product_id) {
                            this.products[i].quantity = parseInt(this.products[i].quantity) + 1;
                            this.products[i].total_price = parseInt(this.products[i].quantity) * parseFloat(this.products[i].price);
                        }
                    }
                })
                .catch(function (error) {
                    console.log('Error 2:');
                    console.log(error);
                }); 
            },
            decrementQuantity(product_id, quantity, price) {
                console.log('Product_id:', product_id);

                var data = {
                    'product_id': product_id,
                    'update': true,
                    'quantity': parseInt(quantity) - 1
                };

                store.commit('increment', -1);
                store.commit('changeTotalCost', -parseFloat(price));

                fetch('/api/add_to_cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)
                })
                .then((response) => {
                    console.log(response);
                    
                    for (var i = 0; i < this.products.length; i++) {
                        var product = this.products[i];

                        if (product.id === product_id) {
                            this.products[i].quantity = parseInt(this.products[i].quantity) - 1;
                            this.products[i].total_price = parseInt(this.products[i].quantity) * parseFloat(this.products[i].price);
                        }
                    }
                })
                .catch(function (error) {
                    console.log('Error 2:');
                    console.log(error);
                }); 
            },
            removeFromCart(product_id) {
                console.log('Product_id:', product_id);

                var data = {
                    'product_id': product_id
                };

                fetch('/api/remove_from_cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)
                })
                .then((response) => {
                    console.log(response);
                    this.products = this.products.filter(product => product.id !== product_id);
                })
                .catch(function (error) {
                    console.log('Error 2:', error);
                });
            }
        }
    });
</script>
{% endblock %}


H. Order System
cart/context_processors.py:
from .cart import Cart

def cart(request):
    return {'cart': Cart(request)}


snippet from settings.py:
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'apps.store.context_processors.menu_main_categories', # Adding the categories inside the template
                'apps.cart.context_processors.cart', # Adding the cart inside the templates
            ],
        },
    },
]


cart.html:
{% extends 'base.html' %}

{% block title %} Cart | {% endblock %}

{% block content %}
    <div id="cartapp">
        <h1 class="title">Cart</h1>
        {% if cart %}
            <div v-if="products.length > 0">
                <div class="table">
                    <table class="table">
                        <thead>
                            <th>Product</th>
                            <th>Quantity</th>
                            <th>Price</th>
                            <th></th>
                        </thead>
                        <tbody>
                            <tr v-for="product in products">
                                <td>[[ product.title ]]</td>
                                <td><button @click="decrementQuantity(product.id, product.quantity, product.price)">-</button> [[ product.quantity ]] <button @click="incrementQuantity(product.id, product.quantity, product.price)">+</button></td>
                                <td>[[ product.total_price ]]</td>
                                <td><button @click="removeFromCart(product.id)">Remove from cart</button></td>
                            </tr>
                        </tbody>

                        <tfoot>
                            <tr>
                                <td>Total Cost:</td>
                                <td>[[ numItems ]]</td>
                                <td></td>
                                <td>[[ totalCost ]]</td>
                            </tr>
                        </tfoot>
                    </table>
                </div>

                <form v-on:submit.prevent="submitForm">

                    <div class="field">
                        <div class="control">
                            <label>First Name</label>
                            <input type="text" name="first_name" v-model="first_name">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Last Name</label>
                            <input type="text" name="last_name" v-model="last_name">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Email</label>
                            <input type="text" name="email" v-model="email">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Contact Number</label>
                            <input type="text" name="contact_number" v-model="contact_number">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Address</label>
                            <input type="text" name="address" v-model="address">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Zip Code</label>
                            <input type="text" name="zip_code" v-model="zip_code">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Place</label>
                            <input type="text" name="place" v-model="place">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <button type="submit" class="button is-primary">Check Out</button>
                        </div>
                    </div>
                </form>
            </div>
            <p v-else>Your cart is empty!</p>
        {% else %}
            <p>Your cart is empty!</p>
        {% endif %}
    </div>
{% endblock %}

{% block scripts %}
<script>
    var productapp = new Vue({
        el: '#cartapp',
        delimiters: ['[[', ']]'],
        store: store,
        data() {
            return {
                first_name: '',
                last_name: '',
                email: '',
                contact_number: '',
                address: '',
                zip_code: '',
                place: '',
                products: [{{ productsstring|safe }}]
            };
        },
        computed: {
            numItems: function() {
                return store.state.numItems
            },
            totalCost: function () {
                return store.state.totalCost
            }
        },
        mounted () {
            console.log('Vue instance mounted for cart');
        },
        methods: {
            submitForm() {
                console.log('Submit Form');
                var data = {
                    'first_name': this.first_name,
                    'last_name': this.last_name,
                    'email': this.email,
                    'contact_number': this.contact_number,
                    'address': this.address,
                    'zip_code': this.zip_code,
                    'place': this.place,
                };

                fetch('/api/checkout/', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)  
                })
                .then((response) => {
                    console.log('Success');
                    console.log(response)

                    window.location.href = '/';

                })
                .catch(function (error){
                    console.log('Error 2:');
                    console.log(error);
                }); 
            },
            incrementQuantity(product_id, quantity, price) {
                console.log('Product_id:', product_id);
                var data = {
                    'product_id': product_id,
                    'update': true,
                    'quantity': parseInt(quantity) + 1
                };
                console.log(price);
                store.commit('increment', 1);
                store.commit('changeTotalCost', parseFloat(price));
                fetch('/api/add_to_cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)
                })
                .then((response) => {
                    console.log(response);
                    for (var i = 0; i < this.products.length; i++) {
                        var product = this.products[i];
                        if (product.id === product_id) {
                            this.products[i].quantity = parseInt(this.products[i].quantity) + 1;
                            this.products[i].total_price = parseInt(this.products[i].quantity) * parseFloat(this.products[i].price);
                        }
                    }
                })
                .catch(function (error) {
                    console.log('Error:', error);
                });
            },
            decrementQuantity(product_id, quantity, price) {
                console.log('Product_id:', product_id);
                var data = {
                    'product_id': product_id,
                    'update': true,
                    'quantity': parseInt(quantity) - 1
                };

                if (parseInt(quantity) - 1 === 0) {
                    this.removeFromCart(product_id);
                } else {
                    store.commit('increment', -1);
                    store.commit('changeTotalCost', -parseFloat(price));

                    fetch('/api/add_to_cart', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRFToken': '{{ csrf_token }}'
                        },
                        credentials: 'same-origin',
                        body: JSON.stringify(data)
                    })
                    .then((response) => {
                        console.log(response);
                        for (var i = 0; i < this.products.length; i++) {
                            var product = this.products[i];
                            if (product.id === product_id) {
                                this.products[i].quantity = parseInt(this.products[i].quantity) - 1;
                                this.products[i].total_price = parseInt(this.products[i].quantity) * parseFloat(this.products[i].price);
                            }
                        }
                    })
                    .catch(function (error) {
                        console.log('Error:', error);
                    });
                }
            },
            removeFromCart(product_id) {
                console.log('Remove Product_id:', product_id);
                var data = {
                    'product_id': product_id
                };
                fetch('/api/remove_from_cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)
                })
                .then((response) => {
                    console.log(response);
                    this.products = this.products.filter(product => product.id !== product_id);
                })
                .catch(function (error) {
                    console.log('Error:', error);
                });
            }
        }
    });
</script>
{% endblock %}


api.py:
import json

from django.http import JsonResponse # Import JSON responses from HTTP
from django.shortcuts import get_object_or_404, redirect

from apps.cart.cart import Cart # Import Cart class from cart.py

from apps.order.utils import checkout

from .models import Product # Import database from Product
from apps.order.models import Order, OrderItem

def api_checkout(request):
    cart = Cart(request)

    data = json.loads(request.body)
    jsonresponse = {'success': True}
    first_name = data['first_name']
    last_name = data['last_name']
    email = data['email']
    contact_number = data['contact_number']
    address = data['address']
    zip_code = data['zip_code']
    place = data['place']

    order_id = checkout(request, first_name, last_name, email, contact_number, address, zip_code, place)

    paid = True

    if paid == True:
        order = Order.objects.get(pk = order_id)
        order.paid = True
        order.paid_amount = cart.get_total_cost()
        order.save()

        cart.clear()

    return JsonResponse(jsonresponse)


def api_add_to_cart(request):
    data = json.loads(request.body)
    jsonresponse = {'success': True}
    product_id = data['product_id']
    update = data['update']
    quantity = data['quantity'] 

    cart = Cart(request) # Instantiate the cart class

    product = get_object_or_404(Product, pk=product_id) 
    # Getting the product details from the database. "pk" stands for primary key. Otherwise, error 404 will occur

    # If the update is not set, add the product with the default quantity of 1, without updating the current quantity.
    if not update:
        cart.add(product=product, quantity=1, update_quantity=False)
    else: # update the quantity of the product in the cart.
        cart.add(product=product, quantity=quantity, update_quantity=True)

    return JsonResponse(jsonresponse)


def api_remove_from_cart(request):
    data = json.loads(request.body)
    jsonresponse = {'success': True}
    product_id = str(data['product_id'])

    cart = Cart(request)
    cart.remove(product_id) # Calls remove function in cart.py to remove an item in a cart

    return JsonResponse(jsonresponse)


utils.py:
import datetime
import os

from random import randint

from apps.cart.cart import Cart

from apps.order.models import Order, OrderItem

def checkout(request, first_name, last_name, email, contact_number, address, zip_code, place):
    order = Order(first_name = first_name, last_name = last_name, email = email, contact_number = contact_number, address = address, zip_code = zip_code, place = place) # references to the models.py
    order.save() # Saving it in the database

    cart = Cart(request)

    for item in cart:
        OrderItem.objects.create(order = order, product = item['product'], price = item ['price'], quantity = item['quantity'])

    return order.id


urls.py:
from django.contrib import admin
from django.urls import path
from django.conf import settings
from django.conf.urls.static import static

from apps.cart.views import cart_detail
from apps.core.views import frontpage, contact, about # Importing the frontpage and contact
from apps.store.views import product_detail, main_category_detail, sub_category_detail # Importing the product_detail

from apps.store.api import api_add_to_cart, api_remove_from_cart, api_checkout

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', frontpage, name='frontpage'), # Adding the frontpage for url
    path('cart/', cart_detail, name='cart'),
    path('contact/', contact, name='contact'),
    path('about/', about, name='about'),

    # For API used

    path('api/add_to_cart', api_add_to_cart, name='api_add_to_cart'),
    path('api/remove_from_cart', api_remove_from_cart, name='api_remove_from_cart'),
    path('api/checkout/', api_checkout, name='api_checkout'),

    # Store

    path('category/<slug:slug>/', main_category_detail, name='main_category_detail'),
    path('subcategory/<slug:slug>/', sub_category_detail, name='sub_category_detail'),
    path('<slug:slug>/', product_detail, name='product_detail'), # references the slug from the store/views.py
    
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


cart.py:
from django.conf import settings

from apps.store.models import Product

class Cart(object):
    def __init__(self, request):
        self.session = request.session # Request a session from the settings
        cart = self.session.get(settings.CART_SESSION_ID) # Get the cart from the session using the session ID defined in settings

        if not cart: # returns an empty dictionary if there's no cart
            cart = self.session[settings.CART_SESSION_ID] = {} 

        self.cart = cart

    def __iter__(self):
        product_ids = self.cart.keys() # Get product_id in the cart

        product_clean_ids = [] # Initializing a list for storing product_id

        for p in product_ids:
            product_clean_ids.append(p) # Appends the empty list

            self.cart[str(p)]['product'] = Product.objects.get(pk=p) # Getting the product_id in the database

        for item in self.cart.values():
            item['total_price'] = float(item['price']) * int(item['quantity'])

            yield item # Makes the for loop iterable

    def __len__(self): # returns the total number of products in the cart
        return sum(item['quantity'] for item in self.cart.values())

    def add(self, product, quantity = 1, update_quantity=False): 
        product_id = str(product.id)
        price = product.price

        if product_id not in self.cart:
            self.cart[product_id] = {'quantity': 0, 'price': price, 'id': product_id} # Setting the product details to this one if it is not in the cart

        if update_quantity:
            self.cart[product_id]['quantity'] = quantity # Setting it to specified quantity if updated
        else: 
            self.cart[product_id]['quantity'] += 1   # increment it by 1 otherwise
        
        self.save()

    def remove(self, product_id): # Removing items in cart
        if product_id in self.cart:
            del self.cart[product_id]
            self.save()
    
    def save(self): # Saving all related actions in cart system
        self.session[settings.CART_SESSION_ID] = self.cart
        self.session.modified = True

    def clear(self):
        del self.session[settings.CART_SESSION_ID]
        self.session.modified = True

    def get_total_length(self):
        return sum(int(item['quantity']) for item in self.cart.values())
    
    def get_total_cost(self):
        if "total_price" in self.cart.values():
            return sum(float(item('total_price')) for item in self.cart.values())
        else:
            return 0


I. Integrating stripe
success.html:
{% extends 'base.html' %}

{% block title %} Thank You {% endblock %}

{% block content %}
    <div calss="container">
        <h1 class="title">Thank you </h1>
    </div>

    <p>Thank you for your order. It will be processed as soon as possible.</p>
{% endblock %}


cart/views.py:
from django.conf import settings
from django.shortcuts import render

from .cart import Cart

# Create your views here.
def cart_detail(request):
    cart = Cart(request)
    productsstring = ''

    print(f'Cart items: {list(cart)}')  # just to debug >o<

    for item in cart: # Getting the data from the database
        product = item['product']
        b = "{'id': '%s', 'title': '%s', 'price': '%s', 'quantity': '%s', 'total_price': '%s'}," % (
            product.id, product.title, product.price, item['quantity'], item['total_price'])

        productsstring += b

    print(f'Products string: {productsstring}')  # debugging haha

    context = {
        'cart': cart,
        'pub_key': settings.STRIPE_API_KEYS_PUBLISHABLE,
        'productsstring': productsstring
    }

    return render(request, 'cart.html', context)

def success(request):
    cart = Cart(request)
    cart.clear()

    return render(request, 'success.html')


urls.py:
from django.contrib import admin
from django.urls import path
from django.conf import settings
from django.conf.urls.static import static

from apps.cart.webhook import webhook
from apps.cart.views import cart_detail, success
from apps.core.views import frontpage, contact, about # Importing the frontpage and contact
from apps.store.views import product_detail, main_category_detail, sub_category_detail # Importing the product_detail

from apps.store.api import api_add_to_cart, api_remove_from_cart, api_checkout, create_checkout_session

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', frontpage, name='frontpage'), # Adding the frontpage for url
    path('cart/', cart_detail, name='cart'),
    path('hooks/', webhook, name='webhook'),
    path('cart/success/', success, name='success'),
    path('contact/', contact, name='contact'),
    path('about/', about, name='about'),

    # For API used

    path('api/create_checkout_session/', create_checkout_session, name='create_checkout_session'),
    path('api/add_to_cart', api_add_to_cart, name='api_add_to_cart'),
    path('api/remove_from_cart', api_remove_from_cart, name='api_remove_from_cart'),
    path('api/checkout/', api_checkout, name='api_checkout'),

    # Store

    path('category/<slug:slug>/', main_category_detail, name='main_category_detail'),
    path('subcategory/<slug:slug>/', sub_category_detail, name='sub_category_detail'),
    path('<slug:slug>/', product_detail, name='product_detail'), # references the slug from the store/views.py
    
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


api.py:
import json
import stripe
from django.conf import settings
from django.http import JsonResponse
from django.shortcuts import get_object_or_404
from apps.cart.cart import Cart
from apps.order.utils import checkout
from .models import Product
from apps.order.models import Order


def api_add_to_cart(request):
    data = json.loads(request.body)
    jsonresponse = {'success': True}
    product_id = data['product_id']
    update = data['update']
    quantity = data['quantity'] 

    cart = Cart(request)
    product = get_object_or_404(Product, pk=product_id)

    if not update:
        cart.add(product=product, quantity=1, update_quantity=False)
    else:
        cart.add(product=product, quantity=quantity, update_quantity=True)

    return JsonResponse(jsonresponse)


def api_remove_from_cart(request):
    data = json.loads(request.body)
    jsonresponse = {'success': True}
    product_id = str(data['product_id'])

    cart = Cart(request)
    cart.remove(product_id)

    return JsonResponse(jsonresponse)


def api_checkout(request):
    cart = Cart(request)
    data = json.loads(request.body)
    jsonresponse = {'success': True}
    first_name = data['first_name']
    last_name = data['last_name']
    email = data['email']
    contact_number = data['contact_number']
    address = data['address']
    zip_code = data['zip_code']
    place = data['place']

    order_id = checkout(request, first_name, last_name, email, contact_number, address, zip_code, place)
    paid = True

    print(f'Order Info: {order_id}')
    print(f'Total Cost: {cart.get_total_cost()}')

    if paid:
        order = Order.objects.get(pk=order_id)
        order.paid = True
        order.paid_amount = cart.get_total_cost()
        order.save()

        cart.clear()

    return JsonResponse(jsonresponse)


def create_checkout_session(request):
    print('Checkout process 1')
    cart = Cart(request)
    data = json.loads(request.body)

    stripe.api_key = settings.STRIPE_API_KEYS_HIDDEN
    items = []

    for item in cart:
        product = item['product']
        obj = {
            'price_data': {
                'currency': 'usd',
                'product_data': {
                    'name': product.title
                },
                'unit_amount': int(product.price * 100)  
            },
            'quantity': item['quantity']
        }
        items.append(obj)

    session = stripe.checkout.Session.create(
        payment_method_types=['card'],
        line_items=items,
        mode='payment',
        success_url='http://127.0.0.1:8000/cart/success/',
        cancel_url='http://127.0.0.1:8000/cart/',
    )

    print(f"Session created: {session.id}")
    payment_intent_id = session.get("payment_intent")

    # Create order
    first_name = data['first_name']
    last_name = data['last_name']
    email = data['email']
    contact_number = data['contact_number']
    address = data['address']
    zip_code = data['zip_code']
    place = data['place']

    order_id = checkout(request, first_name, last_name, email, contact_number, address, zip_code, place)
    order = Order.objects.get(pk=order_id)
    order.paid_amount = cart.get_total_cost()
    order.payment_intent = 'Pending'
    order.save()

    print(f"Order {order.id} saved with Payment Intent: {order.payment_intent}") # hahaha debugging ;-;
    print(f"Items sent to Stripe: {items}") # Pls pls pls
    
    return JsonResponse({'session': session})


cart.html:
{% extends 'base.html' %}

{% block title %} Cart | {% endblock %}

{% block content %}
    <div id="cartapp">
        <h1 class="title">Cart</h1>
        {% if cart %}
            <div v-if="products.length > 0">
                <div class="table">
                    <table class="table">
                        <thead>
                            <th>Product</th>
                            <th>Quantity</th>
                            <th>Price</th>
                            <th></th>
                        </thead>
                        <tbody>
                            <tr v-for="product in products">
                                <td>[[ product.title ]]</td>
                                <td><button @click="decrementQuantity(product.id, product.quantity, product.price)">-</button> [[ product.quantity ]] <button @click="incrementQuantity(product.id, product.quantity, product.price)">+</button></td>
                                <td>[[ product.total_price ]]</td>
                                <td><button @click="removeFromCart(product.id)">Remove from cart</button></td>
                            </tr>
                        </tbody>

                        <tfoot>
                            <tr>
                                <td>Total Cost:</td>
                                <td>[[ numItems ]]</td>
                                <td></td>
                                <td>[[ totalCost ]]</td>
                            </tr>
                        </tfoot>
                    </table>
                </div>

                <form v-on:submit.prevent="submitForm">

                    <div class="field">
                        <div class="control">
                            <label>First Name</label>
                            <input type="text" name="first_name" v-model="first_name">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Last Name</label>
                            <input type="text" name="last_name" v-model="last_name">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Email</label>
                            <input type="text" name="email" v-model="email">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Contact Number</label>
                            <input type="text" name="contact_number" v-model="contact_number">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Address</label>
                            <input type="text" name="address" v-model="address">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Zip Code</label>
                            <input type="text" name="zip_code" v-model="zip_code">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Place</label>
                            <input type="text" name="place" v-model="place">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <button type="submit" class="button is-primary">Check Out</button>
                        </div>
                    </div>
                </form>
            </div>
            <p v-else>Your cart is empty!</p>
        {% else %}
            <p>Your cart is empty!</p>
        {% endif %}

        <div v-if="errors.length > 0">
            <article class="message is-danger"
                v-for="error in errors">
                <div class="message-header">
                    <p>Error</p>
                    <button class="delete" aria-label="delete"></button>
                </div>

                <div class="message-body">
                    [[ error ]]
                </div>

              </article>
        </div>

        <button @click="buy()">Check Out</button>
    </div>
{% endblock %}

{% block scripts %}
<script type="application/javascript" src="https://js.stripe.com/v3/"></script>
<script>
    var productapp = new Vue({
        el: '#cartapp',
        delimiters: ['[[', ']]'],
        store: store,
        data() {
            return {
                errors: [],
                first_name: '',
                last_name: '',
                email: '',
                contact_number: '',
                address: '',
                zip_code: '',
                place: '',
                products: [{{ productsstring|safe }}]
            };
        },
        computed: {
            numItems: function() {
                return store.state.numItems
            },
            totalCost: function () {
                return store.state.totalCost
            }
        },
        mounted () {
            console.log('Vue instance mounted for cart');
        },
        methods: {
            buy(){
                var data = {
                    'first_name': this.first_name,
                    'last_name': this.last_name,
                    'email': this.email,
                    'contact_number': this.contact_number,
                    'address': this.address,
                    'zip_code': this.zip_code,
                    'place': this.place,
                };

                this.errors = [];

                if (data.first_name === '') {
                    this.errors.push('First name is empty');
                }

                if (data.last_name === '') {
                    this.errors.push('Last name is empty');
                }

                if (data.email === '') {
                    this.errors.push('Email is empty');
                }

                if (data.contact_number === '') {
                    this.errors.push('Contact Number is empty');
                }

                if (data.address === '') {
                    this.errors.push('Address is empty');
                }

                if (data.zip_code === '') {
                    this.errors.push('Zip Code is empty');
                }

                if (data.place === '') {
                    this.errors.push('Place is empty');
                }

                if (this.errors.length === 0) {
                    var stripe = Stripe('{{ pub_key }}');

                    fetch('/api/create_checkout_session/', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRFToken': '{{ csrf_token }}'
                        },
                        credentials: 'same-origin',
                        body: JSON.stringify(data)
                    })
                    .then(function(response) {
                        if (!response.ok) {
                            throw new Error('Network response was not ok ' + response.statusText);
                        }
                        return response.json();
                    })
                    .then(function(session) {
                        return stripe.redirectToCheckout({ sessionId: session.session.id });
                    })
                    .catch(function(error) {
                        console.error('Error:', error);
                        alert('There was an issue with the checkout process.');
                    });
                }  
            },
            submitForm() {
                console.log('Submit Form');
                var data = {
                    'first_name': this.first_name,
                    'last_name': this.last_name,
                    'email': this.email,
                    'contact_number': this.contact_number,
                    'address': this.address,
                    'zip_code': this.zip_code,
                    'place': this.place,
                };

                fetch('/api/checkout/', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)  
                })
                .then((response) => {
                    console.log('Success');
                    console.log(response)

                    window.location.href = '/';

                })
                .catch(function (error){
                    console.log('Error 2:');
                    console.log(error);
                }); 
            },
            incrementQuantity(product_id, quantity, price) {
                console.log('Product_id:', product_id);
                var data = {
                    'product_id': product_id,
                    'update': true,
                    'quantity': parseInt(quantity) + 1
                };
                console.log(price);
                store.commit('increment', 1);
                store.commit('changeTotalCost', parseFloat(price));
                fetch('/api/add_to_cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)
                })
                .then((response) => {
                    console.log(response);
                    for (var i = 0; i < this.products.length; i++) {
                        var product = this.products[i];
                        if (product.id === product_id) {
                            this.products[i].quantity = parseInt(this.products[i].quantity) + 1;
                            this.products[i].total_price = parseInt(this.products[i].quantity) * parseFloat(this.products[i].price);
                        }
                    }
                })
                .catch(function (error) {
                    console.log('Error:', error);
                });
            },
            decrementQuantity(product_id, quantity, price) {
                console.log('Product_id:', product_id);
                var data = {
                    'product_id': product_id,
                    'update': true,
                    'quantity': parseInt(quantity) - 1
                };

                if (parseInt(quantity) - 1 === 0) {
                    this.removeFromCart(product_id);
                } else {
                    store.commit('increment', -1);
                    store.commit('changeTotalCost', -parseFloat(price));

                    fetch('/api/add_to_cart', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRFToken': '{{ csrf_token }}'
                        },
                        credentials: 'same-origin',
                        body: JSON.stringify(data)
                    })
                    .then((response) => {
                        console.log(response);
                        for (var i = 0; i < this.products.length; i++) {
                            var product = this.products[i];
                            if (product.id === product_id) {
                                this.products[i].quantity = parseInt(this.products[i].quantity) - 1;
                                this.products[i].total_price = parseInt(this.products[i].quantity) * parseFloat(this.products[i].price);
                            }
                        }
                    })
                    .catch(function (error) {
                        console.log('Error:', error);
                    });
                }
            },
            removeFromCart(product_id) {
                console.log('Remove Product_id:', product_id);
                var data = {
                    'product_id': product_id
                };
                fetch('/api/remove_from_cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)
                })
                .then((response) => {
                    console.log(response);
                    this.products = this.products.filter(product => product.id !== product_id);
                })
                .catch(function (error) {
                    console.log('Error:', error);
                });
            }
        }
    });
</script>
{% endblock %}


cart.py:
from django.conf import settings

from apps.store.models import Product

class Cart(object):
    def __init__(self, request):
        self.session = request.session # Request a session from the settings
        cart = self.session.get(settings.CART_SESSION_ID) # Get the cart from the session using the session ID defined in settings

        if not cart: # returns an empty dictionary if there's no cart
            cart = self.session[settings.CART_SESSION_ID] = {} 

        self.cart = cart

    def __iter__(self):
        product_ids = self.cart.keys() # Get product_id in the cart

        product_clean_ids = [] # Initializing a list for storing product_id

        for p in product_ids:
            product_clean_ids.append(p) # Appends the empty list
        
            self.cart[str(p)]['product'] = Product.objects.get(pk=p) # Getting the product_id in the database

        for item in self.cart.values():
            item['total_price'] = float(item['price']) * int(item['quantity'])

            yield item # Makes the for loop iterable

    def __len__(self): # returns the total number of products in the cart
        return sum(item['quantity'] for item in self.cart.values())

    def add(self, product, quantity = 1, update_quantity=False): 
        product_id = str(product.id)
        price = product.price

        if product_id not in self.cart:
            self.cart[product_id] = {'quantity': 0, 'price': price, 'id': product_id} # Setting the product details to this one if it is not in the cart

        if update_quantity:
            self.cart[product_id]['quantity'] = quantity # Setting it to specified quantity if updated
        else: 
            self.cart[product_id]['quantity'] += 1   # increment it by 1 otherwise
        
        self.save()

    def remove(self, product_id): # Removing items in cart
        if product_id in self.cart:
            del self.cart[product_id]
            self.save()
    
    def save(self): # Saving all related actions in cart system
        self.session[settings.CART_SESSION_ID] = self.cart
        self.session.modified = True

    def clear(self):
        del self.session[settings.CART_SESSION_ID]
        self.session.modified = True

    def get_total_length(self):
        return sum(int(item['quantity']) for item in self.cart.values())
    
    def get_total_cost(self):
        return sum(float(item['total_price']) for item in self.cart.values() if 'total_price' in item)


order/models.py:
from django.db import models

from apps.store.models import Product

# Create your models here.
class Order(models.Model):
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    email = models.CharField(max_length=100)
    address = models.CharField(max_length=300)
    zip_code = models.CharField(max_length=100)
    place = models.CharField(max_length=100)
    contact_number = models.CharField(max_length=100, default='00000000000')

    order_created_at = models.DateTimeField(auto_now_add=True)

    paid = models.BooleanField(default=False)
    paid_amount = models.FloatField(blank=True, null=True)

    payment_intent = models.CharField(max_length=300, blank=True, null=True)  


    def __str__(self):
        return '%s' % self.first_name
    
class OrderItem(models.Model):
    order = models.ForeignKey(Order, related_name='items', on_delete=models.CASCADE)
    product = models.ForeignKey(Product, related_name='items', on_delete=models.DO_NOTHING)
    price = models.FloatField()
    quantity = models.IntegerField(default=1)

    def __str__ (self):
        return '%s' % self.id


webhook.py:
import json
import stripe

from django.conf import settings
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt

from apps.order.models import Order 

@csrf_exempt
def webhook(request):
    print('Webhook Check 1')
    payload = request.body
    event = None

    stripe.api_key = settings.STRIPE_API_KEYS_HIDDEN

    try:
        event = stripe.Event.construct_from(
            json.loads(payload), stripe.api_key
        )
    except ValueError as e:
        return HttpResponse(status=400)
    
    if event['type'] == 'payment_intent.succeeded':
        payment_intent = event['data']['object']
        print('Payment intent: ', payment_intent)

        payment_intent_id = payment_intent['id']
        payment_intent_status = 'Pending'

        try:
            order = Order.objects.get(payment_intent=payment_intent_status)
            order.payment_intent = payment_intent['id']
            order.paid = True
            order.save()
            print("Order updated successfully with Payment Intent: ", payment_intent_id)
        except Order.DoesNotExist:
            print(f"Order not found for payment intent: {payment_intent_id}")
            return HttpResponse(status=404)

    return HttpResponse(status=200)


cart/views.py:
from django.conf import settings
from django.shortcuts import render

from .cart import Cart

# Create your views here.
def cart_detail(request):
    cart = Cart(request)
    productsstring = ''

    print(f'Cart items: {list(cart)}')  # just to debug >o<

    for item in cart: # Getting the data from the database
        product = item['product']
        b = "{'id': '%s', 'title': '%s', 'price': '%s', 'quantity': '%s', 'total_price': '%s'}," % (
            product.id, product.title, product.price, item['quantity'], item['total_price'])

        productsstring += b

    print(f'Products string: {productsstring}')  # debugging haha

    context = {
        'cart': cart,
        'pub_key': settings.STRIPE_API_KEYS_PUBLISHABLE,
        'productsstring': productsstring
    }

    return render(request, 'cart.html', context)

def success(request):
    cart = Cart(request)
    cart.clear()

    return render(request, 'success.html')


J. Coupons
coupon/models.py:
from django.db import models

# Create your models here.
class Coupon(models.Model):
    coupon_code = models.CharField(max_length = 50, unique = True)
    coupon_value = models.IntegerField() # Just to be flexible if you want to create a coupon with percentage 
    active = models.BooleanField(default = True)
    number_available = models.IntegerField(default = 1)
    number_used = models.IntegerField(default = 0)

    def __str__(self):
        return self.coupon_code
    
    def can_use(self): # Usability of coupons
        is_active = True

        if self.active == False:
            is_active = False

        if self.number_used >= self.number_available and self.number_available != 0:
            is_active = False

        return is_active
    
    def use(self): # Usage of function
        self.number_used += 1

        if self.number_used == self.number_available:
            self.active = False

        self.save()


coupon/admin.py:
from django.contrib import admin

from .models import Coupon

# Register your models here.
admin.site.register(Coupon)

coupon/apps.py:
from django.apps import AppConfig


class CouponConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'apps.coupon'


snippet from settings.py:
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'apps.cart.apps.CartConfig', # Adding the cart folder and its related files
    'apps.coupon.apps.CouponConfig', # Adding the coupon folder and its related files
    'apps.core.apps.CoreConfig', # Adding the core folder and its related files
    'apps.order.apps.OrderConfig', # Adding the order folder and its related files
    'apps.store.apps.StoreConfig', # Adding store folder and its related files
]


coupon/api.py:
from django.http import JsonResponse

from .models import Coupon

def api_can_use(request):
    json_response = {}

    coupon_code_get = request.GET.get('coupon_code_get', '')
    print('Coupon get before fetching')

    try:
        coupon = Coupon.objects.get(coupon_code = coupon_code_get)

        if coupon.can_use():
            json_response = {'amount': coupon.coupon_value}
            print('Fetched')
        else:
            json_response = {'amount': 0}
    
    except Exception:
        json_response = {'amount': 0}

    return JsonResponse(json_response)


urls.py:
from django.contrib import admin
from django.urls import path
from django.conf import settings
from django.conf.urls.static import static

from apps.cart.webhook import webhook
from apps.cart.views import cart_detail, success
from apps.core.views import frontpage, contact, about # Importing the frontpage and contact
from apps.store.views import product_detail, main_category_detail, sub_category_detail # Importing the product_detail

from apps.coupon.api import api_can_use
from apps.store.api import api_add_to_cart, api_remove_from_cart, api_checkout, create_checkout_session

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', frontpage, name='frontpage'), # Adding the frontpage for url
    path('cart/', cart_detail, name='cart'),
    path('hooks/', webhook, name='webhook'),
    path('cart/success/', success, name='success'),
    path('contact/', contact, name='contact'),
    path('about/', about, name='about'),

    # For API used

    path('api/can_use/', api_can_use, name='api_can_use'),
    path('api/create_checkout_session/', create_checkout_session, name='create_checkout_session'),
    path('api/add_to_cart', api_add_to_cart, name='api_add_to_cart'),
    path('api/remove_from_cart', api_remove_from_cart, name='api_remove_from_cart'),
    path('api/checkout/', api_checkout, name='api_checkout'),

    # Store

    path('category/<slug:slug>/', main_category_detail, name='main_category_detail'),
    path('subcategory/<slug:slug>/', sub_category_detail, name='sub_category_detail'),
    path('<slug:slug>/', product_detail, name='product_detail'), # references the slug from the store/views.py
    
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


order/models.py:
from django.db import models

from apps.store.models import Product

# Create your models here.
class Order(models.Model):
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    email = models.CharField(max_length=100)
    address = models.CharField(max_length=300)
    zip_code = models.CharField(max_length=100)
    place = models.CharField(max_length=100)
    contact_number = models.CharField(max_length=100, default='00000000000')

    order_created_at = models.DateTimeField(auto_now_add=True)

    paid = models.BooleanField(default=False)
    paid_amount = models.FloatField(blank=True, null=True)
    used_coupon = models.CharField(max_length = 50, blank = True, null = True)

    payment_intent = models.CharField(max_length=300, blank=True, null=True)  


    def __str__(self):
        return '%s' % self.first_name
    
class OrderItem(models.Model):
    order = models.ForeignKey(Order, related_name='items', on_delete=models.CASCADE)
    product = models.ForeignKey(Product, related_name='items', on_delete=models.DO_NOTHING)
    price = models.FloatField()
    quantity = models.IntegerField(default=1)

    def __str__ (self):
        return '%s' % self.id
    
class PaymentTracking(models.Model):
    session_id = models.CharField(max_length=255, unique=True)
    order_id = models.PositiveIntegerField()


cart.html:
{% extends 'base.html' %}

{% block title %} Cart | {% endblock %}

{% block content %}
    <div id="cartapp">
        <h1 class="title">Cart</h1>
        {% if cart %}
            <div v-if="products.length > 0">
                <div class="table">
                    <table class="table">
                        <thead>
                            <th>Product</th>
                            <th>Quantity</th>
                            <th>Price</th>
                            <th></th>
                        </thead>
                        <tbody>
                            <tr v-for="product in products">
                                <td>[[ product.title ]]</td>
                                <td><button @click="decrementQuantity(product.id, product.quantity, product.price)">-</button> [[ product.quantity ]] <button @click="incrementQuantity(product.id, product.quantity, product.price)">+</button></td>
                                <td>[[ product.total_price ]]</td>
                                <td><button @click="removeFromCart(product.id)">Remove from cart</button></td>
                            </tr>
                        </tbody>

                        <tfoot>
                            <tr>
                                <td>Total Cost:</td>
                                <td>[[ numItems ]]</td>
                                <td></td>
                                <td>[[ totalCost ]]</td>
                            </tr>

                            <tr v-if="coupon_value">
                                <td colspan = "3">Total Cost with Coupon:</td>
                                <td>[[ totalCostWithCoupon ]]</td>
                            </tr>
                        </tfoot>
                    </table>


                    <hr>
                    
                    <input type="hidden" v-model="coupon_value"><br>

                    Coupon Code:<br>
                    <input type="text" v-model="coupon_code"><br>

                    <button @click="applyCoupon()">Apply</button>
                    <hr>

                </div>

                <form v-on:submit.prevent="buy()">

                    <div class="field">
                        <div class="control">
                            <label>First Name</label>
                            <input type="text" name="first_name" v-model="first_name">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Last Name</label>
                            <input type="text" name="last_name" v-model="last_name">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Email</label>
                            <input type="text" name="email" v-model="email">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Contact Number</label>
                            <input type="text" name="contact_number" v-model="contact_number">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Address</label>
                            <input type="text" name="address" v-model="address">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Zip Code</label>
                            <input type="text" name="zip_code" v-model="zip_code">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Place</label>
                            <input type="text" name="place" v-model="place">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <button class="button is-primary">Check Out</button>
                        </div>
                    </div>
                </form>
            </div>
            <p v-else>Your cart is empty!</p>
        {% else %}
            <p>Your cart is empty!</p>
        {% endif %}

        <div v-if="errors.length > 0">
            <article class="message is-danger"
                v-for="error in errors">
                <div class="message-header">
                    <p>Error</p>
                    <button class="delete" aria-label="delete"></button>
                </div>

                <div class="message-body">
                    [[ error ]]
                </div>

              </article>
        </div>
    </div>
{% endblock %}

{% block scripts %}
<script type="application/javascript" src="https://js.stripe.com/v3/"></script>
<script>
    var productapp = new Vue({
        el: '#cartapp',
        delimiters: ['[[', ']]'],
        store: store,
        data() {
            return {
                errors: [],
                first_name: '',
                last_name: '',
                email: '',
                contact_number: '',
                address: '',
                zip_code: '',
                place: '',
                products: [{{ productsstring|safe }}],
                coupon_value: 0,
                coupon_code: ''
            };
        },
        computed: {
            numItems: function() {
                return store.state.numItems
            },
            totalCost: function () {
                return store.state.totalCost
            },
            totalCostWithCoupon: function () {
                if (this.coupon_value > 0) {
                    return store.state.totalCost * (parseInt(this.coupon_value) / 100);
                } else {
                    return store.state.totalCost;
                }
            }
        },
        mounted () {
            console.log('Vue instance mounted for cart');
        },
        methods: {
            applyCoupon() {
                if (this.coupon_code !== '') {
                    fetch('/api/can_use/?coupon_code_get=' + this.coupon_code, {
                        method: 'GET'
                    })
                    .then((response) => {
                        return response.json();
                        console.log('Returned');
                    })
                    .then((data) => {
                        if (data.amount) {
                            this.coupon_value = parseInt(data.amount)
                        } else {
                            this.coupon_value = 0
                        }
                    })
                }
            },
            buy(){
                var data = {
                    'first_name': this.first_name,
                    'last_name': this.last_name,
                    'email': this.email,
                    'contact_number': this.contact_number,
                    'address': this.address,
                    'zip_code': this.zip_code,
                    'place': this.place,
                    'coupon_code': this.coupon_code
                };

                this.errors = [];

                if (data.first_name === '') {
                    this.errors.push('First name is empty');
                }

                if (data.last_name === '') {
                    this.errors.push('Last name is empty');
                }

                if (data.email === '') {
                    this.errors.push('Email is empty');
                }

                if (data.contact_number === '') {
                    this.errors.push('Contact Number is empty');
                }

                if (data.address === '') {
                    this.errors.push('Address is empty');
                }

                if (data.zip_code === '') {
                    this.errors.push('Zip Code is empty');
                }

                if (data.place === '') {
                    this.errors.push('Place is empty');
                }

                if (this.errors.length === 0) {
                    var stripe = Stripe('{{ pub_key }}');

                    fetch('/api/create_checkout_session/', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRFToken': '{{ csrf_token }}'
                        },
                        credentials: 'same-origin',
                        body: JSON.stringify(data)
                    })
                    .then(function(response) {
                        if (!response.ok) {
                            throw new Error('Network response was not ok ' + response.statusText);
                        }
                        return response.json();
                    })
                    .then(function(session) {
                        return stripe.redirectToCheckout({ sessionId: session.session.id });
                    })
                    .catch(function(error) {
                        console.error('Error:', error);
                        alert('There was an issue with the checkout process.');
                    });
                }  
            },
            incrementQuantity(product_id, quantity, price) {
                console.log('Product_id:', product_id);
                var data = {
                    'product_id': product_id,
                    'update': true,
                    'quantity': parseInt(quantity) + 1
                };
                console.log(price);
                store.commit('increment', 1);
                store.commit('changeTotalCost', parseFloat(price));
                fetch('/api/add_to_cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)
                })
                .then((response) => {
                    console.log(response);
                    for (var i = 0; i < this.products.length; i++) {
                        var product = this.products[i];
                        if (product.id === product_id) {
                            this.products[i].quantity = parseInt(this.products[i].quantity) + 1;
                            this.products[i].total_price = parseInt(this.products[i].quantity) * parseFloat(this.products[i].price);
                        }
                    }
                })
                .catch(function (error) {
                    console.log('Error:', error);
                });
            },
            decrementQuantity(product_id, quantity, price) {
                console.log('Product_id:', product_id);
                var data = {
                    'product_id': product_id,
                    'update': true,
                    'quantity': parseInt(quantity) - 1
                };

                if (parseInt(quantity) - 1 === 0) {
                    this.removeFromCart(product_id);
                } else {
                    store.commit('increment', -1);
                    store.commit('changeTotalCost', -parseFloat(price));

                    fetch('/api/add_to_cart', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRFToken': '{{ csrf_token }}'
                        },
                        credentials: 'same-origin',
                        body: JSON.stringify(data)
                    })
                    .then((response) => {
                        console.log(response);
                        for (var i = 0; i < this.products.length; i++) {
                            var product = this.products[i];
                            if (product.id === product_id) {
                                this.products[i].quantity = parseInt(this.products[i].quantity) - 1;
                                this.products[i].total_price = parseInt(this.products[i].quantity) * parseFloat(this.products[i].price);
                            }
                        }
                    })
                    .catch(function (error) {
                        console.log('Error:', error);
                    });
                }
            },
            removeFromCart(product_id) {
                console.log('Remove Product_id:', product_id);
                var data = {
                    'product_id': product_id
                };
                fetch('/api/remove_from_cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)
                })
                .then((response) => {
                    console.log(response);
                    this.products = this.products.filter(product => product.id !== product_id);
                })
                .catch(function (error) {
                    console.log('Error:', error);
                });
            }
        }
    });
</script>
{% endblock %}


store/api.py:
import json
import stripe

from django.conf import settings
from django.http import JsonResponse
from django.shortcuts import get_object_or_404

from apps.cart.cart import Cart
from apps.order.utils import checkout
from .models import Product
from apps.order.models import Order, PaymentTracking
from apps.coupon.models import Coupon


def api_add_to_cart(request):
    data = json.loads(request.body)
    jsonresponse = {'success': True}
    product_id = data['product_id']
    update = data['update']
    quantity = data['quantity'] 

    cart = Cart(request)
    product = get_object_or_404(Product, pk=product_id)

    if not update:
        cart.add(product=product, quantity=1, update_quantity=False)
    else:
        cart.add(product=product, quantity=quantity, update_quantity=True)

    return JsonResponse(jsonresponse)


def api_remove_from_cart(request):
    data = json.loads(request.body)
    jsonresponse = {'success': True}
    product_id = str(data['product_id'])

    cart = Cart(request)
    cart.remove(product_id)

    return JsonResponse(jsonresponse)


def api_checkout(request):
    cart = Cart(request)
    data = json.loads(request.body)
    jsonresponse = {'success': True}
    first_name = data['first_name']
    last_name = data['last_name']
    email = data['email']
    contact_number = data['contact_number']
    address = data['address']
    zip_code = data['zip_code']
    place = data['place']

    order_id = checkout(request, first_name, last_name, email, contact_number, address, zip_code, place)
    paid = True

    print(f'Order Info: {order_id}')
    print(f'Total Cost: {cart.get_total_cost()}')

    if paid:
        order = Order.objects.get(pk=order_id)
        order.paid = True
        order.paid_amount = cart.get_total_cost()
        order.save()

        cart.clear()

    return JsonResponse(jsonresponse)


def create_checkout_session(request):
    data = json.loads(request.body)

    # Coupon handling
    coupon_code_get = data.get('coupon_code', '') 
    coupon_value = 0

    if coupon_code_get:
        coupon = Coupon.objects.get(coupon_code=coupon_code_get)
        if coupon.can_use():
            coupon_value = coupon.coupon_value
            coupon.use()

    cart = Cart(request)
    stripe.api_key = settings.STRIPE_API_KEYS_HIDDEN
    items = []

    for item in cart:
        product = item['product']
        price = int(product.price * 100) 

        if coupon_value > 0:
            price = int(price * (int(coupon_value) / 100))

        obj = {
            'price_data': {
                'currency': 'usd',
                'product_data': {
                    'name': product.title
                },
                'unit_amount': price
            },
            'quantity': item['quantity']
        }
        items.append(obj)

    session = stripe.checkout.Session.create(
        payment_method_types=['card'],
        line_items=items,
        mode='payment',
        success_url='http://127.0.0.1:8000/cart/success/',
        cancel_url='http://127.0.0.1:8000/cart/',
    )

    # Create order
    first_name = data['first_name']
    last_name = data['last_name']
    email = data['email']
    contact_number = data['contact_number']
    address = data['address']
    zip_code = data['zip_code']
    place = data['place']
    order_id = checkout(request, first_name, last_name, email, contact_number, address, zip_code, place)

    total_price = 0.00

    for item in cart:
        product = item['product']
        total_price = total_price + (float(product.price) * int(item['quantity']))

    if coupon_value > 0:
        total_price = total_price * (coupon_value / 100)

    try:
        order = Order.objects.get(pk=order_id)
        order.paid_amount = total_price
        order.payment_intent = 'Pending'
        order.used_coupon = coupon_code_get
        order.save()

        PaymentTracking.objects.create(session_id=session.id, order_id=order.id)
        print(f"Session ID: {session.id}")

        print(f"Order {order.id} saved with Payment Intent: {order.payment_intent}") # hahaha debugging ;-;
        print(f"Items sent to Stripe: {items}") # Pls pls pls

        return JsonResponse({'session': session})

    except Exception as e:
        print(f"Error creating order: {str(e)}")
        return JsonResponse({'error': 'Unable to create order'}, status=500)


webhook.py:
import json
import stripe

from django.conf import settings
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt

from apps.order.models import Order, PaymentTracking 

@csrf_exempt
def webhook(request):
    payload = request.body
    event = None

    stripe.api_key = settings.STRIPE_API_KEYS_HIDDEN

    try:
        event = stripe.Event.construct_from(json.loads(payload), stripe.api_key)
    except ValueError as e:
        return HttpResponse(status=400)

    if event['type'] == 'checkout.session.completed':
        session_id = event['data']['object']['id']
        print(f"Session id: {session_id}")

        try:
            tracking = PaymentTracking.objects.get(session_id=session_id)
            order_id = tracking.order_id

            order = Order.objects.get(id=order_id)
            order.paid = True
            order.payment_intent = event['data']['object']['payment_intent']  
            order.save()
            print("Order updated successfully with Payment Intent: ", order.payment_intent)

        except PaymentTracking.DoesNotExist:
            print("No tracking found for session ID.")
            return HttpResponse(status=404)
        except Order.DoesNotExist:
            print(f"Order not found for order ID: {order_id}")
            return HttpResponse(status=404)

    return HttpResponse(status=200)


store/models.py:
from io import BytesIO
from django.core.files import File
from django.db import models
from PIL import Image

# Create your models here.
# Database model
class MainCategory(models.Model):
    title = models.CharField(max_length = 255) # Character field for the database
    slug = models.SlugField(max_length = 255) # a description containing only letters, hyphens, numbers or underscores
    main_ordering = models.IntegerField(default=0)


    class Meta:
        verbose_name_plural = 'Main Categories' # Correcting the plural of the cataegory correct instead of categorys.
        ordering = ('main_ordering',)

    def __str__(self): # To see the title character in admin
        return self.title


class SubCategory(models.Model):
    main_category = models.ForeignKey(MainCategory, related_name='sub_categories', on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    slug = models.SlugField(max_length=255)
    sub_ordering = models.IntegerField(default=0)

    sub_category_image = models.ImageField(upload_to='uploads/', blank=True, null=True)
    sub_category_thumbnail = models.ImageField(upload_to='uploads/', blank=True, null=True)

    class Meta:
        verbose_name_plural = 'Sub Categories'
        ordering = ('sub_ordering',)

    def __str__(self):
        return self.title
    
    def save_sub_category_image(self, *args, **kwargs):
        self.sub_category_thumbnail = self.make_sub_category_thumbnail(self.sub_category_image)

        super().save(*args, **kwargs)
    
    def make_sub_category_thumbnail(self, image, size=(300, 200)):
        sub_category_img = Image.open(image)
        sub_category_img.convert('RGB')
        sub_category_img.thumbnail(size)

        sub_category_thumb_io = BytesIO()
        sub_category_img.save(sub_category_thumb_io, 'JPEG', quality=85)

        from os.path import basename
        sub_category_thumbnail = File(sub_category_thumb_io, name=basename(image.name))

        return sub_category_thumbnail
  
  
class Product(models.Model): # Adding the product in the database
    sub_category = models.ForeignKey(SubCategory, related_name='products', on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    slug = models.SlugField(max_length=255)
    description = models.TextField(blank=True, null=True)
    price = models.FloatField()
    is_featured = models.BooleanField(default=False)

    product_image = models.ImageField(upload_to='uploads/', blank=True, null=True)
    product_thumbnail = models.ImageField(upload_to='uploads/', blank=True, null=True)
    date_added = models.DateTimeField(auto_now_add=True)


    class Meta:
        ordering = ('-date_added',) # Newest one comes first. You can remove the "-" if you want the oldest one to come first.

    def __str__(self):
        return self.title
    
    def save(self, *args, **kwargs):
        self.product_thumbnail = self.make_product_thumbnail(self.product_image)

        super().save(*args, **kwargs)
    
    def make_product_thumbnail(self, image, size=(300, 200)):
        product_img = Image.open(image)
        product_img.convert('RGB')
        product_img.thumbnail(size)

        product_thumb_io = BytesIO()
        product_img.save(product_thumb_io, 'JPEG', quality=85)

        from os.path import basename
        product_thumbnail = File(product_thumb_io, name=basename(image.name))

        return product_thumbnail


sub_category_detail.html:
{% extends 'base.html' %}

{% block title %} {{ sub_category.title }} | {% endblock %}

{% block content %}
    <h1 class="title">{{ sub_category.title }}</h1>
    <div class="columns is-multiline">
        {% for product in products %}
        <div class="column is-3">
            <div class="card">
                <div class="card-image">
                    <figure class="image">
                        <img src="{{ product.product_image.url }}" alt="{{ product.title }}">
                    </figure>
                </div>
                <div class="card-content">
                    <div class="media">
                        <div class="media-content">
                            <p class="title is-4">{{ product.title }}</p>
                            <p class="subtitle is-6">P{{ product.price }}</p>
                        </div>
                    </div>
                </div>
                <footer class="card-footer">
                    <a href="{% url 'product_detail' product.slug %}" class="card-footer-item">View</a>
                </footer>
            </div>
        </div>
        {% endfor %}
    </div>
{% endblock %}


main_category_detail.html:
{% extends 'base.html' %}

{% block title %} {{ category.title }} | {% endblock %}

{% block content %}
    <h1 class="title">{{ category.title }}</h1>
    <div class="columns is-multiline">
        {% for sub_category in menu_sub_categories %} {# Loop through filtered subcategories #}
        <div class="column is-3">
            <div class="card">
                <div class="card-image">
                    <figure class="image">
                        <img src="{{ sub_category.sub_category_image.url }}" alt="{{ sub_category.title }}">
                    </figure>
                </div>
                <div class="card-content">
                    <div class="media">
                        <div class="media-content">
                            <p class="title is-4">{{ sub_category.title }}</p>
                        </div>
                    </div>
                </div>
                <footer class="card-footer">
                    <a href="{% url 'sub_category_detail' sub_category.slug %}" class="card-footer-item">View</a>
                </footer>
            </div>
        </div>
        {% endfor %}
    </div>
{% endblock %}


product_detail.html:
{% extends 'base.html' %}

{% block title %} {{ product.title }} | {% endblock %}

{% block content %}
    <div id="productapp">
        <img src ="{{ product.product_image.url }}">
        <h1 class="title">{{ product.title }}</h1>
        <h2 class="subtitle">P{{ product.price }}</h2>

        {% if product.description %}
            <p>{{ product.description }}</p>
        {% endif %}

        <button @click="addToCart('{{ product.id }}')">Add to Cart</button>

        <article class="message is-success" v-if="showMessage">
            <div class="message-body">
                The product was added to the cart!
            </div>
        </article>
    </div>
{% endblock %}

{% block scripts %}
<script>
    var productapp = new Vue({
        el: '#productapp',
        delimiters: ['[[', ']]'],
        data () {
            return {
                showMessage: false
            }
        },
        mounted(){
            console.log('Vue instance mounted for cart');
        },
        methods: {
            addToCart(product_id) {
                console.log('Product_id:', product_id);

                var data = {
                    'product_id': product_id, 
                    'update': false,
                    'quantity': 1
                };

                fetch('/api/add_to_cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)  
                })
                .then((response) => {
                    console.log(response)

                    this.showMessage = true

                    store.commit('increment', 1);

                    setTimeout(() => {
                        this.showMessage = false
                    }, 2000)
                })
                .catch(function (error){
                    console.log('Error 2:');
                    console.log(error);
                })
            }
        }
    });
</script>
{% endblock %}


order/models.py:
from django.db import models

from apps.store.models import Product

# Create your models here.
class Order(models.Model):
    ORDERED = 'ordered'
    SHIPPED = 'shipped'
    ARRIVED = 'arrived'

    STATUS_CHOICES = (
        (ORDERED, 'Ordered'),
        (SHIPPED, 'Shipped'),
        (ARRIVED, 'Arrived')
    )

    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    email = models.CharField(max_length=100)
    address = models.CharField(max_length=300)
    zip_code = models.CharField(max_length=100)
    place = models.CharField(max_length=100)
    contact_number = models.CharField(max_length=100, default='00000000000')

    order_created_at = models.DateTimeField(auto_now_add=True)

    paid = models.BooleanField(default=False)
    paid_amount = models.FloatField(blank=True, null=True)
    used_coupon = models.CharField(max_length = 50, blank = True, null = True)

    payment_intent = models.CharField(max_length=300, blank=True, null=True)  

    shipped_date = models.DateTimeField(blank=True, null=True)
    shipped_status = models.CharField(max_length = 20, choices = STATUS_CHOICES, default = ORDERED)


    def __str__(self):
        return '%s' % self.first_name
    
class OrderItem(models.Model):
    order = models.ForeignKey(Order, related_name='items', on_delete=models.CASCADE)
    product = models.ForeignKey(Product, related_name='items', on_delete=models.DO_NOTHING)
    price = models.FloatField()
    quantity = models.IntegerField(default=1)

    def __str__ (self):
        return '%s' % self.id
    
class PaymentTracking(models.Model):
    session_id = models.CharField(max_length=255, unique=True)
    order_id = models.PositiveIntegerField()


order/admin.py:
import datetime

from django.urls import reverse
from django.contrib import admin

from .models import Order, OrderItem, PaymentTracking

# Register your models here.

def order_name(obj): # Combining first name and last name
    return '%s %s' % (obj.first_name, obj.last_name)

order_name.short_description = 'Name'

def admin_order_shipped(ModelAdmin, request, queryset):
    for order in queryset:
        order.shipped_date = datetime.datetime.now()
        order.shipped_status = Order.SHIPPED
        order.save()
    return

admin_order_shipped.short_description = 'Set shipped'

class OrderItemInLine(admin.TabularInline): # To show the ordered items.
    model = OrderItem
    raw_id_fields = ['product']


class OrderAdmin(admin.ModelAdmin):
    list_display = ['id', order_name, 'shipped_status' ,'order_created_at'] # Displaying the essential order details
    list_filter = ['order_created_at', 'shipped_status'] # Will show an interface sorting the order based on its order date and shipping status
    search_fields = ['first_name', 'last_name', 'address', 'contact_number'] # Search the order details based on the list
    inlines = [OrderItemInLine] # To show the OrderItemInLine
    actions = [admin_order_shipped]

admin.site.register(Order, OrderAdmin)
admin.site.register(OrderItem)
admin.site.register(PaymentTracking)


L. Search Functionality and other fixes
base.html:
{% load static %}
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>{% block title %} {% endblock %} Sample Website</title>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@1.0.2/css/bulma.min.css">
        <link rel="stylesheet" href="{% static 'main.css' %}">
    </head>
    <body>
        <nav class="navbar is-dark" id="navbarapp">
            <div class="navbar-brand">
                <a class="navbar-item" href="{% url 'frontpage' %}">Bikes</a>

                <a @click="toggleMenu()" role="button" class="navbar-burger burger" aria-label="menu" aria-expanded="false" data-target="main-navbar">
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                </a>
            </div>

            <div id="main-navbar" class="navbar-menu" :class ="{ 'is-active': menuClass }">
                <div class="navbar-start">
                    <div class="navbar-item">
                        <form method="get" action="{% url 'search' %}">
                            <div class="field has-addons">
                                <div class="control">
                                    <input type="text" class="input" placeholder="Search..." name="query">
                                </div>
                                <div class="control">
                                    <button class="button is-success">Search</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
                <div class="navbar-end">
                    {% for category in menu_main_categories %}
                        <a href="{% url 'main_category_detail' category.slug %}" class="navbar-item">{{ category.title }}</a>
                    {% endfor %}

                        <div class="navbar-item">
                            <div >
                                <a href="{% url 'cart' %}" class="button is-primary">Cart ([[ numItems ]])</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </nav>
        <section class="section">
            {% block content %}
            {% endblock %}
        </section>
        <footer class="footer">
            <div class="columns">
                <div class="column is-4">
                    <h2 class="subtitle">Bicycles</h2>
                </div>
                <div class="column is-8">
                    <a href="{% url 'contact' %}" class="navbar-item">Contact</a>
                    <a href="{% url 'about' %}" class="navbar-item">About</a>
                </div>
            </div>
        </footer>
        <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
        <script src="https://unpkg.com/vuex@4.1.0/dist/vuex.global.js"></script>
    
        <script>
            var store = new Vuex.Store({
                state: {
                    numItems: {{ cart.get_total_length }},
                    totalCost: {{ cart.get_total_cost }}
                },
                mutations: {
                    increment(state, quantity) {
                        state.numItems += quantity;
                    },
                    changeTotalCost(state, newCost) {
                        state.totalCost += newCost
                    }
                }
            });

            var navbarapp = new Vue({
                el: '#navbarapp',
                delimiters: ['[[', ']]'],
                store: store,
                data () {
                    return {
                        menuClass: false
                    }
                },
                computed: {
                    numItems: function() {
                        return store.state.numItems
                    }
                },
                methods: {
                    toggleMenu() {
                        console.log('toggle');

                        this.menuClass = !this.menuClass;
                    }
                }
            });
        </script>
    {% block scripts %}
    {% endblock %}
    </body>
</html>


store/views.py:
from django.shortcuts import render, get_object_or_404
from django.db.models import Q

from .models import Product, MainCategory, SubCategory

# Create your views here.
def product_detail(request, slug):
    product = get_object_or_404(Product, slug=slug) # To call the product database

    context = {
        'product': product
    }

    return render(request, 'product_detail.html', context)

def main_category_detail(request, slug):
    category = get_object_or_404(MainCategory, slug=slug)
    subcategories = SubCategory.objects.filter(main_category=category)

    
    context = {
        'category': category,
        'menu_sub_categories': subcategories  # Pass only filtered subcategories
    }

    return render(request, 'main_category_detail.html', context)


def sub_category_detail(request, slug):
    sub_category = get_object_or_404(SubCategory, slug=slug)  # Get the subcategory based on the slug
    products = Product.objects.filter(sub_category=sub_category)  # Get products related to the subcategory

    context = {
        'sub_category': sub_category,
        'products': products  # Pass the products to the template
    }

    return render(request, 'sub_category_detail.html', context)

def search(request):
    query = request.GET.get('query')
    products = Product.objects.filter(Q(title__icontains = query) | Q(description__icontains = query))

    context = {
        'query': query,
        'products': products
    }

    return render(request, 'search.html', context)


search.html:
{% extends 'base.html' %}

{% block title %}Search | {% endblock %}

{% block content %}
    <h1 class="title">Search</h1>
    <h2 class="subtitle">Search term: "{{ query }}"</h2>

    <div class="columns is-multiline">
        {% for product in products %}
        <div class="column is-3">
            <div class="card">
                <div class="card-image">
                    <figure class="image">
                        <img src="{{ product.product_image.url }}" alt="{{ product.title }}">
                    </figure>
                </div>
                <div class="card-content">
                    <div class="media">
                        <div class="media-content">
                            <p class="title is-4">{{ product.title }}</p>
                            <p class="subtitle is-6">P{{ product.price }}</p>
                        </div>
                    </div>
                </div>
                <footer class="card-footer">
                    <a href="{% url 'product_detail' product.sub_category.slug %}" class="card-footer-item">View</a>
                </footer>
            </div>
        </div>
        {% endfor %}
    </div>
{% endblock %}


urls.py:
from django.contrib import admin
from django.urls import path
from django.conf import settings
from django.conf.urls.static import static
from django.contrib.sitemaps.views import sitemap

from apps.cart.webhook import webhook
from apps.cart.views import cart_detail, success
from apps.core.views import frontpage, contact, about # Importing the frontpage and contact
from apps.store.views import product_detail, main_category_detail, sub_category_detail, search # Importing the product_detail

from apps.coupon.api import api_can_use
from apps.store.api import api_add_to_cart, api_remove_from_cart, api_checkout, create_checkout_session

from .sitemaps import StaticViewsSiteMap, MainCategorySitemap, SubCategorySitemap, ProductSitemap

sitemaps = {
    'static': StaticViewsSiteMap, 
    'main_category': MainCategorySitemap,
    'sub_category': SubCategorySitemap,
    'products': ProductSitemap
}

urlpatterns = [
    path('admin/', admin.site.urls),
    path('search/', search, name='search'),
    path('', frontpage, name='frontpage'), # Adding the frontpage for url
    path('cart/', cart_detail, name='cart'),
    path('hooks/', webhook, name='webhook'),
    path('cart/success/', success, name='success'),
    path('contact/', contact, name='contact'),
    path('about/', about, name='about'),

    path('sitemap.xml', sitemap, {'sitemaps': sitemaps}, name='django.contrib.sitemaps.views.sitemap'),

    # For API used

    path('api/can_use/', api_can_use, name='api_can_use'),
    path('api/create_checkout_session/', create_checkout_session, name='create_checkout_session'),
    path('api/add_to_cart', api_add_to_cart, name='api_add_to_cart'),
    path('api/remove_from_cart', api_remove_from_cart, name='api_remove_from_cart'),
    path('api/checkout/', api_checkout, name='api_checkout'),

    # Store

    path('category/<slug:slug>/', main_category_detail, name='main_category_detail'),
    path('subcategory/<slug:slug>/', sub_category_detail, name='sub_category_detail'),
    path('<slug:slug>/', product_detail, name='product_detail'), # references the slug from the store/views.py
    
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


cart.html:
{% extends 'base.html' %}

{% block title %} Cart | {% endblock %}

{% block content %}
    <div id="cartapp">
        <h1 class="title">Cart</h1>
        {% if cart %}
            <div v-if="products.length > 0">
                <div class="table">
                    <table class="table">
                        <thead>
                            <th></th>
                            <th>Product</th>
                            <th>Quantity</th>
                            <th>Price</th>
                            <th></th>
                        </thead>

                        <tbody>
                            <tr v-for="product in products">
                                <td>
                                    <figure class="image is-48x48">
                                        <img :src="product.product_thumbnail">
                                    </figure>
                                </td>
                                <td>
                                    <a :href="product.url">
                                        [[ product.title ]]
                                    </a>
                                </td>
                                <td><button @click="decrementQuantity(product.id, product.quantity, product.price)">-</button> [[ product.quantity ]] <button @click="incrementQuantity(product.id, product.quantity, product.price)">+</button></td>
                                <td>[[ product.total_price ]]</td>
                                <td><button @click="removeFromCart(product.id)">Remove from cart</button></td>
                            </tr>
                        </tbody>

                        <tfoot>
                            <tr>
                                <td>Total Cost:</td>
                                <td>[[ numItems ]]</td>
                                <td></td>
                                <td>[[ totalCost ]]</td>
                            </tr>

                            <tr v-if="coupon_value">
                                <td colspan = "3">Total Cost with Coupon:</td>
                                <td>[[ totalCostWithCoupon ]]</td>
                            </tr>
                        </tfoot>
                    </table>


                    <hr>
                    
                    <input type="hidden" v-model="coupon_value"><br>

                    Coupon Code:<br>
                    <input type="text" v-model="coupon_code"><br>

                    <button @click="applyCoupon()">Apply</button>
                    <hr>

                </div>

                <form v-on:submit.prevent="buy()">

                    <div class="field">
                        <div class="control">
                            <label>First Name</label>
                            <input type="text" name="first_name" v-model="first_name">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Last Name</label>
                            <input type="text" name="last_name" v-model="last_name">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Email</label>
                            <input type="text" name="email" v-model="email">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Contact Number</label>
                            <input type="text" name="contact_number" v-model="contact_number">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Address</label>
                            <input type="text" name="address" v-model="address">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Zip Code</label>
                            <input type="text" name="zip_code" v-model="zip_code">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Place</label>
                            <input type="text" name="place" v-model="place">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <button class="button is-primary">Check Out</button>
                        </div>
                    </div>
                </form>
            </div>
            <p v-else>Your cart is empty!</p>
        {% else %}
            <p>Your cart is empty!</p>
        {% endif %}

        <div v-if="errors.length > 0">
            <article class="message is-danger"
                v-for="error in errors">
                <div class="message-header">
                    <p>Error</p>
                    <button class="delete" aria-label="delete"></button>
                </div>

                <div class="message-body">
                    [[ error ]]
                </div>

              </article>
        </div>
    </div>
{% endblock %}

{% block scripts %}
<script type="application/javascript" src="https://js.stripe.com/v3/"></script>
<script>
    var productapp = new Vue({
        el: '#cartapp',
        delimiters: ['[[', ']]'],
        store: store,
        data() {
            return {
                errors: [],
                first_name: '',
                last_name: '',
                email: '',
                contact_number: '',
                address: '',
                zip_code: '',
                place: '',
                products: [{{ productsstring|safe }}],
                coupon_value: 0,
                coupon_code: ''
            };
        },
        computed: {
            numItems: function() {
                return store.state.numItems
            },
            totalCost: function () {
                return store.state.totalCost
            },
            totalCostWithCoupon: function () {
                if (this.coupon_value > 0) {
                    return store.state.totalCost * (parseInt(this.coupon_value) / 100);
                } else {
                    return store.state.totalCost;
                }
            }
        },
        mounted () {
            console.log('Vue instance mounted for cart');
        },
        methods: {
            applyCoupon() {
                if (this.coupon_code !== '') {
                    fetch('/api/can_use/?coupon_code_get=' + this.coupon_code, {
                        method: 'GET'
                    })
                    .then((response) => {
                        return response.json();
                        console.log('Returned');
                    })
                    .then((data) => {
                        if (data.amount) {
                            this.coupon_value = parseInt(data.amount)
                        } else {
                            this.coupon_value = 0
                        }
                    })
                }
            },
            buy(){
                var data = {
                    'first_name': this.first_name,
                    'last_name': this.last_name,
                    'email': this.email,
                    'contact_number': this.contact_number,
                    'address': this.address,
                    'zip_code': this.zip_code,
                    'place': this.place,
                    'coupon_code': this.coupon_code
                };

                this.errors = [];

                if (data.first_name === '') {
                    this.errors.push('First name is empty');
                }

                if (data.last_name === '') {
                    this.errors.push('Last name is empty');
                }

                if (data.email === '') {
                    this.errors.push('Email is empty');
                }

                if (data.contact_number === '') {
                    this.errors.push('Contact Number is empty');
                }

                if (data.address === '') {
                    this.errors.push('Address is empty');
                }

                if (data.zip_code === '') {
                    this.errors.push('Zip Code is empty');
                }

                if (data.place === '') {
                    this.errors.push('Place is empty');
                }

                if (this.errors.length === 0) {
                    var stripe = Stripe('{{ pub_key }}');

                    fetch('/api/create_checkout_session/', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRFToken': '{{ csrf_token }}'
                        },
                        credentials: 'same-origin',
                        body: JSON.stringify(data)
                    })
                    .then(function(response) {
                        if (!response.ok) {
                            throw new Error('Network response was not ok ' + response.statusText);
                        }
                        return response.json();
                    })
                    .then(function(session) {
                        return stripe.redirectToCheckout({ sessionId: session.session.id });
                    })
                    .catch(function(error) {
                        console.error('Error:', error);
                        alert('There was an issue with the checkout process.');
                    });
                }  
            },
            incrementQuantity(product_id, quantity, price) {
                console.log('Product_id:', product_id);
                var data = {
                    'product_id': product_id,
                    'update': true,
                    'quantity': parseInt(quantity) + 1
                };
                console.log(price);
                store.commit('increment', 1);
                store.commit('changeTotalCost', parseFloat(price));
                fetch('/api/add_to_cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)
                })
                .then((response) => {
                    console.log(response);
                    for (var i = 0; i < this.products.length; i++) {
                        var product = this.products[i];
                        if (product.id === product_id) {
                            this.products[i].quantity = parseInt(this.products[i].quantity) + 1;
                            this.products[i].total_price = parseInt(this.products[i].quantity) * parseFloat(this.products[i].price);
                        }
                    }
                })
                .catch(function (error) {
                    console.log('Error:', error);
                });
            },
            decrementQuantity(product_id, quantity, price) {
                console.log('Product_id:', product_id);
                var data = {
                    'product_id': product_id,
                    'update': true,
                    'quantity': parseInt(quantity) - 1
                };

                if (parseInt(quantity) - 1 === 0) {
                    this.removeFromCart(product_id);
                } else {
                    store.commit('increment', -1);
                    store.commit('changeTotalCost', -parseFloat(price));

                    fetch('/api/add_to_cart', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRFToken': '{{ csrf_token }}'
                        },
                        credentials: 'same-origin',
                        body: JSON.stringify(data)
                    })
                    .then((response) => {
                        console.log(response);
                        for (var i = 0; i < this.products.length; i++) {
                            var product = this.products[i];
                            if (product.id === product_id) {
                                this.products[i].quantity = parseInt(this.products[i].quantity) - 1;
                                this.products[i].total_price = parseInt(this.products[i].quantity) * parseFloat(this.products[i].price);
                            }
                        }
                    })
                    .catch(function (error) {
                        console.log('Error:', error);
                    });
                }
            },
            removeFromCart(product_id) {
                console.log('Remove Product_id:', product_id);
                var data = {
                    'product_id': product_id
                };
                fetch('/api/remove_from_cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)
                })
                .then((response) => {
                    console.log(response);
                    this.products = this.products.filter(product => product.id !== product_id);
                })
                .catch(function (error) {
                    console.log('Error:', error);
                });
            }
        }
    });
</script>
{% endblock %}


cart/views.py:
from django.conf import settings
from django.shortcuts import render, redirect

from .cart import Cart

# Create your views here.
def cart_detail(request):
    cart = Cart(request)
    productsstring = ''

    print(f'Cart items: {list(cart)}')  # just to debug >o<

    for item in cart: # Getting the data from the database
        product = item['product']
        url = '/%s/' % product.slug
        b = "{'id': '%s', 'title': '%s', 'price': '%s', 'quantity': '%s', 'total_price': '%s', 'product_thumbnail': '%s', 'url': '%s'}," % (
            product.id, product.title, product.price, item['quantity'], item['total_price'], product.product_thumbnail.url, url)

        productsstring = productsstring + b

    print(f'Products string: {productsstring}')  # debugging haha

    context = {
        'cart': cart,
        'pub_key': settings.STRIPE_API_KEYS_PUBLISHABLE,
        'productsstring': productsstring
    }

    return render(request, 'cart.html', context)

def success(request):
    cart = Cart(request)
    cart.clear()

    return render(request, 'success.html')


snippet from settings.py:
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sitemaps',
    'django.contrib.staticfiles',

    'apps.cart.apps.CartConfig', # Adding the cart folder and its related files
    'apps.coupon.apps.CouponConfig', # Adding the coupon folder and its related files
    'apps.core.apps.CoreConfig', # Adding the core folder and its related files
    'apps.order.apps.OrderConfig', # Adding the order folder and its related files
    'apps.store.apps.StoreConfig', # Adding store folder and its related files
]


sitemaps.py:
from django.contrib.sitemaps import Sitemap
from django.shortcuts import reverse

from apps.store.models import MainCategory, SubCategory, Product

class StaticViewsSiteMap(Sitemap):
    def items(self):
        return ['frontpage', 'about', 'contact']
    
    def location(self, item):
        return reverse(item)

class MainCategorySitemap(Sitemap):
    def items(self):
        return MainCategory.objects.all()
    
class SubCategorySitemap(Sitemap):
    def items(self):
        return SubCategory.objects.all()
    
class ProductSitemap(Sitemap):
    def items(self):
        return Product.objects.all()
    
    def lastmode(self, obj):
        return obj.date_added


store/models.py:
from io import BytesIO
from django.core.files import File
from django.db import models
from PIL import Image

# Create your models here.
# Database model
class MainCategory(models.Model):
    title = models.CharField(max_length = 255) # Character field for the database
    slug = models.SlugField(max_length = 255) # a description containing only letters, hyphens, numbers or underscores
    main_ordering = models.IntegerField(default=0)


    class Meta:
        verbose_name_plural = 'Main Categories' # Correcting the plural of the cataegory correct instead of categorys.
        ordering = ('main_ordering',)

    def __str__(self): # To see the title character in admin
        return self.title
    
    def get_absolute_url(self):
        return '/%s/' % (self.slug)


class SubCategory(models.Model):
    main_category = models.ForeignKey(MainCategory, related_name='sub_categories', on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    slug = models.SlugField(max_length=255)
    sub_ordering = models.IntegerField(default=0)

    sub_category_image = models.ImageField(upload_to='uploads/', blank=True, null=True)
    sub_category_thumbnail = models.ImageField(upload_to='uploads/', blank=True, null=True)

    class Meta:
        verbose_name_plural = 'Sub Categories'
        ordering = ('sub_ordering',)

    def __str__(self):
        return self.title
    
    def save_sub_category_image(self, *args, **kwargs):
        self.sub_category_thumbnail = self.make_sub_category_thumbnail(self.sub_category_image)

        super().save(*args, **kwargs)

    def get_absolute_url(self):
        return '/%s/%s' % (self.main_category.slug, self.slug)
    
    def make_sub_category_thumbnail(self, image, size=(300, 200)):
        sub_category_img = Image.open(image)
        sub_category_img.convert('RGB')
        sub_category_img.thumbnail(size)

        sub_category_thumb_io = BytesIO()
        sub_category_img.save(sub_category_thumb_io, 'JPEG', quality=85)

        from os.path import basename
        sub_category_thumbnail = File(sub_category_thumb_io, name=basename(image.name))

        return sub_category_thumbnail
  
  
class Product(models.Model): # Adding the product in the database
    sub_category = models.ForeignKey(SubCategory, related_name='products', on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    slug = models.SlugField(max_length=255)
    description = models.TextField(blank=True, null=True)
    price = models.FloatField()
    is_featured = models.BooleanField(default=False)

    product_image = models.ImageField(upload_to='uploads/', blank=True, null=True)
    product_thumbnail = models.ImageField(upload_to='uploads/', blank=True, null=True)
    date_added = models.DateTimeField(auto_now_add=True)


    class Meta:
        ordering = ('-date_added',) # Newest one comes first. You can remove the "-" if you want the oldest one to come first.

    def __str__(self):
        return self.title
    
    def save(self, *args, **kwargs):
        self.product_thumbnail = self.make_product_thumbnail(self.product_image)

        super().save(*args, **kwargs)

    def get_absolute_url(self):
        return '/%s/%s' % (self.sub_category.slug, self.slug)
    
    def make_product_thumbnail(self, image, size=(300, 200)):
        product_img = Image.open(image)
        product_img.convert('RGB')
        product_img.thumbnail(size)

        product_thumb_io = BytesIO()
        product_img.save(product_thumb_io, 'JPEG', quality=85)

        from os.path import basename
        product_thumbnail = File(product_thumb_io, name=basename(image.name))

        return product_thumbnail


M. Inventory System and add more images in a product.
store/models.py:
from io import BytesIO
from django.core.files import File
from django.db import models
from PIL import Image

# Create your models here.
# Database model
class MainCategory(models.Model):
    title = models.CharField(max_length = 255) # Character field for the database
    slug = models.SlugField(max_length = 255) # a description containing only letters, hyphens, numbers or underscores
    main_ordering = models.IntegerField(default=0)


    class Meta:
        verbose_name_plural = 'Main Categories' # Correcting the plural of the cataegory correct instead of categorys.
        ordering = ('main_ordering',)

    def __str__(self): # To see the title character in admin
        return self.title
    
    def get_absolute_url(self):
        return '/%s/' % (self.slug)


class SubCategory(models.Model):
    main_category = models.ForeignKey(MainCategory, related_name='sub_categories', on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    slug = models.SlugField(max_length=255)
    sub_ordering = models.IntegerField(default=0)

    sub_category_image = models.ImageField(upload_to='uploads/', blank=True, null=True)
    sub_category_thumbnail = models.ImageField(upload_to='uploads/', blank=True, null=True)

    class Meta:
        verbose_name_plural = 'Sub Categories'
        ordering = ('sub_ordering',)

    def __str__(self):
        return self.title
    
    def save_sub_category_image(self, *args, **kwargs):
        self.sub_category_thumbnail = self.make_sub_category_thumbnail(self.sub_category_image)

        super().save(*args, **kwargs)

    def get_absolute_url(self):
        return '/%s/%s' % (self.main_category.slug, self.slug)
    
    def make_sub_category_thumbnail(self, image, size=(300, 200)):
        sub_category_img = Image.open(image)
        sub_category_img.convert('RGB')
        sub_category_img.thumbnail(size)

        sub_category_thumb_io = BytesIO()
        sub_category_img.save(sub_category_thumb_io, 'JPEG', quality=85)

        from os.path import basename
        sub_category_thumbnail = File(sub_category_thumb_io, name=basename(image.name))

        return sub_category_thumbnail
  
  
class Product(models.Model): # Adding the product in the database
    sub_category = models.ForeignKey(SubCategory, related_name='products', on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    slug = models.SlugField(max_length=255)
    description = models.TextField(blank=True, null=True)
    price = models.FloatField()
    is_featured = models.BooleanField(default=False)
    number_available = models.IntegerField(default=1)

    product_image = models.ImageField(upload_to='uploads/', blank=True, null=True)
    product_thumbnail = models.ImageField(upload_to='uploads/', blank=True, null=True)

    date_added = models.DateTimeField(auto_now_add=True)


    class Meta:
        ordering = ('-date_added',) # Newest one comes first. You can remove the "-" if you want the oldest one to come first.

    def __str__(self):
        return self.title
    
    def save(self, *args, **kwargs):
        self.product_thumbnail = self.make_product_thumbnail(self.product_image)

        super().save(*args, **kwargs)

    def get_absolute_url(self):
        return '/%s/%s' % (self.sub_category.slug, self.slug)
    
    def make_product_thumbnail(self, image, size=(300, 200)):
        product_img = Image.open(image)
        product_img.convert('RGB')
        product_img.thumbnail(size)

        product_thumb_io = BytesIO()
        product_img.save(product_thumb_io, 'JPEG', quality=85)

        from os.path import basename
        product_thumbnail = File(product_thumb_io, name=basename(image.name))

        return product_thumbnail
    

class ProductImage(models.Model):
    product = models.ForeignKey(Product, related_name='images_product', on_delete=models.CASCADE)

    product_image = models.ImageField(upload_to='uploads/', blank=True, null=True)
    product_thumbnail = models.ImageField(upload_to='uploads/', blank=True, null=True)

    def make_product_thumbnail(self, image, size=(300, 200)):
        product_img = Image.open(image)
        product_img.convert('RGB')
        product_img.thumbnail(size)

        product_thumb_io = BytesIO()
        product_img.save(product_thumb_io, 'JPEG', quality=85)

        from os.path import basename
        product_thumbnail = File(product_thumb_io, name=basename(image.name))

        return product_thumbnail

    def save(self, *args, **kwargs):
        self.product_thumbnail = self.make_product_thumbnail(self.product_image)

        super().save(*args, **kwargs)


store/admin.py:
from django.contrib import admin

from .models import MainCategory, SubCategory, Product, ProductImage # Import the Category class

# Register your models here.
admin.site.register(MainCategory) # Register the new database in store
admin.site.register(SubCategory) 
admin.site.register(Product)
admin.site.register(ProductImage)


product_detail.html:
{% extends 'base.html' %}

{% block title %} {{ product.title }} | {% endblock %}

{% block content %}
    <div id="productapp">
        <img :src ="mainImage">
        <hr>
        <div class="columns">
            <div class="column is-2" v-for="image in images">
                <figure class="image is-100x100">
                    <img :src="image.product_thumbnail" @click="changeMainImage(image.product_image)">
                </figure>
            </div>
        </div>
        <hr>
        <h1 class="title">{{ product.title }}</h1>
        <h2 class="subtitle">P{{ product.price }}</h2>

        {% if product.description %}
            <p>{{ product.description }}</p>
        {% endif %}

        {% if product.in_cart %}
            <p>Already in cart! </p>
        {% else %}
            {% if product.number_available > 0 %}
                <button @click="addToCart('{{ product.id }}')">Add to Cart</button>
            {% else %}
                <p>The product is out of stock.</p>
            {% endif %}
        {% endif %}
       

        <article class="message is-success" v-if="showMessage">
            <div class="message-body">
                The product was added to the cart!
            </div>
        </article>
    </div>
{% endblock %}

{% block scripts %}
<script>
    var productapp = new Vue({
        el: '#productapp',
        delimiters: ['[[', ']]'],
        data () {
            return {
                showMessage: false,
                mainImage: '{{ product.product_image.url }}',
                images : [{{ product_imagesstring|safe }}]
            }
        },
        mounted(){
            console.log('Vue instance mounted for cart');
        },
        methods: {
            changeMainImage (image) {
                this.mainImage = image;
            },
            addToCart(product_id) {
                console.log('Product_id:', product_id);

                var data = {
                    'product_id': product_id, 
                    'update': false,
                    'quantity': 1
                };

                fetch('/api/add_to_cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)  
                })
                .then((response) => {
                    console.log(response)

                    this.showMessage = true

                    store.commit('increment', 1);

                    setTimeout(() => {
                        this.showMessage = false
                    }, 2000)
                })
                .catch(function (error){
                    console.log('Error 2:');
                    console.log(error);
                })
            }
        }
    });
</script>
{% endblock %}


store/views.py:
from django.shortcuts import render, get_object_or_404
from django.db.models import Q

from apps.cart.cart import Cart

from .models import Product, MainCategory, SubCategory

# Create your views here.
def product_detail(request, slug):
    product = get_object_or_404(Product, slug=slug) # To call the product database
 
    product_imagesstring = "{'product_thumbnail': '%s', 'product_image': '%s'}," % (product.product_thumbnail.url, product.product_image.url)

    for image in product.images_product.all(): # 'image_product' is the related_name of ProductImaage model. You may refer on store/modesl.py
        product_imagesstring += ("{'product_thumbnail': '%s', 'product_image': '%s'}," % (image.product_thumbnail.url, image.product_image.url))

    cart = Cart(request)

    if cart.has_product(product.id):
        product.in_cart = True
    else:
        product.in_cart = False

    context = {
        'product': product,
        'product_imagesstring': product_imagesstring
    }

    return render(request, 'product_detail.html', context)

def main_category_detail(request, slug):
    category = get_object_or_404(MainCategory, slug=slug)
    subcategories = SubCategory.objects.filter(main_category=category)

    
    context = {
        'category': category,
        'menu_sub_categories': subcategories  # Pass only filtered subcategories
    }

    return render(request, 'main_category_detail.html', context)


def sub_category_detail(request, slug):
    sub_category = get_object_or_404(SubCategory, slug=slug)  # Get the subcategory based on the slug
    products = Product.objects.filter(sub_category=sub_category)  # Get products related to the subcategory

    context = {
        'sub_category': sub_category,
        'products': products  # Pass the products to the template
    }

    return render(request, 'sub_category_detail.html', context)

def search(request):
    query = request.GET.get('query')
    products = Product.objects.filter(Q(title__icontains = query) | Q(description__icontains = query))

    context = {
        'query': query,
        'products': products
    }

    return render(request, 'search.html', context)


webhook.py:
import json
import stripe

from django.conf import settings
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt

from apps.order.models import Order, PaymentTracking 
from apps.store.models import Product

@csrf_exempt
def webhook(request):
    payload = request.body
    event = None

    stripe.api_key = settings.STRIPE_API_KEYS_HIDDEN

    try:
        event = stripe.Event.construct_from(json.loads(payload), stripe.api_key)
    except ValueError as e:
        return HttpResponse(status=400)

    if event['type'] == 'checkout.session.completed':
        session_id = event['data']['object']['id']
        print(f"Session id: {session_id}")

        try:
            tracking = PaymentTracking.objects.get(session_id=session_id)
            order_id = tracking.order_id

            order = Order.objects.get(id=order_id)
            order.paid = True
            order.payment_intent = event['data']['object']['payment_intent']  
            order.save()

            for item in order.items.all():
                product = item.product
                product.number_available -= item.quantity
                product.save()

            print("Order updated successfully with Payment Intent: ", order.payment_intent)

        except PaymentTracking.DoesNotExist:
            print("No tracking found for session ID.")
            return HttpResponse(status=404)
        except Order.DoesNotExist:
            print(f"Order not found for order ID: {order_id}")
            return HttpResponse(status=404)

    return HttpResponse(status=200)


cart.py:
from django.conf import settings

from apps.store.models import Product

class Cart(object):
    def __init__(self, request):
        self.session = request.session # Request a session from the settings
        cart = self.session.get(settings.CART_SESSION_ID) # Get the cart from the session using the session ID defined in settings

        if not cart: # returns an empty dictionary if there's no cart
            cart = self.session[settings.CART_SESSION_ID] = {} 

        self.cart = cart

    def __iter__(self):
        product_ids = self.cart.keys() # Get product_id in the cart

        product_clean_ids = [] # Initializing a list for storing product_id

        for p in product_ids:
            product_clean_ids.append(p) # Appends the empty list
        
            self.cart[str(p)]['product'] = Product.objects.get(pk=p) # Getting the product_id in the database

        for item in self.cart.values():
            item['total_price'] = float(item['price']) * int(item['quantity'])

            yield item # Makes the for loop iterable

    def __len__(self): # returns the total number of products in the cart
        return sum(item['quantity'] for item in self.cart.values())

    def add(self, product, quantity = 1, update_quantity=False): 
        product_id = str(product.id)
        price = product.price

        if product_id not in self.cart:
            self.cart[product_id] = {'quantity': 0, 'price': price, 'id': product_id} # Setting the product details to this one if it is not in the cart

        if update_quantity:
            self.cart[product_id]['quantity'] = quantity # Setting it to specified quantity if updated
        else: 
            self.cart[product_id]['quantity'] += 1   # increment it by 1 otherwise
        
        self.save()

    def has_product(self, product_id): # Check if the product is available or not based on inventory
        if str(product_id) in self.cart:
            return True
        else:
            return False

    def remove(self, product_id): # Removing items in cart
        if product_id in self.cart:
            del self.cart[product_id]
            self.save()
    
    def save(self): # Saving all related actions in cart system
        self.session[settings.CART_SESSION_ID] = self.cart
        self.session.modified = True

    def clear(self):
        del self.session[settings.CART_SESSION_ID]
        self.session.modified = True

    def get_total_length(self):
        return sum(int(item['quantity']) for item in self.cart.values())
    
    def get_total_cost(self):
        return sum(float(item['total_price']) for item in self.cart.values() if 'total_price' in item)


cart.views.py:
from django.conf import settings
from django.shortcuts import render, redirect

from .cart import Cart

# Create your views here.
def cart_detail(request):
    cart = Cart(request)
    productsstring = ''

    print(f'Cart items: {list(cart)}')  # just to debug >o<

    for item in cart: # Getting the data from the database
        product = item['product']
        url = '/%s/' % product.slug
        b = "{'id': '%s', 'title': '%s', 'price': '%s', 'quantity': '%s', 'total_price': '%s', 'product_thumbnail': '%s', 'url': '%s', 'number_available': '%s'}," % (
            product.id, product.title, product.price, item['quantity'], item['total_price'], product.product_thumbnail.url, url, product.number_available)

        productsstring += b

    print(f'Products string: {productsstring}')  # debugging haha

    context = {
        'cart': cart,
        'pub_key': settings.STRIPE_API_KEYS_PUBLISHABLE,
        'productsstring': productsstring
    }

    return render(request, 'cart.html', context)

def success(request):
    cart = Cart(request)
    cart.clear()

    return render(request, 'success.html')


N. Email confirmation 
core/views.py:
from django.shortcuts import render

from apps.store.models import Product # Importing the Products inside the models.py in Store folder


# Create your views here.
def frontpage(request):
    # products = Product.objects.all() # Getting all products in the database.
    products = Product.objects.filter(is_featured=True) # Showing all products where is_featured = true

    context = { # Dictionary for products
        'products': products
    }

    return render(request, 'frontpage.html', context) # To view the html file of frontpage
    # Add context to view all related products

def contact(request):
    return render(request, 'contact.html')

def about(request):
    return render(request, 'about.html')


urls.py:
from django.contrib import admin
from django.urls import path
from django.conf import settings
from django.conf.urls.static import static
from django.contrib.sitemaps.views import sitemap

from apps.cart.webhook import webhook
from apps.cart.views import cart_detail, success
from apps.core.views import frontpage, contact, about # Importing the frontpage and contact
from apps.store.views import product_detail, main_category_detail, sub_category_detail, search # Importing the product_detail

from apps.coupon.api import api_can_use
from apps.store.api import api_add_to_cart, api_remove_from_cart, api_checkout, create_checkout_session

from .sitemaps import StaticViewsSiteMap, MainCategorySitemap, SubCategorySitemap, ProductSitemap

sitemaps = {
    'static': StaticViewsSiteMap, 
    'main_category': MainCategorySitemap,
    'sub_category': SubCategorySitemap,
    'products': ProductSitemap
}

urlpatterns = [
    path('admin/', admin.site.urls),
    path('search/', search, name='search'),
    path('', frontpage, name='frontpage'), # Adding the frontpage for url
    path('cart/', cart_detail, name='cart'),
    path('hooks/', webhook, name='webhook'),
    path('cart/success/', success, name='success'),
    path('contact/', contact, name='contact'),
    path('about/', about, name='about'),

    path('sitemap.xml', sitemap, {'sitemaps': sitemaps}, name='django.contrib.sitemaps.views.sitemap'),

    # For API used

    path('api/can_use/', api_can_use, name='api_can_use'),
    path('api/create_checkout_session/', create_checkout_session, name='create_checkout_session'),
    path('api/add_to_cart', api_add_to_cart, name='api_add_to_cart'),
    path('api/remove_from_cart', api_remove_from_cart, name='api_remove_from_cart'),
    path('api/checkout/', api_checkout, name='api_checkout'),

    # Store

    path('category/<slug:slug>/', main_category_detail, name='main_category_detail'),
    path('subcategory/<slug:slug>/', sub_category_detail, name='sub_category_detail'),
    path('<slug:slug>/', product_detail, name='product_detail'), # references the slug from the store/views.py
    
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


order_confirmation.html:
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF=8">
        <meta name="viewport" content="widtg=device-width, initial-scale=1.0">

        <title>Name of store</title>
        <style type="text/css">
            html {
                width: 100%;
                -webkit-text-size-adjust: 100;
                -webkit-background-size: 100%;

            }

            body {
                width: 100%;
                font-family: arial;
                font-size: 14px;
                background-color: #fff;
                color: #333;
            }

            a  {
                color: 111;
            }
        </style>
    </head>

    <body>
        <table width="100%" cellspacing="0" cellpadding="0">
            <tr>
                <td>
                    <center>
                        <h1> Bike - Order Confirmation </h1>
                    </center>
                </td>
            </tr>

            <tr>
                <td>
                    <p>Nice! Your order is successful and will be sent shortly.</p>
                </td>
            </tr>

            <tr>
                <td>
                    {% for item in order.items.all %}
                        <p><strong>{{ item.product.title }}</strong> - Quantity: {{ item.quantity }} - Price P{{ item.product.price }}</p>
                    {% endfor %}
                </td>
            </tr>
        </table>
    </body>
</html>


smtp_server.py:
import asyncio
from aiosmtpd.controller import Controller
from email.message import EmailMessage

class CustomSMTPHandler:
    async def handle_DATA(self, server, session, envelope):
        print(f"Message from: {envelope.mail_from}")
        print(f"Message to: {envelope.rcpt_tos}")
        print("Message data:")
        print(envelope.content.decode('utf8', errors='replace'))
        return '250 OK'

controller = Controller(CustomSMTPHandler(), hostname='localhost', port=1025)

controller.start()

print("SMTP server started successfully on localhost:1025")

try:
    loop = asyncio.get_running_loop()
except RuntimeError:
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

try:
    loop.run_forever()
except KeyboardInterrupt:
    pass
finally:
    controller.stop()


webhook.py:
import json
import stripe

from django.conf import settings
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.core.mail import send_mail
from django.template.loader import render_to_string

from apps.order.models import Order, PaymentTracking 
from apps.store.models import Product


@csrf_exempt
def webhook(request):
    payload = request.body
    event = None

    stripe.api_key = settings.STRIPE_API_KEYS_HIDDEN

    try:
        event = stripe.Event.construct_from(json.loads(payload), stripe.api_key)
    except ValueError as e:
        return HttpResponse(status=400)

    if event['type'] == 'checkout.session.completed':
        session_id = event['data']['object']['id']
        print(f"Session id: {session_id}")

        try:
            tracking = PaymentTracking.objects.get(session_id=session_id)
            order_id = tracking.order_id

            order = Order.objects.get(id=order_id)
            order.paid = True
            order.payment_intent = event['data']['object']['payment_intent']  
            order.save()

            for item in order.items.all():
                product = item.product
                product.number_available -= item.quantity
                product.save()

            print("Order updated successfully with Payment Intent: ", order.payment_intent)

            html = render_to_string('order_confirmation.html', {'order': order})
            send_mail('Order confirmation', 'Your order has been sent!', 'noreply@siklomnl.com', ['mail@siklomnl.com', order.email], fail_silently=False, html_message=html)
            print('Email sent.')
           

        except PaymentTracking.DoesNotExist:
            print("No tracking found for session ID.")
            return HttpResponse(status=404)
        except Order.DoesNotExist:
            print(f"Order not found for order ID: {order_id}")
            return HttpResponse(status=404)

    return HttpResponse(status=200)


order_sent.html:
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF=8">
        <meta name="viewport" content="widtg=device-width, initial-scale=1.0">

        <title>Name of store</title>
        <style type="text/css">
            html {
                width: 100%;
                -webkit-text-size-adjust: 100;
                -webkit-background-size: 100%;

            }

            body {
                width: 100%;
                font-family: arial;
                font-size: 14px;
                background-color: #fff;
                color: #333;
            }

            a  {
                color: 111;
            }
        </style>
    </head>

    <body>
        <table width="100%" cellspacing="0" cellpadding="0">
            <tr>
                <td>
                    <center>
                        <h1> Bike - Order Sent </h1>
                    </center>
                </td>
            </tr>

            <tr>
                <td>
                    <p>Nice! Your order is sent.</p>
                </td>
            </tr>

            <tr>
                <td>
                    {% for item in order.items.all %}
                        <p><strong>{{ item.product.title }}</strong> - Quantity: {{ item.quantity }} - Price P{{ item.product.price }}</p>
                    {% endfor %}
                </td>
            </tr>
        </table>
    </body>
</html>


order/admin.py:
import datetime

from django.urls import reverse
from django.contrib import admin
from django.core.mail import send_mail
from django.template.loader import render_to_string

from .models import Order, OrderItem, PaymentTracking

# Register your models here.

def order_name(obj): # Combining first name and last name
    return '%s %s' % (obj.first_name, obj.last_name)

order_name.short_description = 'Name'

def admin_order_shipped(ModelAdmin, request, queryset):
    for order in queryset:
        order.shipped_date = datetime.datetime.now()
        order.shipped_status = Order.SHIPPED
        order.save()

        html = render_to_string('order_sent.html', {'order': order})
        send_mail('Order sent', 'Your order is successful!', 'noreply@siklomnl.com', ['mail@siklomnl.com', order.email], fail_silently=False, html_message=html)
    return

admin_order_shipped.short_description = 'Set shipped'

class OrderItemInLine(admin.TabularInline): # To show the ordered items.
    model = OrderItem
    raw_id_fields = ['product']


class OrderAdmin(admin.ModelAdmin):
    list_display = ['id', order_name, 'shipped_status' ,'order_created_at'] # Displaying the essential order details
    list_filter = ['order_created_at', 'shipped_status'] # Will show an interface sorting the order based on its order date and shipping status
    search_fields = ['first_name', 'last_name', 'address', 'contact_number'] # Search the order details based on the list
    inlines = [OrderItemInLine] # To show the OrderItemInLine
    actions = [admin_order_shipped]

admin.site.register(Order, OrderAdmin)
admin.site.register(OrderItem)
admin.site.register(PaymentTracking)


O. User accounts.
userprofile/apps.py:
from django.apps import AppConfig


class UserprofileConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'apps.userprofile'


forms.py:
from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User

class SignUpForm(UserCreationForm):
    first_name = forms.CharField(max_length=50, required=True)
    last_name = forms.CharField(max_length=50, required=True)
    email = forms.EmailField(max_length=255, required=True)

    class Meta:
        model = User
        fields = ['username', 'first_name', 'last_name', 'email', 'password1', 'password2']


userprofile/views.py:
from django.shortcuts import render, redirect
from django.contrib.auth import login
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json

from .forms import SignUpForm
# Create your views here.

def signup(request):
    form = SignUpForm()

    if request.method == 'POST':
        form = SignUpForm(request.POST)

        if form.is_valid():
            user = form.save()

            login(request, user)

            return redirect('frontpage')
        
        else:
            form = SignUpForm()

    return render(request, 'signup.html', {'form': form})

@login_required
def myaccount(request):
    return render(request, 'myaccount.html')

@login_required
@csrf_exempt 
def update_user_info(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        user = request.user

        user.first_name = data['first_name']
        user.last_name = data['last_name']
        user.email = data['email']
        
        if data['password']:
            user.set_password(data['password'])  
        
        user.save()
        return JsonResponse({'status': 'success'})
    
    
    return JsonResponse({'status': 'failed'}, status=400)


signup.html:
{% extends 'base.html' %}

{% block content %}
    <h1 class="title">Sign Up</h1>

    <form method="post" action=".">
        {% csrf_token %}

        {{ form.as_p }}

        <div class="field">
            <div class="control">
                <button class="button is-success">Sign Up</button>
            </div>
        </div>
    </form>
{% endblock %}


urls.py:
from django.contrib import admin
from django.urls import path
from django.conf import settings
from django.conf.urls.static import static
from django.contrib.sitemaps.views import sitemap
from django.contrib.auth import views

from apps.cart.webhook import webhook
from apps.cart.views import cart_detail, success
from apps.core.views import frontpage, contact, about # Importing the frontpage and contact
from apps.store.views import product_detail, main_category_detail, sub_category_detail, search # Importing the product_detail
from apps.userprofile.views import signup, myaccount, update_user_info

from apps.coupon.api import api_can_use
from apps.store.api import api_add_to_cart, api_remove_from_cart, api_checkout, create_checkout_session

from .sitemaps import StaticViewsSiteMap, MainCategorySitemap, SubCategorySitemap, ProductSitemap

sitemaps = {
    'static': StaticViewsSiteMap, 
    'main_category': MainCategorySitemap,
    'sub_category': SubCategorySitemap,
    'products': ProductSitemap
}

urlpatterns = [
    path('admin/', admin.site.urls),
    path('search/', search, name='search'),
    path('', frontpage, name='frontpage'), # Adding the frontpage for url
    path('cart/', cart_detail, name='cart'),
    path('hooks/', webhook, name='webhook'),
    path('cart/success/', success, name='success'),
    path('contact/', contact, name='contact'),
    path('about/', about, name='about'),

    # User Management
    path('myaccount/', myaccount, name='myaccount'),
    path('update_user_info/', update_user_info, name='update_user_info'),
    path('signup/', signup, name='signup'),
    path('login/', views.LoginView.as_view(template_name='login.html'), name='login'),
    path('logout/', views.LogoutView.as_view(), name='logout'),

    path('sitemap.xml', sitemap, {'sitemaps': sitemaps}, name='django.contrib.sitemaps.views.sitemap'),

    # For API used

    path('api/can_use/', api_can_use, name='api_can_use'),
    path('api/create_checkout_session/', create_checkout_session, name='create_checkout_session'),
    path('api/add_to_cart', api_add_to_cart, name='api_add_to_cart'),
    path('api/remove_from_cart', api_remove_from_cart, name='api_remove_from_cart'),
    path('api/checkout/', api_checkout, name='api_checkout'),

    # Store

    path('category/<slug:slug>/', main_category_detail, name='main_category_detail'),
    path('subcategory/<slug:slug>/', sub_category_detail, name='sub_category_detail'),
    path('<slug:slug>/', product_detail, name='product_detail'), # references the slug from the store/views.py
    
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


base.html:
{% load static %}
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>{% block title %} {% endblock %} Sample Website</title>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@1.0.2/css/bulma.min.css">
        <link rel="stylesheet" href="{% static 'main.css' %}">
    </head>
    <body>
        <nav class="navbar is-dark" id="navbarapp">
            <div class="navbar-brand">
                <a class="navbar-item" href="{% url 'frontpage' %}">Bikes</a>

                <a @click="toggleMenu()" role="button" class="navbar-burger burger" aria-label="menu" aria-expanded="false" data-target="main-navbar">
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                </a>
            </div>

            <div id="main-navbar" class="navbar-menu" :class ="{ 'is-active': menuClass }">
                <div class="navbar-start">
                    <div class="navbar-item">
                        <form method="get" action="{% url 'search' %}">
                            <div class="field has-addons">
                                <div class="control">
                                    <input type="text" class="input" placeholder="Search..." name="query">
                                </div>
                                <div class="control">
                                    <button class="button is-success">Search</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
                <div class="navbar-end">
                    {% for category in menu_main_categories %}
                        <a href="{% url 'main_category_detail' category.slug %}" class="navbar-item">{{ category.title }}</a>
                    {% endfor %}

                        <div class="navbar-item">
                            <div >
                                <a href="{% url 'cart' %}" class="button is-primary">Cart ([[ numItems ]])</a>
                            </div>
                        </div>

                        {% if request.user.is_authenticated %}
                            <div class="navbar-item">
                                <form method="post" action="{% url 'myaccount' %}">
                                    {% csrf_token %}
                                        <button type="submit" class="button is-light">My Account</button>
                                </form>
                            </div>
                        {% else %}
                            <div class="navbar-item">
                                <div class="buttons">
                                    <a href="{% url 'signup' %}" class="button is-primary"><strong>Sign Up</strong></a>
                                    <a href="{% url 'login' %}" class="button is-light">Log In</a>
                                </div>
                            </div>
                        {% endif %}

                    </div>
                </div>
            </div>
        </nav>
        <section class="section">
            {% block content %}
            {% endblock %}
        </section>
        <footer class="footer">
            <div class="columns">
                <div class="column is-4">
                    <h2 class="subtitle">Bicycles</h2>
                </div>
                <div class="column is-8">
                    <a href="{% url 'contact' %}" class="navbar-item">Contact</a>
                    <a href="{% url 'about' %}" class="navbar-item">About</a>
                </div>
            </div>
        </footer>
        <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
        <script src="https://unpkg.com/vuex@4.1.0/dist/vuex.global.js"></script>
    
        <script>
            var store = new Vuex.Store({
                state: {
                    numItems: {{ cart.get_total_length }},
                    totalCost: {{ cart.get_total_cost }}
                },
                mutations: {
                    increment(state, quantity) {
                        state.numItems += quantity;
                    },
                    changeTotalCost(state, newCost) {
                        state.totalCost += newCost
                    }
                }
            });

            var navbarapp = new Vue({
                el: '#navbarapp',
                delimiters: ['[[', ']]'],
                store: store,
                data () {
                    return {
                        menuClass: false
                    }
                },
                computed: {
                    numItems: function() {
                        return store.state.numItems
                    }
                },
                methods: {
                    toggleMenu() {
                        console.log('toggle');

                        this.menuClass = !this.menuClass;
                    }
                }
            });
        </script>
    {% block scripts %}
    {% endblock %}
    </body>
</html>


login.html:
{% extends 'base.html' %}

{% block content %}
    <h1 class="title">Log in</h1>

    <form method="post" action=".">
        {% csrf_token %}

        {{ form.as_p }}

        <div class="field">
            <div class="control">
                <button class="button is-success">Log in</button>
            </div>
        </div>
    </form>
{% endblock %}


cart.html:
{% extends 'base.html' %}

{% block title %} Cart | {% endblock %}

{% block content %}
    <div id="cartapp">
        <h1 class="title">Cart</h1>
        {% if cart %}
            <div v-if="products.length > 0">
                <div class="table">
                    <table class="table">
                        <thead>
                            <th></th>
                            <th>Product</th>
                            <th>Quantity</th>
                            <th>Price</th>
                            <th></th>
                        </thead>

                        <tbody>
                            <tr v-for="product in products">
                                <td>
                                    <figure class="image is-48x48">
                                        <img :src="product.product_thumbnail">
                                    </figure>
                                </td>
                                <td>
                                    <a :href="product.url">
                                        [[ product.title ]]
                                    </a>
                                </td>
                                <td><button @click="decrementQuantity(product.id, product.quantity, product.price)">-</button> [[ product.quantity ]] <button @click="incrementQuantity(product.id, product.quantity, product.price)">+</button></td>
                                <td>[[ product.total_price ]]</td>
                                <td><button @click="removeFromCart(product.id)">Remove from cart</button></td>
                            </tr>
                        </tbody>

                        <tfoot>
                            <tr>
                                <td>Total Cost:</td>
                                <td>[[ numItems ]]</td>
                                <td></td>
                                <td>[[ totalCost ]]</td>
                            </tr>

                            <tr v-if="coupon_value">
                                <td colspan = "3">Total Cost with Coupon:</td>
                                <td>[[ totalCostWithCoupon ]]</td>
                            </tr>
                        </tfoot>
                    </table>


                    <hr>
                    
                    <input type="hidden" v-model="coupon_value"><br>

                    Coupon Code:<br>
                    <input type="text" v-model="coupon_code"><br>

                    <button @click="applyCoupon()">Apply</button>
                    <hr>
                {% if not request.user.is_authenticated %}
                    <p>Continue as guest or <a href="{% url 'login' %}">Log In</a> / <a href="{% url 'signup' %}">Sign Up</a></p>

                    <hr>
                {% endif %}

                </div>

                <form v-on:submit.prevent="buy()">

                    <div class="field">
                        <div class="control">
                            <label>First Name</label>
                            <input type="text" name="first_name" v-model="first_name">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Last Name</label>
                            <input type="text" name="last_name" v-model="last_name">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Email</label>
                            <input type="text" name="email" v-model="email">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Contact Number</label>
                            <input type="text" name="contact_number" v-model="contact_number">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Address</label>
                            <input type="text" name="address" v-model="address">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Zip Code</label>
                            <input type="text" name="zip_code" v-model="zip_code">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <label>Place</label>
                            <input type="text" name="place" v-model="place">
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <button class="button is-primary">Check Out</button>
                        </div>
                    </div>
                </form>
            </div>
            <p v-else>Your cart is empty!</p>
        {% else %}
            <p>Your cart is empty!</p>
        {% endif %}

        <div v-if="errors.length > 0">
            <article class="message is-danger"
                v-for="error in errors">
                <div class="message-header">
                    <p>Error</p>
                    <button class="delete" aria-label="delete"></button>
                </div>

                <div class="message-body">
                    [[ error ]]
                </div>

              </article>
        </div>
    </div>
{% endblock %}

{% block scripts %}
<script type="application/javascript" src="https://js.stripe.com/v3/"></script>
<script>
    var productapp = new Vue({
        el: '#cartapp',
        delimiters: ['[[', ']]'],
        store: store,
        data() {
            return {
                errors: [],
                first_name: '{{ first_name }}',
                last_name: '{{ last_name }}',
                email: '{{ email }}',
                contact_number: '',
                address: '',
                zip_code: '',
                place: '',
                products: [{{ productsstring|safe }}],
                coupon_value: 0,
                coupon_code: ''
            };
        },
        computed: {
            numItems: function() {
                return store.state.numItems
            },
            totalCost: function () {
                return store.state.totalCost
            },
            totalCostWithCoupon: function () {
                if (this.coupon_value > 0) {
                    return store.state.totalCost * (parseInt(this.coupon_value) / 100);
                } else {
                    return store.state.totalCost;
                }
            }
        },
        mounted () {
            console.log('Vue instance mounted for cart');
        },
        methods: {
            applyCoupon() {
                if (this.coupon_code !== '') {
                    fetch('/api/can_use/?coupon_code_get=' + this.coupon_code, {
                        method: 'GET'
                    })
                    .then((response) => {
                        return response.json();
                        console.log('Returned');
                    })
                    .then((data) => {
                        if (data.amount) {
                            this.coupon_value = parseInt(data.amount)
                        } else {
                            this.coupon_value = 0
                        }
                    })
                }
            },
            buy(){
                var data = {
                    'first_name': this.first_name,
                    'last_name': this.last_name,
                    'email': this.email,
                    'contact_number': this.contact_number,
                    'address': this.address,
                    'zip_code': this.zip_code,
                    'place': this.place,
                    'coupon_code': this.coupon_code
                };

                this.errors = [];

                if (data.first_name === '') {
                    this.errors.push('First name is empty');
                }

                if (data.last_name === '') {
                    this.errors.push('Last name is empty');
                }

                if (data.email === '') {
                    this.errors.push('Email is empty');
                }

                if (data.contact_number === '') {
                    this.errors.push('Contact Number is empty');
                }

                if (data.address === '') {
                    this.errors.push('Address is empty');
                }

                if (data.zip_code === '') {
                    this.errors.push('Zip Code is empty');
                }

                if (data.place === '') {
                    this.errors.push('Place is empty');
                }

                if (this.errors.length === 0) {
                    var stripe = Stripe('{{ pub_key }}');

                    fetch('/api/create_checkout_session/', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRFToken': '{{ csrf_token }}'
                        },
                        credentials: 'same-origin',
                        body: JSON.stringify(data)
                    })
                    .then(function(response) {
                        if (!response.ok) {
                            throw new Error('Network response was not ok ' + response.statusText);
                        }
                        return response.json();
                    })
                    .then(function(session) {
                        return stripe.redirectToCheckout({ sessionId: session.session.id });
                    })
                    .catch(function(error) {
                        console.error('Error:', error);
                        alert('There was an issue with the checkout process.');
                    });
                }  
            },
            incrementQuantity(product_id, quantity, price) {
                console.log('Product_id:', product_id);

                for (var i = 0; i < this.products.length; i++) {
                    var product = this.products[i];

                    if (product.id === product_id) {
                        if (quantity < product.number_available) {
                            var data = {
                                'product_id': product_id,
                                'update': true,
                                'quantity': parseInt(quantity) + 1
                            };
                            console.log(price);
                            store.commit('increment', 1);
                            store.commit('changeTotalCost', parseFloat(price));
                            fetch('/api/add_to_cart', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-CSRFToken': '{{ csrf_token }}'
                                },
                                credentials: 'same-origin',
                                body: JSON.stringify(data)
                            })
                            .then((response) => {
                                console.log(response);
                                for (var i = 0; i < this.products.length; i++) {
                                    var product = this.products[i];
                                    if (product.id === product_id) {
                                        this.products[i].quantity = parseInt(this.products[i].quantity) + 1;
                                        this.products[i].total_price = parseInt(this.products[i].quantity) * parseFloat(this.products[i].price);
                                    }
                                }
                            })
                            .catch(function (error) {
                                console.log('Error:', error);
                            });
                        } else {
                        alert('No more available in stock');
                    }
                    } 
                }  
            },
            decrementQuantity(product_id, quantity, price) {
                console.log('Product_id:', product_id);
                var data = {
                    'product_id': product_id,
                    'update': true,
                    'quantity': parseInt(quantity) - 1
                };

                if (parseInt(quantity) - 1 === 0) {
                    this.removeFromCart(product_id);
                } else {
                    store.commit('increment', -1);
                    store.commit('changeTotalCost', -parseFloat(price));

                    fetch('/api/add_to_cart', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRFToken': '{{ csrf_token }}'
                        },
                        credentials: 'same-origin',
                        body: JSON.stringify(data)
                    })
                    .then((response) => {
                        console.log(response);
                        for (var i = 0; i < this.products.length; i++) {
                            var product = this.products[i];
                            if (product.id === product_id) {
                                this.products[i].quantity = parseInt(this.products[i].quantity) - 1;
                                this.products[i].total_price = parseInt(this.products[i].quantity) * parseFloat(this.products[i].price);
                            }
                        }
                    })
                    .catch(function (error) {
                        console.log('Error:', error);
                    });
                }
            },
            removeFromCart(product_id) {
                console.log('Remove Product_id:', product_id);
                var data = {
                    'product_id': product_id
                };
                fetch('/api/remove_from_cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)
                })
                .then((response) => {
                    console.log(response);
                    this.products = this.products.filter(product => product.id !== product_id);
                })
                .catch(function (error) {
                    console.log('Error:', error);
                });
            }
        }
    });
</script>
{% endblock %}


cart.views.py:
from django.conf import settings
from django.shortcuts import render, redirect

from .cart import Cart

# Create your views here.
def cart_detail(request):
    cart = Cart(request)
    productsstring = ''

    print(f'Cart items: {list(cart)}')  # just to debug >o<

    for item in cart: # Getting the data from the database
        product = item['product']
        url = '/%s/' % product.slug
        b = "{'id': '%s', 'title': '%s', 'price': '%s', 'quantity': '%s', 'total_price': '%s', 'product_thumbnail': '%s', 'url': '%s', 'number_available': '%s'}," % (
            product.id, product.title, product.price, item['quantity'], item['total_price'], product.product_thumbnail.url, url, product.number_available)

        productsstring += b

    if request.user.is_authenticated:
        first_name = request.user.first_name
        last_name = request.user.last_name
        email = request.user.email

    else:
        first_name = last_name = email = ''

    print(f'Products string: {productsstring}')  # debugging haha

    context = {
        'cart': cart,
        'frist_name': first_name,
        'last_name': last_name,
        'email': email,
        'pub_key': settings.STRIPE_API_KEYS_PUBLISHABLE,
        'productsstring': productsstring
    }

    return render(request, 'cart.html', context)

def success(request):
    cart = Cart(request)
    cart.clear()

    return render(request, 'success.html')


order.models.py:
from django.db import models
from django.contrib.auth.models import User

from apps.store.models import Product

# Create your models here.
class Order(models.Model):
    ORDERED = 'ordered'
    SHIPPED = 'shipped'
    ARRIVED = 'arrived'

    STATUS_CHOICES = (
        (ORDERED, 'Ordered'),
        (SHIPPED, 'Shipped'),
        (ARRIVED, 'Arrived')
    )

    user = models.ForeignKey(User, related_name='orders', on_delete=models.SET_NULL, blank=True, null=True)

    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    email = models.CharField(max_length=100)
    address = models.CharField(max_length=300)
    zip_code = models.CharField(max_length=100)
    place = models.CharField(max_length=100)
    contact_number = models.CharField(max_length=100, default='00000000000')

    order_created_at = models.DateTimeField(auto_now_add=True)

    paid = models.BooleanField(default=False)
    paid_amount = models.FloatField(blank=True, null=True)
    used_coupon = models.CharField(max_length = 50, blank = True, null = True)

    payment_intent = models.CharField(max_length=300, blank=True, null=True)  

    shipped_date = models.DateTimeField(blank=True, null=True)
    shipped_status = models.CharField(max_length = 20, choices = STATUS_CHOICES, default = ORDERED)


    def __str__(self):
        return '%s' % self.first_name
    
    def get_total_quantity(self):
        return sum(int(item.quantity) for item in self.items.all())

    
class OrderItem(models.Model):
    order = models.ForeignKey(Order, related_name='items', on_delete=models.CASCADE)
    product = models.ForeignKey(Product, related_name='items', on_delete=models.DO_NOTHING)
    price = models.FloatField()
    quantity = models.IntegerField(default=1)

    def __str__ (self):
        return '%s' % self.id
    
class PaymentTracking(models.Model):
    session_id = models.CharField(max_length=255, unique=True)
    order_id = models.PositiveIntegerField()


utils.py:
import datetime
import os

from random import randint

from apps.cart.cart import Cart

from apps.order.models import Order, OrderItem

def checkout(request, first_name, last_name, email, contact_number, address, zip_code, place):
    order = Order(first_name = first_name, last_name = last_name, email = email, contact_number = contact_number, address = address, zip_code = zip_code, place = place) # references to the models.py
    
    if request.user.is_authenticated:
        order.user = request.user

    order.save() # Saving it in the database

    cart = Cart(request)

    for item in cart:
        OrderItem.objects.create(order = order, product = item['product'], price = item ['price'], quantity = item['quantity'])

    print(item) # >o<
    return order.id


myaccount.html:
{% extends 'base.html' %}

{% block content %}
    <h1 class="title">My Account</h1>

    <form method="post" action="{% url 'logout' %}">
        {% csrf_token %}
        <button type="submit" class="button is-danger">Log Out</button>
    </form>

    <hr>

    <h2 class="subtitle">Account Information</h2>

    <div id="account-info">
        <div v-if="!isEditing">
            <p><strong>Name: </strong>{{ user.first_name }} {{ user.last_name }}</p>
            <p><strong>Email: </strong>{{ user.email }}</p>
            <button class="button is-light" @click="editInfo">Edit</button>
        </div>

        <div v-else>
            <form @submit.prevent="updateInfo">
                <div class="field">
                    <label class="label">First Name</label>
                    <div class="control">
                        <input class="input" type="text" v-model="user.first_name">
                    </div>
                </div>
                <div class="field">
                    <label class="label">Last Name</label>
                    <div class="control">
                        <input class="input" type="text" v-model="user.last_name">
                    </div>
                </div>
                <div class="field">
                    <label class="label">Username</label>
                    <div class="control">
                        <input class="input" type="text" v-model="user.username">
                    </div>
                </div>
                <div class="field">
                    <label class="label">Email</label>
                    <div class="control">
                        <input class="input" type="email" v-model="user.email">
                    </div>
                </div>
                <div class="field">
                    <label class="label">Password</label>
                    <div class="control">
                        <input class="input" type="password" v-model="user.password">
                    </div>
                </div>
                <button type="submit" class="button is-success">Done</button>
                <button type="button" class="button is-light" @click="cancelEdit">Cancel</button>
            </form>
        </div>
    </div>

    <hr>

    <h2 class="subtitle">My Orders</h2>

    {% for order in request.user.orders.all %}
        <article class="message is-light">
            <div class="message-header">
                <p>{{ order.order_created_at}}</p>
                <p><strong>Status: </strong>{{ order.shipped_status }}</p>
            </div>

            <div class="message-body">
                <table class="table is-striped is-fullwidth">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Quantity</th>
                            <th>Price</th>
                        </tr>
                    </thead>

                    <tbody>
                        {% for item in order.items.all %}
                        <tr>
                            <td>{{ item.product.title }}</td>
                            <td>{{ item.quantity }}</td>
                            <td>{{ item.price }}</td>
                        </tr>
                        {% endfor %}
                    </tbody>

                    <tfoot>
                        <tr>
                            <td>Total</td>
                            <td>{{ order.get_total_quantity }}</td>
                            <td>{{ order.paid_amount }}</td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </article>
    {% empty %}
        <p>You don't have any orders yet.</p>
    {% endfor %}
{% endblock %}

{% block scripts %}
<script>
    new Vue({
        el: '#account-info',
        data: {
            isEditing: false,
            user: {
                first_name: "{{ request.user.first_name }}",
                last_name: "{{ request.user.last_name }}",
                username: "{{ request.user.username }}",
                email: "{{ request.user.email }}",
                password: '' 
            }
        },
        methods: {
            editInfo() {
                this.isEditing = true;
            },
            cancelEdit() {
                this.isEditing = false;
            },
            async updateInfo() {
                const response = await fetch('{% url "update_user_info" %}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    body: JSON.stringify({
                        first_name: this.user.first_name,
                        last_name: this.user.last_name,
                        username: this.user.username,
                        email: this.user.email,
                        password: this.user.password
                    })
                });

                if (response.ok) {
                    this.isEditing = false; 
                } else {
                    console.error("Failed to update user info");
                }
            }
        }
    });
</script>
{% endblock %}


 
 P. Product variants and some fixes.
 store/models.py:
 from io import BytesIO
from django.core.files import File
from django.db import models
from PIL import Image

# Create your models here.
# Database model
class MainCategory(models.Model):
    title = models.CharField(max_length = 255) # Character field for the database
    slug = models.SlugField(max_length = 255) # a description containing only letters, hyphens, numbers or underscores
    main_ordering = models.IntegerField(default=0)


    class Meta:
        verbose_name_plural = 'Main Categories' # Correcting the plural of the cataegory correct instead of categorys.
        ordering = ('main_ordering',)

    def __str__(self): # To see the title character in admin
        return self.title
    
    def get_absolute_url(self):
        return '/%s/' % (self.slug)


class SubCategory(models.Model):
    main_category = models.ForeignKey(MainCategory, related_name='sub_categories', on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    slug = models.SlugField(max_length=255)
    sub_ordering = models.IntegerField(default=0)

    sub_category_image = models.ImageField(upload_to='uploads/', blank=True, null=True)
    sub_category_thumbnail = models.ImageField(upload_to='uploads/', blank=True, null=True)

    class Meta:
        verbose_name_plural = 'Sub Categories'
        ordering = ('sub_ordering',)

    def __str__(self):
        return self.title
    
    def save_sub_category_image(self, *args, **kwargs):
        self.sub_category_thumbnail = self.make_sub_category_thumbnail(self.sub_category_image)

        super().save(*args, **kwargs)

    def get_absolute_url(self):
        return '/%s/%s' % (self.main_category.slug, self.slug)
    
    def make_sub_category_thumbnail(self, image, size=(300, 200)):
        sub_category_img = Image.open(image)
        sub_category_img.convert('RGB')
        sub_category_img.thumbnail(size)

        sub_category_thumb_io = BytesIO()
        sub_category_img.save(sub_category_thumb_io, 'JPEG', quality=85)

        from os.path import basename
        sub_category_thumbnail = File(sub_category_thumb_io, name=basename(image.name))

        return sub_category_thumbnail
  
  
class Product(models.Model): # Adding the product in the database
    sub_category = models.ForeignKey(SubCategory, related_name='products', on_delete=models.CASCADE)
    parent = models.ForeignKey('self', related_name='variants', on_delete=models.CASCADE, blank=True, null=True)
    title = models.CharField(max_length=255)
    slug = models.SlugField(max_length=255)
    description = models.TextField(blank=True, null=True)
    price = models.FloatField()
    is_featured = models.BooleanField(default=False)
    number_available = models.IntegerField(default=1)

    product_image = models.ImageField(upload_to='uploads/', blank=True, null=True)
    product_thumbnail = models.ImageField(upload_to='uploads/', blank=True, null=True)

    date_added = models.DateTimeField(auto_now_add=True)


    class Meta:
        ordering = ('-date_added',) # Newest one comes first. You can remove the "-" if you want the oldest one to come first.

    def __str__(self):
        return self.title
    
    def save(self, *args, **kwargs):
        self.product_thumbnail = self.make_product_thumbnail(self.product_image)

        super().save(*args, **kwargs)

    def get_absolute_url(self):
        return '/%s/%s' % (self.sub_category.slug, self.slug)
    
    def make_product_thumbnail(self, image, size=(300, 200)):
        product_img = Image.open(image)
        product_img.convert('RGB')
        product_img.thumbnail(size)

        product_thumb_io = BytesIO()
        product_img.save(product_thumb_io, 'JPEG', quality=85)

        from os.path import basename
        product_thumbnail = File(product_thumb_io, name=basename(image.name))

        return product_thumbnail
    

class ProductImage(models.Model):
    product = models.ForeignKey(Product, related_name='images_product', on_delete=models.CASCADE)

    product_image = models.ImageField(upload_to='uploads/', blank=True, null=True)
    product_thumbnail = models.ImageField(upload_to='uploads/', blank=True, null=True)

    def make_product_thumbnail(self, image, size=(300, 200)):
        product_img = Image.open(image)
        product_img.convert('RGB')
        product_img.thumbnail(size)

        product_thumb_io = BytesIO()
        product_img.save(product_thumb_io, 'JPEG', quality=85)

        from os.path import basename
        product_thumbnail = File(product_thumb_io, name=basename(image.name))

        return product_thumbnail

    def save(self, *args, **kwargs):
        self.product_thumbnail = self.make_product_thumbnail(self.product_image)

        super().save(*args, **kwargs)


store/views.py:
from django.shortcuts import render, get_object_or_404, redirect
from django.db.models import Q

from apps.cart.cart import Cart

from .models import Product, MainCategory, SubCategory

# Create your views here.
def product_detail(request, category_slug, slug):
    product = get_object_or_404(Product, slug=slug) # To call the product database

    if product.parent:
        return redirect('product_detail', category_slug=category_slug, slug=product.parent.slug)
 
    product_imagesstring = "{'product_thumbnail': '%s', 'product_image': '%s'}," % (product.product_thumbnail.url, product.product_image.url)

    for image in product.images_product.all(): # 'image_product' is the related_name of ProductImaage model. You may refer on store/modesl.py
        product_imagesstring += ("{'product_thumbnail': '%s', 'product_image': '%s'}," % (image.product_thumbnail.url, image.product_image.url))

    cart = Cart(request)

    if cart.has_product(product.id):
        product.in_cart = True
    else:
        product.in_cart = False

    context = {
        'product': product,
        'product_imagesstring': product_imagesstring
    }

    return render(request, 'product_detail.html', context)

def main_category_detail(request, slug):
    category = get_object_or_404(MainCategory, slug=slug)
    subcategories = SubCategory.objects.filter(main_category=category)

    
    context = {
        'category': category,
        'menu_sub_categories': subcategories  # Pass only filtered subcategories
    }

    return render(request, 'main_category_detail.html', context)


def sub_category_detail(request, slug):
    sub_category = get_object_or_404(SubCategory, slug=slug)  # Get the subcategory based on the slug
    products = Product.objects.filter(parent=None)  # Get products related to the subcategory

    context = {
        'sub_category': sub_category,
        'products': products  # Pass the products to the template
    }

    return render(request, 'sub_category_detail.html', context)

def search(request):
    query = request.GET.get('query')
    products = Product.objects.filter(Q(title__icontains = query) | Q(description__icontains = query))

    context = {
        'query': query,
        'products': products
    }

    return render(request, 'search.html', context)


product_detail.html:
{% extends 'base.html' %}

{% block title %} {{ product.title }} | {% endblock %}

{% block content %}
    <div id="productapp">
        <img :src ="mainImage">
        {% if product.product_image.all %}
            <hr>
            <div class="columns">
                <div class="column is-2" v-for="image in images">
                    <figure class="image is-100x100">
                        <img :src="image.product_thumbnail" @click="changeMainImage(image.product_image)">
                    </figure>
                </div>
            </div>
        {% endif %}
        <hr>
        <h1 class="title">{{ product.title }}</h1>
        <h2 class="subtitle">P{{ product.price }}</h2>

        {% if product.description %}
            <p>{{ product.description }}</p>
        {% endif %}

        <h2 class="subtitle">Add to cart</h2>

        {% if product.variants.all %}
            <div class="columns">
                <div class="column is-6">
                    <div class="table-container"> 
                        <table class="table is-fullwidth">
                            <tbody>
                                <tr>
                                    <td>
                                        <figure class="image is-48x48">
                                            {% if product.product_thumbnail.url %}
                                                <img src="{{ product.product_thumbnail.url }}">
                                            {% endif %}
                                        </figure>
                                    </td>
                                    <td>
                                        {{ product.title }}
                                    </td>
                                    <td>
                                        {% if product.in_cart %}
                                            <p>Already in cart! </p>
                                        {% else %}
                                            {% if product.number_available > 0 %}
                                                <button @click="addToCart('{{ product.id }}')" class="button is-success">Add to Cart</button>
                                            {% else %}
                                                <p>The product is out of stock.</p>
                                            {% endif %}
                                        {% endif %}
                                    </td>
                                </tr>
                                {% for variant in product.variants.all %}
                                    <tr>
                                        <td>
                                            <figure class="image is-48x48">
                                                {% if variant.product_thumbnail.url %}
                                                    <img src="{{ variant.product_thumbnail.url }}">
                                                {% endif %}
                                            </figure>
                                        </td>
                                        <td>
                                            {{ variant.title }}
                                        </td>
                                        <td>
                                            {% if variant.in_cart %}
                                                <p>Already in cart! </p>
                                            {% else %}
                                                {% if variant.number_available > 0 %}
                                                    <button @click="addToCart('{{ variant.id }}')" class="button is-success">Add to Cart</button>
                                                {% else %}
                                                    <p>The product is out of stock.</p>
                                                {% endif %}
                                            {% endif %}
                                        </td>
                                    </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        {% else %}
            {% if product.in_cart %}
                <p>Already in cart! </p>
            {% else %}
                {% if product.number_available > 0 %}
                    <button @click="addToCart('{{ product.id }}')" class="button is-success">Add to Cart</button>
                {% else %}
                    <p>The product is out of stock.</p>
                {% endif %}
            {% endif %}
        {% endif %}


        <article class="message is-success" v-if="showMessage">
            <div class="message-body">
                The product was added to the cart!
            </div>
        </article>
    </div>
{% endblock %}

{% block scripts %}
<script>
    var productapp = new Vue({
        el: '#productapp',
        delimiters: ['[[', ']]'],
        data () {
            return {
                showMessage: false,
                mainImage: '{{ product.product_image.url }}',
                images : [{{ product_imagesstring|safe }}]
            }
        },
        mounted(){
            console.log('Vue instance mounted for cart');
        },
        methods: {
            changeMainImage (image) {
                this.mainImage = image;
            },
            addToCart(product_id) {
                console.log('Product_id:', product_id);

                var data = {
                    'product_id': product_id, 
                    'update': false,
                    'quantity': 1
                };

                fetch('/api/add_to_cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)  
                })
                .then((response) => {
                    console.log(response)

                    this.showMessage = true

                    store.commit('increment', 1);

                    setTimeout(() => {
                        this.showMessage = false
                    }, 2000)
                })
                .catch(function (error){
                    console.log('Error 2:');
                    console.log(error);
                })
            }
        }
    });
</script>
{% endblock %}


urls.py:
from django.contrib import admin
from django.urls import path
from django.conf import settings
from django.conf.urls.static import static
from django.contrib.sitemaps.views import sitemap
from django.contrib.auth import views

from apps.cart.webhook import webhook
from apps.cart.views import cart_detail, success
from apps.core.views import frontpage, contact, about 
from apps.store.views import product_detail, main_category_detail, sub_category_detail, search 
from apps.userprofile.views import signup, myaccount, update_user_info

from apps.coupon.api import api_can_use
from apps.store.api import api_add_to_cart, api_remove_from_cart, api_checkout, create_checkout_session

from .sitemaps import StaticViewsSiteMap, MainCategorySitemap, SubCategorySitemap, ProductSitemap

sitemaps = {
    'static': StaticViewsSiteMap, 
    'main_category': MainCategorySitemap,
    'sub_category': SubCategorySitemap,
    'products': ProductSitemap
}

urlpatterns = [
    path('admin/', admin.site.urls),
    path('search/', search, name='search'),
    path('', frontpage, name='frontpage'), 
    path('cart/', cart_detail, name='cart'),
    path('hooks/', webhook, name='webhook'),
    path('cart/success/', success, name='success'),
    path('contact/', contact, name='contact'),
    path('about/', about, name='about'),

    # User Management
    
    path('myaccount/', myaccount, name='myaccount'),
    path('update_user_info/', update_user_info, name='update_user_info'),
    path('signup/', signup, name='signup'),
    path('login/', views.LoginView.as_view(template_name='login.html'), name='login'),
    path('logout/', views.LogoutView.as_view(), name='logout'),

    path('sitemap.xml', sitemap, {'sitemaps': sitemaps}, name='django.contrib.sitemaps.views.sitemap'),

    # For API used

    path('api/can_use/', api_can_use, name='api_can_use'),
    path('api/create_checkout_session/', create_checkout_session, name='create_checkout_session'),
    path('api/add_to_cart', api_add_to_cart, name='api_add_to_cart'),
    path('api/remove_from_cart', api_remove_from_cart, name='api_remove_from_cart'),
    path('api/checkout/', api_checkout, name='api_checkout'),

    # Store

    path('category/<slug:slug>/', main_category_detail, name='main_category_detail'),
    path('subcategory/<slug:slug>/', sub_category_detail, name='sub_category_detail'),
    path('<slug:category_slug>/<slug:slug>/', product_detail, name='product_detail'), # references the slug from the store/views.py
    
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


sub_category.html:
{% extends 'base.html' %}

{% block title %} {{ sub_category.title }} | {% endblock %}

{% block content %}
    <h1 class="title">{{ sub_category.title }}</h1>
    <div class="columns is-multiline">
        {% for product in products %}
        <div class="column is-3">
            <div class="card">
                <div class="card-image">
                    <figure class="image">
                        <img src="{{ product.product_image.url }}" alt="{{ product.title }}">
                    </figure>
                </div>
                <div class="card-content">
                    <div class="media">
                        <div class="media-content">
                            <p class="title is-4">{{ product.title }}</p>
                            <p class="subtitle is-6">P{{ product.price }}</p>
                        </div>
                    </div>
                </div>
                <footer class="card-footer">
                    <a href="{% url 'product_detail' product.sub_category.slug product.slug %}" class="card-footer-item">View</a>
                </footer>
            </div>
        </div>
        {% endfor %}
    </div>
{% endblock %}


frontpage.html:
{% extends 'base.html' %} {# importing the base.html #}

{% block title %} Welcome | {% endblock %}

{% block content %}
    <div class="columns is-multiline">
        {% for product in products %} {# Using for loop to view products #}
        <div class="column is-3">
            <div class="card">
                <div class="card-image">
                    <figure class="image">
                        <img src="{{ product.product_image.url }}" alt="{{ product.title }}">
                    </figure>
                </div>
                <div class="card-content">
                    <div class="media">
                        <div class="media-content">
                            <p class="title is-4">{{ product.title }}</p>
                            <p class="subtitle is-6">P{{ product.price }}</p>
                        </div>
                    </div>
                </div>

                <footer class="card-footer">
                    <a href="{% url 'product_detail' product.sub_category.slug product.slug %}" class="card-footer-item">View</a>
                </footer>
            </div>
        </div>
        {% endfor %}
    </div>
{% endblock %}


search.html:
{% extends 'base.html' %}

{% block title %}Search | {% endblock %}

{% block content %}
    <h1 class="title">Search</h1>
    <h2 class="subtitle">Search term: "{{ query }}"</h2>

    <div class="columns is-multiline">
        {% for product in products %}
        <div class="column is-3">
            <div class="card">
                <div class="card-image">
                    <figure class="image">
                        <img src="{{ product.product_image.url }}" alt="{{ product.title }}">
                    </figure>
                </div>
                <div class="card-content">
                    <div class="media">
                        <div class="media-content">
                            <p class="title is-4">{{ product.title }}</p>
                            <p class="subtitle is-6">P{{ product.price }}</p>
                        </div>
                    </div>
                </div>
                <footer class="card-footer">
                    <a href="{% url 'product_detail' product.sub_category.slug product.slug %}" class="card-footer-item">View</a>
                </footer>
            </div>
        </div>
        {% endfor %}
    </div>
{% endblock %}


cart/views.py:
from django.conf import settings
from django.shortcuts import render, redirect

from .cart import Cart

# Create your views here.
def cart_detail(request):
    cart = Cart(request)
    productsstring = ''

    print(f'Cart items: {list(cart)}')  # just to debug >o<

    for item in cart: # Getting the data from the database
        product = item['product']
        url = '/%s/%s' % (product.sub_category.slug, product.slug)
        b = "{'id': '%s', 'title': '%s', 'price': '%s', 'quantity': '%s', 'total_price': '%s', 'product_thumbnail': '%s', 'url': '%s', 'number_available': '%s'}," % (
            product.id, product.title, product.price, item['quantity'], item['total_price'], product.product_thumbnail.url, url, product.number_available)

        productsstring += b

    if request.user.is_authenticated:
        first_name = request.user.first_name
        last_name = request.user.last_name
        email = request.user.email

    else:
        first_name = last_name = email = ''

    print(f'Products string: {productsstring}')  # debugging haha

    context = {
        'cart': cart,
        'first_name': first_name,
        'last_name': last_name,
        'email': email,
        'pub_key': settings.STRIPE_API_KEYS_PUBLISHABLE,
        'productsstring': productsstring
    }

    return render(request, 'cart.html', context)

def success(request):
    cart = Cart(request)
    cart.clear()

    return render(request, 'success.html')


cart.html:
{% extends 'base.html' %}

{% block title %} Cart | {% endblock %}

{% block content %}
    <div id="cartapp">
        <h1 class="title">Cart</h1>
        {% if cart %}
            <div v-if="products.length > 0">
                <div class="table">
                    <table class="table is is-fullwidth is-striped">
                        <thead>
                            <th></th>
                            <th>Product</th>
                            <th>Quantity</th>
                            <th>Price</th>
                            <th></th>
                        </thead>

                        <tbody>
                            <tr v-for="product in products">
                                <td>
                                    <figure class="image is-48x48">
                                        <img :src="product.product_thumbnail">
                                    </figure>
                                </td>
                                <td>
                                    <a :href="product.url">
                                        [[ product.title ]]
                                    </a>
                                </td>
                                <td><button @click="decrementQuantity(product.id, product.quantity, product.price)">-</button> [[ product.quantity ]] <button @click="incrementQuantity(product.id, product.quantity, product.price)">+</button></td>
                                <td>[[ product.total_price ]]</td>
                                <td><button @click="removeFromCart(product.id)" class="button is-danger">Remove</button></td>
                            </tr>
                        </tbody>

                        <tfoot>
                            <tr>
                                <td>Total Cost:</td>
                                <td>[[ numItems ]]</td>
                                <td></td>
                                <td>[[ totalCost ]]</td>
                            </tr>

                            <tr v-if="coupon_value">
                                <td colspan = "3">Total Cost with Coupon:</td>
                                <td>[[ totalCostWithCoupon ]]</td>
                            </tr>
                        </tfoot>
                    </table>

                {% if not request.user.is_authenticated %}
                    <p>You need to login or signup to purchase! <a href="{% url 'login' %}">Log In</a> / <a href="{% url 'signup' %}">Sign Up</a></p>

                    <hr>
                {% else %}
                    <hr>
                    <input type="hidden" v-model="coupon_value">

                    <h2 class="subtitle">Coupon Code</subtitle>
                
                    <div class="field has-addons">
                        <div class="control">
                            <input type="text" v-model="coupon_code" class="input">
                        </div>

                        <div class="control">
                            <button @click="applyCoupon()" class="button is-success">Apply</button>
                        </div>
                    </div>
                    
                    <div class="notification is-warning" v-if="showCouponCodeError">
                        <p>The coupon code is not valid.</p>
                    </div>
                    
                    <hr>

                    <form v-on:submit.prevent="buy()">
                        <h2 class="title">Contact Information</h2>
    
                        <div class="columns">
                            <div class="column is-6">
                                <div class="field">
                                    <label>First Name</label>
                                    <div class="control">
                                        <input class="input" type="text" name="first_name" v-model="first_name">
                                    </div>
                                </div>
            
                                <div class="field">
                                    <label>Last Name</label>
                                    <div class="control">
                                        <input class="input" type="text" name="last_name" v-model="last_name">
                                    </div>
                                </div>
            
                                <div class="field">
                                    <label>Email</label>
                                    <div class="control">
                                        <input class="input" type="text" name="email" v-model="email">
                                    </div>
                                </div>
            
                            </div>
    
                            <div class="column is-6">
                                <div class="field">
                                    <label>Contact Number</label>
                                    <div class="control">
                                        <input class="input" type="text" name="contact_number" v-model="contact_number">
                                    </div>
                                </div>
    
                                <div class="field">
                                    <label>Address</label>
                                    <div class="control">
                                        <input class="input" type="text" name="address" v-model="address">
                                    </div>
                                </div>
            
                                <div class="field">
                                    <label>Zip Code</label>
                                    <div class="control">
                                        <input class="input" type="text" name="zip_code" v-model="zip_code">
                                    </div>
                                </div>
                            </div>
                        </div>
    
                        <div class="field">
                            <div class="control">
                                <button class="button is-primary">Check Out</button>
                            </div>
                        </div>
                    </form>

                {% endif %}

                </div>
            </div>
            <p v-else>Your cart is empty!</p>
        {% else %}
            <p>Your cart is empty!</p>
        {% endif %}

        <div v-if="errors.length > 0">
            <article class="message is-danger"
                v-for="error in errors">
                <div class="message-header">
                    <p>Error</p>
                    <button class="delete" aria-label="delete"></button>
                </div>

                <div class="message-body">
                    [[ error ]]
                </div>

              </article>
        </div>
    </div>
{% endblock %}

{% block scripts %}
<script type="application/javascript" src="https://js.stripe.com/v3/"></script>
<script>
    var productapp = new Vue({
        el: '#cartapp',
        delimiters: ['[[', ']]'],
        store: store,
        data() {
            return {
                errors: [],
                first_name: '{{ first_name }}',
                last_name: '{{ last_name }}',
                email: '{{ email }}',
                contact_number: '',
                address: '',
                zip_code: '',
                products: [{{ productsstring|safe }}],
                coupon_value: 0,
                coupon_code: '',
                showCouponCodeError: false
            };
        },
        computed: {
            numItems: function() {
                return store.state.numItems
            },
            totalCost: function () {
                return store.state.totalCost
            },
            totalCostWithCoupon: function () {
                if (this.coupon_value > 0) {
                    return store.state.totalCost * (parseInt(this.coupon_value) / 100);
                } else {
                    return store.state.totalCost;
                }
            }
        },
        mounted () {
            console.log('Vue instance mounted for cart');
        },
        methods: {
            applyCoupon() {
                if (this.coupon_code !== '') {
                    fetch('/api/can_use/?coupon_code_get=' + this.coupon_code, {
                        method: 'GET'
                    })
                    .then((response) => {
                        return response.json();
                        console.log('Returned');
                    })
                    .then((data) => {
                        if (data.amount) {
                            this,showCouponCodeError = false
                            this.coupon_value = parseInt(data.amount)
                        } else {
                            this.coupon_value = 0
                            this.showCouponCodeError = true
                        }
                    })
                } else {
                    this.showCouponCodeError = true
                }
            },
            buy(){
                var data = {
                    'first_name': this.first_name,
                    'last_name': this.last_name,
                    'email': this.email,
                    'contact_number': this.contact_number,
                    'address': this.address,
                    'zip_code': this.zip_code,
                    'coupon_code': this.coupon_code
                };

                this.errors = [];

                if (data.first_name === '') {
                    this.errors.push('First name is empty');
                }

                if (data.last_name === '') {
                    this.errors.push('Last name is empty');
                }

                if (data.email === '') {
                    this.errors.push('Email is empty');
                }

                if (data.contact_number === '') {
                    this.errors.push('Contact Number is empty');
                }

                if (data.address === '') {
                    this.errors.push('Address is empty');
                }

                if (data.zip_code === '') {
                    this.errors.push('Zip Code is empty');
                }

                if (this.errors.length === 0) {
                    var stripe = Stripe('{{ pub_key }}');

                    fetch('/api/create_checkout_session/', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRFToken': '{{ csrf_token }}'
                        },
                        credentials: 'same-origin',
                        body: JSON.stringify(data)
                    })
                    .then(function(response) {
                        if (!response.ok) {
                            throw new Error('Network response was not ok ' + response.statusText);
                        }
                        return response.json();
                    })
                    .then(function(session) {
                        return stripe.redirectToCheckout({ sessionId: session.session.id });
                    })
                    .catch(function(error) {
                        console.error('Error:', error);
                        alert('There was an issue with the checkout process.');
                    });
                }  
            },
            incrementQuantity(product_id, quantity, price) {
                console.log('Product_id:', product_id);

                for (var i = 0; i < this.products.length; i++) {
                    var product = this.products[i];

                    if (product.id === product_id) {
                        if (quantity < product.number_available) {
                            var data = {
                                'product_id': product_id,
                                'update': true,
                                'quantity': parseInt(quantity) + 1
                            };
                            console.log(price);
                            store.commit('increment', 1);
                            store.commit('changeTotalCost', parseFloat(price));
                            fetch('/api/add_to_cart', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-CSRFToken': '{{ csrf_token }}'
                                },
                                credentials: 'same-origin',
                                body: JSON.stringify(data)
                            })
                            .then((response) => {
                                console.log(response);
                                for (var i = 0; i < this.products.length; i++) {
                                    var product = this.products[i];
                                    if (product.id === product_id) {
                                        this.products[i].quantity = parseInt(this.products[i].quantity) + 1;
                                        this.products[i].total_price = parseInt(this.products[i].quantity) * parseFloat(this.products[i].price);
                                    }
                                }
                            })
                            .catch(function (error) {
                                console.log('Error:', error);
                            });
                        } else {
                        alert('No more available in stock');
                    }
                    } 
                }  
            },
            decrementQuantity(product_id, quantity, price) {
                console.log('Product_id:', product_id);
                var data = {
                    'product_id': product_id,
                    'update': true,
                    'quantity': parseInt(quantity) - 1
                };

                if (parseInt(quantity) - 1 === 0) {
                    this.removeFromCart(product_id);
                } else {
                    store.commit('increment', -1);
                    store.commit('changeTotalCost', -parseFloat(price));

                    fetch('/api/add_to_cart', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRFToken': '{{ csrf_token }}'
                        },
                        credentials: 'same-origin',
                        body: JSON.stringify(data)
                    })
                    .then((response) => {
                        console.log(response);
                        for (var i = 0; i < this.products.length; i++) {
                            var product = this.products[i];
                            if (product.id === product_id) {
                                this.products[i].quantity = parseInt(this.products[i].quantity) - 1;
                                this.products[i].total_price = parseInt(this.products[i].quantity) * parseFloat(this.products[i].price);
                            }
                        }
                    })
                    .catch(function (error) {
                        console.log('Error:', error);
                    });
                }
            },
            removeFromCart(product_id) {
                console.log('Remove Product_id:', product_id);
                var data = {
                    'product_id': product_id
                };
                fetch('/api/remove_from_cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)
                })
                .then((response) => {
                    console.log(response);
                    this.products = this.products.filter(product => product.id !== product_id);
                })
                .catch(function (error) {
                    console.log('Error:', error);
                });
            }
        }
    });
</script>
{% endblock %}


order/models.py:
from django.db import models
from django.contrib.auth.models import User

from apps.store.models import Product

# Create your models here.
class Order(models.Model):
    ORDERED = 'ordered'
    SHIPPED = 'shipped'
    ARRIVED = 'arrived'

    STATUS_CHOICES = (
        (ORDERED, 'Ordered'),
        (SHIPPED, 'Shipped'),
        (ARRIVED, 'Arrived')
    )

    user = models.ForeignKey(User, related_name='orders', on_delete=models.SET_NULL, blank=True, null=True)

    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    email = models.CharField(max_length=100)
    address = models.CharField(max_length=300)
    zip_code = models.CharField(max_length=100)
    contact_number = models.CharField(max_length=100, default='00000000000')

    order_created_at = models.DateTimeField(auto_now_add=True)

    paid = models.BooleanField(default=False)
    paid_amount = models.FloatField(blank=True, null=True)
    used_coupon = models.CharField(max_length = 50, blank = True, null = True)

    payment_intent = models.CharField(max_length=300, blank=True, null=True)  

    shipped_date = models.DateTimeField(blank=True, null=True)
    shipped_status = models.CharField(max_length = 20, choices = STATUS_CHOICES, default = ORDERED)


    def __str__(self):
        return '%s' % self.first_name
    
    def get_total_quantity(self):
        return sum(int(item.quantity) for item in self.items.all())

    
class OrderItem(models.Model):
    order = models.ForeignKey(Order, related_name='items', on_delete=models.CASCADE)
    product = models.ForeignKey(Product, related_name='items', on_delete=models.DO_NOTHING)
    price = models.FloatField()
    quantity = models.IntegerField(default=1)

    def __str__ (self):
        return '%s' % self.id
    
class PaymentTracking(models.Model):
    session_id = models.CharField(max_length=255, unique=True)
    order_id = models.PositiveIntegerField()


api.py:
import json
import stripe

from django.conf import settings
from django.http import JsonResponse
from django.shortcuts import get_object_or_404

from apps.cart.cart import Cart
from apps.order.utils import checkout
from .models import Product
from apps.order.models import Order, PaymentTracking
from apps.coupon.models import Coupon


def api_add_to_cart(request):
    data = json.loads(request.body)
    jsonresponse = {'success': True}
    product_id = data['product_id']
    update = data['update']
    quantity = data['quantity'] 

    cart = Cart(request)
    product = get_object_or_404(Product, pk=product_id)

    if not update:
        cart.add(product=product, quantity=1, update_quantity=False)
    else:
        cart.add(product=product, quantity=quantity, update_quantity=True)

    return JsonResponse(jsonresponse)


def api_remove_from_cart(request):
    data = json.loads(request.body)
    jsonresponse = {'success': True}
    product_id = str(data['product_id'])

    cart = Cart(request)
    cart.remove(product_id)

    return JsonResponse(jsonresponse)


def api_checkout(request):
    cart = Cart(request)
    data = json.loads(request.body)
    jsonresponse = {'success': True}
    first_name = data['first_name']
    last_name = data['last_name']
    email = data['email']
    contact_number = data['contact_number']
    address = data['address']
    zip_code = data['zip_code']

    order_id = checkout(request, first_name, last_name, email, contact_number, address, zip_code)
    paid = True

    print(f'Order Info: {order_id}')
    print(f'Total Cost: {cart.get_total_cost()}')

    if paid:
        order = Order.objects.get(pk=order_id)
        order.paid = True
        order.paid_amount = cart.get_total_cost()
        order.save()

        cart.clear()

    return JsonResponse(jsonresponse)


def create_checkout_session(request):
    data = json.loads(request.body)

    # Coupon handling
    coupon_code_get = data.get('coupon_code', '') 
    coupon_value = 0

    if coupon_code_get:
        coupon = Coupon.objects.get(coupon_code=coupon_code_get)
        if coupon.can_use():
            coupon_value = coupon.coupon_value
            coupon.use()

    cart = Cart(request)
    stripe.api_key = settings.STRIPE_API_KEYS_HIDDEN
    items = []

    for item in cart:
        product = item['product']
        price = int(product.price * 100) 

        if coupon_value > 0:
            price = int(price * (int(coupon_value) / 100))

        obj = {
            'price_data': {
                'currency': 'usd',
                'product_data': {
                    'name': product.title
                },
                'unit_amount': price
            },
            'quantity': item['quantity']
        }
        items.append(obj)

    session = stripe.checkout.Session.create(
        payment_method_types=['card'],
        line_items=items,
        mode='payment',
        success_url='http://127.0.0.1:8000/cart/success/',
        cancel_url='http://127.0.0.1:8000/cart/',
    )

    # Create order
    first_name = data['first_name']
    last_name = data['last_name']
    email = data['email']
    contact_number = data['contact_number']
    address = data['address']
    zip_code = data['zip_code']
    order_id = checkout(request, first_name, last_name, email, contact_number, address, zip_code)

    total_price = 0.00

    for item in cart:
        product = item['product']
        total_price = total_price + (float(product.price) * int(item['quantity']))

    if coupon_value > 0:
        total_price = total_price * (coupon_value / 100)

    try:
        order = Order.objects.get(pk=order_id)
        order.paid_amount = total_price
        order.payment_intent = 'Pending'
        order.used_coupon = coupon_code_get
        order.save()

        PaymentTracking.objects.create(session_id=session.id, order_id=order.id)
        print(f"Session ID: {session.id}")

        print(f"Order {order.id} saved with Payment Intent: {order.payment_intent}") # hahaha debugging ;-;
        print(f"Items sent to Stripe: {items}") # Pls pls pls

        return JsonResponse({'session': session})

    except Exception as e:
        print(f"Error creating order: {str(e)}")
        return JsonResponse({'error': 'Unable to create order'}, status=500)


utils.py:
import datetime
import os

from random import randint

from apps.cart.cart import Cart

from apps.order.models import Order, OrderItem

def checkout(request, first_name, last_name, email, contact_number, address, zip_code):
    order = Order(first_name = first_name, last_name = last_name, email = email, contact_number = contact_number, address = address, zip_code = zip_code) # references to the models.py
    
    if request.user.is_authenticated:
        order.user = request.user

    order.save() # Saving it in the database

    cart = Cart(request)

    for item in cart:
        OrderItem.objects.create(order = order, product = item['product'], price = item ['price'], quantity = item['quantity'])

    print(item) # >o<
    return order.id


Q. Imprpvement on forms.
login.html:
{% extends 'base.html' %}

{% block content %}
<div class="columns">
    <div class="column is-6 is-offset-3">
        <h1 class="title">Log in</h1>

        <form method="post" action=".">
            {% csrf_token %}

            <input type="hidden" name="next" value="{{ next }}">

            <div class="field">
                <label>Username</label>
                <div class="control">
                    <input type="text" class="input" name="username" id="id_username">
                </div>
            </div>

            <div class="field">
                <label>Password</label>
                <div class="control">
                    <input type="password" class="input" name="password" id="id_password">
                </div>
            </div>

            {% if form.errors %}
                <div class="notification is-danger">
                    Your username and password didn't match. Please try again!
                </div>
            {% endif %}

            <div class="field">
                <div class="control">
                    <button class="button is-success">Log in</button>
                </div>
            </div>
        </form>
    </div> 
</div>
{% endblock %}


forms.py:
from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User

class SignUpForm(UserCreationForm):
    first_name = forms.CharField(max_length=50, required=True)
    last_name = forms.CharField(max_length=50, required=True)
    email = forms.EmailField(max_length=255, required=True)

    def __init__(self, *args, **kwargs):
        super(SignUpForm, self).__init__(*args, **kwargs)

        self.fields['username'].widget.attrs['class'] = 'input' 
        self.fields['first_name'].widget.attrs['class'] = 'input'  
        self.fields['last_name'].widget.attrs['class'] = 'input' 
        self.fields['email'].widget.attrs['class'] = 'input' 
        self.fields['password1'].widget.attrs['class'] = 'input' 
        self.fields['password2'].widget.attrs['class'] = 'input'
        self.fields['password1'].help_text = None
        self.fields['password2'].help_text = None
    

    class Meta:
        model = User
        fields = ['username', 'first_name', 'last_name', 'email', 'password1', 'password2']


main.css:
form .helptext {
    font-size: 12px;
    color: #ccc;
}

form ul {
    display: none;
}


signup.html:
{% extends 'base.html' %}

{% block content %}
<div class="columns">
    <div class="column is-6 is-offset-3">
        <h1 class="title">Sign Up</h1>

        <form method="post" action=".">
            {% csrf_token %}

            {% if form.errors %}
                <div class="notification is-danger">
                    <ul>
                        {% for error in form.non_field_errors %}
                            <li>{{ error }}</li>
                        {% endfor %}
                        
                        {% for field in form %}
                            {% if field.errors %}
                                <li>{{ field.label }}: {{ field.errors }}</li>
                            {% endif %}
                        {% endfor %}
                    </ul>
                </div>
            {% endif %}


            <div class="field">
                <label class="label">Username</label>
                <div class="control">
                    {{ form.username }}
                </div>
            </div>

            <div class="field">
                <label class="label">First Name</label>
                <div class="control">
                    {{ form.first_name }}
                </div>
            </div>

            <div class="field">
                <label class="label">Last Name</label>
                <div class="control">
                    {{ form.last_name }}
                </div>
            </div>

            <div class="field">
                <label class="label">Email</label>
                <div class="control">
                    {{ form.email }}
                </div>
            </div>

            <div class="field">
                <label class="label">Password</label>
                <div class="control">
                    {{ form.password1 }}
                </div>
            </div>

            <div class="field">
                <label class="label">Password Confirmation</label>
                <div class="control">
                    {{ form.password2 }}
                </div>
            </div>

            <div class="field">
                <div class="control">
                    <button class="button is-success">Sign Up</button>
                </div>
            </div>
        </form>
    </div>
</div>

    
{% endblock %}


userprofile/views.py:
from django.shortcuts import render, redirect
from django.contrib.auth import login
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json

from .forms import SignUpForm
# Create your views here.

def signup(request):
    if request.method == 'POST':
        form = SignUpForm(request.POST)

        if form.is_valid():
            print("Form is valid")  
            user = form.save()
            login(request, user)
            return redirect('frontpage')
        else:
            print("Form errors:", form.errors)  
            
    else:
        form = SignUpForm()

    return render(request, 'signup.html', {'form': form})



@login_required
def myaccount(request):
    return render(request, 'myaccount.html')

@login_required
@csrf_exempt 
def update_user_info(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        user = request.user

        user.first_name = data['first_name']
        user.last_name = data['last_name']
        user.email = data['email']
        
        if data['password']:
            user.set_password(data['password'])  
        
        user.save()
        return JsonResponse({'status': 'success'})
    
    
    return JsonResponse({'status': 'failed'}, status=400)


Q. Newsletters
newsletter/apps.py:
from django.apps import AppConfig


class NewsletterConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'apps.newsletter'


snippet from settings.py:
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sitemaps',
    'django.contrib.staticfiles',

    'apps.cart.apps.CartConfig', # Adding the cart folder and its related files
    'apps.coupon.apps.CouponConfig', # Adding the coupon folder and its related files
    'apps.core.apps.CoreConfig', # Adding the core folder and its related files
    'apps.newsletter.apps.NewsletterConfig',
    'apps.order.apps.OrderConfig', # Adding the order folder and its related files
    'apps.store.apps.StoreConfig', # Adding store folder and its related files
    'apps.userprofile.apps.UserprofileConfig',
]


newsletter/models.py:
from django.db import models

# Create your models here.
class Subscriber(models.Model):
    email = models.EmailField(max_length=255)
    date_added = models.DateTimeField(auto_now_add=True)

    def __str___(self):
        return '%s' % self.email


newsletter/admin.py:
from django.contrib import admin

from .models import Subscriber
# Register your models here.

admin.site.register(Subscriber)


newsletter.html:
<div class="newsletter-wrapper" id="newsletter-wrapper">
    <h2 class="subtitle">Subscribe to our newsletter</h2>

    <form v-on:submit.prevent="onSubmit">
        <div class="field has-addons">
            <div class="control">
                <input type="email" v-model="email" name="email" class="input" placeholder="Your email address...">
            </div>

            <div class="control">
                <button class="button is-success">Submit</button>
            </div>

        </div>
    </form>

    <div class="notification is-success" v-if="showSuccess">
        The email address was saved.
    </div>
</div>

<script>
    var newsletterapp = new Vue({
        el: '#newsletter-wrapper',
        data () {
            return {
                email: '',
                showSuccess: false
            }
        },
        methods: {
            onSubmit() {
                console.log('Submit')

                fetch('/api/add_subscriber/', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRFToken': '{{ csrf_token }}'
                        },
                        body: JSON.stringify({'email': this.email})
                    })
                    .then((response) => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok ' + response.statusText);
                        }
                        return response.json();
                    })
                    .then((data) => {
                        console.log(data)

                        this.showSuccess = true
                        this.email = ''
                    })
                    .catch(function(error) {
                        console.error('Error:', error);
                        this.showSuccess = false
                        alert('There was an issue with the newsletter process.');
                    });
            }
        }
    })
</script>


main.css:
form .helptext {
    font-size: 12px;
    color: #ccc;
}

form ul {
    display: none;
}

.newsletter-wrapper {
    padding: 50px 20px;
    text-align: center;
    background-color: #535353;
}

    .newsletter-wrapper .field.has-addons {
        justify-content: center;
    }

    .newsletter-wrapper .notification {
        margin-top: 20px;
    }


newsletter/api.py:
import json

from django.http import JsonResponse

from .models import Subscriber

def api_add_subscriber(request): # Saving the email data from the newsletter email field.
    data = json.loads(request.body)
    email = data['email']

    subs = Subscriber.objects.create(email=email)

    return JsonResponse({'success': True})


urls.py:
from django.contrib import admin
from django.urls import path
from django.conf import settings
from django.conf.urls.static import static
from django.contrib.sitemaps.views import sitemap
from django.contrib.auth import views

from apps.cart.webhook import webhook
from apps.cart.views import cart_detail, success
from apps.core.views import frontpage, contact, about 
from apps.store.views import product_detail, main_category_detail, sub_category_detail, search 
from apps.userprofile.views import signup, myaccount, update_user_info

from apps.newsletter.api import api_add_subscriber
from apps.coupon.api import api_can_use
from apps.store.api import api_add_to_cart, api_remove_from_cart, api_checkout, create_checkout_session

from .sitemaps import StaticViewsSiteMap, MainCategorySitemap, SubCategorySitemap, ProductSitemap

sitemaps = {
    'static': StaticViewsSiteMap, 
    'main_category': MainCategorySitemap,
    'sub_category': SubCategorySitemap,
    'products': ProductSitemap
}

urlpatterns = [
    path('admin/', admin.site.urls),
    path('search/', search, name='search'),
    path('', frontpage, name='frontpage'), 
    path('cart/', cart_detail, name='cart'),
    path('hooks/', webhook, name='webhook'),
    path('cart/success/', success, name='success'),
    path('contact/', contact, name='contact'),
    path('about/', about, name='about'),

    # User Management
    
    path('myaccount/', myaccount, name='myaccount'),
    path('update_user_info/', update_user_info, name='update_user_info'),
    path('signup/', signup, name='signup'),
    path('login/', views.LoginView.as_view(template_name='login.html'), name='login'),
    path('logout/', views.LogoutView.as_view(), name='logout'),

    path('sitemap.xml', sitemap, {'sitemaps': sitemaps}, name='django.contrib.sitemaps.views.sitemap'),

    # For API used

    path('api/can_use/', api_can_use, name='api_can_use'),
    path('api/create_checkout_session/', create_checkout_session, name='create_checkout_session'),
    path('api/add_to_cart', api_add_to_cart, name='api_add_to_cart'),
    path('api/remove_from_cart', api_remove_from_cart, name='api_remove_from_cart'),
    path('api/checkout/', api_checkout, name='api_checkout'),
    path('api/add_subscriber/', api_add_subscriber, name='api_add_subscriber'),

    # Store

    path('category/<slug:slug>/', main_category_detail, name='main_category_detail'),
    path('subcategory/<slug:slug>/', sub_category_detail, name='sub_category_detail'),
    path('<slug:category_slug>/<slug:slug>/', product_detail, name='product_detail'), # references the slug from the store/views.py
    
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


S. Adding related products
product_detail.html:
{% extends 'base.html' %}

{% block title %} {{ product.title }} | {% endblock %}

{% block content %}
    <div id="productapp">
        <img :src ="mainImage">
        {% if product.product_image.all %}
            <hr>
            <div class="columns">
                <div class="column is-2" v-for="image in images">
                    <figure class="image is-100x100">
                        <img :src="image.product_thumbnail" @click="changeMainImage(image.product_image)">
                    </figure>
                </div>
            </div>
        {% endif %}
        <hr>
        <h1 class="title">{{ product.title }}</h1>
        <!-- <h2 class="subtitle">P{{ product.price }}</h2> -->

        {% if product.description %}
            <p>{{ product.description }}</p>
        {% endif %}

        <h2 class="subtitle">Add to cart</h2>

        {% if product.variants.all %}
            <div class="columns">
                <div class="column is-6">
                    <div class="table-container"> 
                        <table class="table is-fullwidth">
                            <tbody>
                                <tr>
                                    <td>
                                        <figure class="image is-48x48">
                                            {% if product.product_thumbnail.url %}
                                                <img src="{{ product.product_thumbnail.url }}">
                                            {% endif %}
                                        </figure>
                                    </td>
                                    <td>
                                        {{ product.title }}
                                    </td>
                                    <td>
                                        {{ product.price }}
                                    </td>
                                    <td>
                                        {% if product.in_cart %}
                                            <p>Already in cart! </p>
                                        {% else %}
                                            {% if product.number_available > 0 %}
                                                <button @click="addToCart('{{ product.id }}')" class="button is-success">Add to Cart</button>
                                            {% else %}
                                                <p>The product is out of stock.</p>
                                            {% endif %}
                                        {% endif %}
                                    </td>
                                </tr>
                                {% for variant in product.variants.all %}
                                    <tr>
                                        <td>
                                            <figure class="image is-48x48">
                                                {% if variant.product_thumbnail.url %}
                                                    <img src="{{ variant.product_thumbnail.url }}">
                                                {% endif %}
                                            </figure>
                                        </td>
                                        <td>
                                            {{ variant.title }}
                                        </td>
                                        <td>
                                            {{ variant.price }}
                                        </td>
                                        <td>
                                            {% if variant.in_cart %}
                                                <p>Already in cart! </p>
                                            {% else %}
                                                {% if variant.number_available > 0 %}
                                                    <button @click="addToCart('{{ variant.id }}')" class="button is-success">Add to Cart</button>
                                                {% else %}
                                                    <p>The product is out of stock.</p>
                                                {% endif %}
                                            {% endif %}
                                        </td>
                                    </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        {% else %}
            {% if product.in_cart %}
                <p>Already in cart! </p>
            {% else %}
                {% if product.number_available > 0 %}
                    <button @click="addToCart('{{ product.id }}')" class="button is-success">Add to Cart</button>
                {% else %}
                    <p>The product is out of stock.</p>
                {% endif %}
            {% endif %}
        {% endif %}


        <article class="message is-success" v-if="showMessage">
            <div class="message-body">
                The product was added to the cart!
            </div>
        </article>

        <hr>

        <h2 class="subtitle">Related Products</h2>
    </div>

    {% with related_products as listproducts %}
        {% include 'parts/product_list.html' %}
    {% endwith %}
{% endblock %}

{% block scripts %}
<script>
    var productapp = new Vue({
        el: '#productapp',
        delimiters: ['[[', ']]'],
        data () {
            return {
                showMessage: false,
                mainImage: '{{ product.product_image.url }}',
                images : [{{ product_imagesstring|safe }}]
            }
        },
        mounted(){
            console.log('Vue instance mounted for cart');
        },
        methods: {
            changeMainImage (image) {
                this.mainImage = image;
            },
            addToCart(product_id) {
                console.log('Product_id:', product_id);

                var data = {
                    'product_id': product_id, 
                    'update': false,
                    'quantity': 1
                };

                fetch('/api/add_to_cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)  
                })
                .then((response) => {
                    console.log(response)

                    this.showMessage = true

                    store.commit('increment', 1);

                    setTimeout(() => {
                        this.showMessage = false
                    }, 2000)
                })
                .catch(function (error){
                    console.log('Error 2:');
                    console.log(error);
                })
            }
        }
    });
</script>
{% endblock %}


store/views.py:
import random

from django.shortcuts import render, get_object_or_404, redirect
from django.db.models import Q

from apps.cart.cart import Cart

from .models import Product, MainCategory, SubCategory

# Create your views here.
def product_detail(request, category_slug, slug):
    product = get_object_or_404(Product, slug=slug) # To call the product database

    related_products = list(product.sub_category.products.filter(parent=None).exclude(id=product.id))

    if len(related_products) >= 3:
        related_products = random.sample(related_products, 3) # Can replace it depending on your preference. Take note that this is dependent on the number of products in the database.

    if product.parent:
        return redirect('product_detail', category_slug=category_slug, slug=product.parent.slug)
    

    product_imagesstring = "{'product_thumbnail': '%s', 'product_image': '%s'}," % (product.product_thumbnail.url, product.product_image.url)

    for image in product.images_product.all(): # 'image_product' is the related_name of ProductImaage model. You may refer on store/modesl.py
        product_imagesstring += ("{'product_thumbnail': '%s', 'product_image': '%s'}," % (image.product_thumbnail.url, image.product_image.url))

    cart = Cart(request)

    if cart.has_product(product.id):
        product.in_cart = True
    else:
        product.in_cart = False

    context = {
        'product': product,
        'product_imagesstring': product_imagesstring,
        'related_products': related_products
    }

    return render(request, 'product_detail.html', context)

def main_category_detail(request, slug):
    category = get_object_or_404(MainCategory, slug=slug)
    subcategories = SubCategory.objects.filter(main_category=category)

    
    context = {
        'category': category,
        'menu_sub_categories': subcategories  # Pass only filtered subcategories
    }

    return render(request, 'main_category_detail.html', context)


def sub_category_detail(request, slug):
    sub_category = get_object_or_404(SubCategory, slug=slug)  # Get the subcategory based on the slug
    products = Product.objects.filter(parent=None)  # Get products related to the subcategory

    context = {
        'sub_category': sub_category,
        'products': products  # Pass the products to the template
    }

    return render(request, 'sub_category_detail.html', context)

def search(request):
    query = request.GET.get('query')
    products = Product.objects.filter(Q(title__icontains = query) | Q(description__icontains = query))

    context = {
        'query': query,
        'products': products
    }

    return render(request, 'search.html', context)


product_list.html:
<div class="columns is-multiline">
    {% for p in listproducts %}
    <div class="column is-3">
        <div class="card">
            <div class="card-image">
                <figure class="image">
                    <img src="{{ p.product_image.url }}" alt="{{ product.title }}">
                </figure>
            </div>
            <div class="card-content">
                <div class="media">
                    <div class="media-content">
                        <p class="title is-4">{{p.title }}</p>
                        <p class="subtitle is-6">P{{ p.price }}</p>
                    </div>
                </div>
            </div>
            <footer class="card-footer">
                <a href="{% url 'product_detail' p.sub_category.slug p.slug %}" class="card-footer-item">View</a>
            </footer>
        </div>
    </div>
    {% endfor %}
</div>


product_list.html:
{% extends 'base.html' %}

{% block title %} {{ sub_category.title }} | {% endblock %}

{% block content %}
    <h1 class="title">{{ sub_category.title }}</h1>

    {% with products as listproducts %}
        {% include 'parts/product_list.html' %}
    {% endwith %}

{% endblock %}


frontpage.html:
{% extends 'base.html' %} {# importing the base.html #}

{% block title %} Welcome | {% endblock %}

{% block content %}
    {% with products as listproducts %}
        {% include 'parts/product_list.html' %}
    {% endwith %}
{% endblock %}


T. Product reviews
store/models.py:
from io import BytesIO
from django.core.files import File
from django.db import models
from PIL import Image
from django.contrib.auth.models import User

# Create your models here.
# Database model
class MainCategory(models.Model):
    title = models.CharField(max_length = 255) # Character field for the database
    slug = models.SlugField(max_length = 255) # a description containing only letters, hyphens, numbers or underscores
    main_ordering = models.IntegerField(default=0)


    class Meta:
        verbose_name_plural = 'Main Categories' # Correcting the plural of the cataegory correct instead of categorys.
        ordering = ('main_ordering',)

    def __str__(self): # To see the title character in admin
        return self.title
    
    def get_absolute_url(self):
        return '/%s/' % (self.slug)


class SubCategory(models.Model):
    main_category = models.ForeignKey(MainCategory, related_name='sub_categories', on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    slug = models.SlugField(max_length=255)
    sub_ordering = models.IntegerField(default=0)

    sub_category_image = models.ImageField(upload_to='uploads/', blank=True, null=True)
    sub_category_thumbnail = models.ImageField(upload_to='uploads/', blank=True, null=True)

    class Meta:
        verbose_name_plural = 'Sub Categories'
        ordering = ('sub_ordering',)

    def __str__(self):
        return self.title
    
    def save_sub_category_image(self, *args, **kwargs):
        self.sub_category_thumbnail = self.make_sub_category_thumbnail(self.sub_category_image)

        super().save(*args, **kwargs)

    def get_absolute_url(self):
        return '/%s/%s' % (self.main_category.slug, self.slug)
    
    def make_sub_category_thumbnail(self, image, size=(300, 200)):
        sub_category_img = Image.open(image)
        sub_category_img.convert('RGB')
        sub_category_img.thumbnail(size)

        sub_category_thumb_io = BytesIO()
        sub_category_img.save(sub_category_thumb_io, 'JPEG', quality=85)

        from os.path import basename
        sub_category_thumbnail = File(sub_category_thumb_io, name=basename(image.name))

        return sub_category_thumbnail
  
  
class Product(models.Model): # Adding the product in the database
    sub_category = models.ForeignKey(SubCategory, related_name='products', on_delete=models.CASCADE)
    parent = models.ForeignKey('self', related_name='variants', on_delete=models.CASCADE, blank=True, null=True)
    title = models.CharField(max_length=255)
    slug = models.SlugField(max_length=255)
    description = models.TextField(blank=True, null=True)
    price = models.FloatField()
    is_featured = models.BooleanField(default=False)
    number_available = models.IntegerField(default=1)

    product_image = models.ImageField(upload_to='uploads/', blank=True, null=True)
    product_thumbnail = models.ImageField(upload_to='uploads/', blank=True, null=True)

    date_added = models.DateTimeField(auto_now_add=True)


    class Meta:
        ordering = ('-date_added',) # Newest one comes first. You can remove the "-" if you want the oldest one to come first.

    def __str__(self):
        return self.title
    
    def save(self, *args, **kwargs):
        self.product_thumbnail = self.make_product_thumbnail(self.product_image)

        super().save(*args, **kwargs)

    def get_absolute_url(self):
        return '/%s/%s' % (self.sub_category.slug, self.slug)
    
    def make_product_thumbnail(self, image, size=(300, 200)):
        product_img = Image.open(image)
        product_img.convert('RGB')
        product_img.thumbnail(size)

        product_thumb_io = BytesIO()
        product_img.save(product_thumb_io, 'JPEG', quality=85)

        from os.path import basename
        product_thumbnail = File(product_thumb_io, name=basename(image.name))

        return product_thumbnail
    
    def get_rating(self):
        total = sum(int(product_review['stars']) for product_review in self.product_reviews.values())

        return total / self.product_reviews.count()
    

class ProductImage(models.Model):
    product = models.ForeignKey(Product, related_name='images_product', on_delete=models.CASCADE)

    product_image = models.ImageField(upload_to='uploads/', blank=True, null=True)
    product_thumbnail = models.ImageField(upload_to='uploads/', blank=True, null=True)

    def make_product_thumbnail(self, image, size=(300, 200)):
        product_img = Image.open(image)
        product_img.convert('RGB')
        product_img.thumbnail(size)

        product_thumb_io = BytesIO()
        product_img.save(product_thumb_io, 'JPEG', quality=85)

        from os.path import basename
        product_thumbnail = File(product_thumb_io, name=basename(image.name))

        return product_thumbnail

    def save(self, *args, **kwargs):
        self.product_thumbnail = self.make_product_thumbnail(self.product_image)

        super().save(*args, **kwargs)


class ProductReview(models.Model):
     product = models.ForeignKey(Product, related_name='product_reviews', on_delete=models.CASCADE)
     user = models.ForeignKey(User, related_name='product_reviews', on_delete=models.CASCADE)

     content = models.TextField(blank=True, null=True)
     stars = models.IntegerField()

     date_added = models.DateTimeField(auto_now_add=True)


store/admin.py:
from django.contrib import admin

from .models import MainCategory, SubCategory, Product, ProductImage, ProductReview # Import the Category class

# Register your models here.
admin.site.register(MainCategory) # Register the new database in store
admin.site.register(SubCategory) 
admin.site.register(Product)
admin.site.register(ProductImage)
admin.site.register(ProductReview)


product_detail.html:
{% extends 'base.html' %}

{% block title %} {{ product.title }} | {% endblock %}

{% block content %}
    <div id="productapp">
        <img :src ="mainImage">
        {% if product.product_image.all %}
            <hr>
            <div class="columns">
                <div class="column is-2" v-for="image in images">
                    <figure class="image is-100x100">
                        <img :src="image.product_thumbnail" @click="changeMainImage(image.product_image)">
                    </figure>
                </div>
            </div>
        {% endif %}
        <hr>
        <h1 class="title">{{ product.title }}</h1>
        <h2 class="subtitle">P{{ product.price }}, Stars: {{ product.get_rating |floatformat:1 }}</h2> 

        {% if product.description %}
            <p>{{ product.description }}</p>
        {% endif %}

        <h2 class="subtitle">Add to cart</h2>

        {% if product.variants.all %}
            <div class="columns">
                <div class="column is-6">
                    <div class="table-container"> 
                        <table class="table is-fullwidth">
                            <tbody>
                                <tr>
                                    <td>
                                        <figure class="image is-48x48">
                                            {% if product.product_thumbnail.url %}
                                                <img src="{{ product.product_thumbnail.url }}">
                                            {% endif %}
                                        </figure>
                                    </td>
                                    <td>
                                        {{ product.title }}
                                    </td>
                                    <td>
                                        {{ product.price }}
                                    </td>
                                    <td>
                                        {% if product.in_cart %}
                                            <p>Already in cart! </p>
                                        {% else %}
                                            {% if product.number_available > 0 %}
                                                <button @click="addToCart('{{ product.id }}')" class="button is-success">Add to Cart</button>
                                            {% else %}
                                                <p>The product is out of stock.</p>
                                            {% endif %}
                                        {% endif %}
                                    </td>
                                </tr>
                                {% for variant in product.variants.all %}
                                    <tr>
                                        <td>
                                            <figure class="image is-48x48">
                                                {% if variant.product_thumbnail.url %}
                                                    <img src="{{ variant.product_thumbnail.url }}">
                                                {% endif %}
                                            </figure>
                                        </td>
                                        <td>
                                            {{ variant.title }}
                                        </td>
                                        <td>
                                            {{ variant.price }}
                                        </td>
                                        <td>
                                            {% if variant.in_cart %}
                                                <p>Already in cart! </p>
                                            {% else %}
                                                {% if variant.number_available > 0 %}
                                                    <button @click="addToCart('{{ variant.id }}')" class="button is-success">Add to Cart</button>
                                                {% else %}
                                                    <p>The product is out of stock.</p>
                                                {% endif %}
                                            {% endif %}
                                        </td>
                                    </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        {% else %}
            {% if product.in_cart %}
                <p>Already in cart! </p>
            {% else %}
                {% if product.number_available > 0 %}
                    <button @click="addToCart('{{ product.id }}')" class="button is-success">Add to Cart</button>
                {% else %}
                    <p>The product is out of stock.</p>
                {% endif %}
            {% endif %}
        {% endif %}


        <article class="message is-success" v-if="showMessage">
            <div class="message-body">
                The product was added to the cart!
            </div>
        </article>

        <hr>

        <h2 class="subtitle">Related Products</h2>
    </div>

    {% with related_products as listproducts %}
        {% include 'parts/product_list.html' %}
    {% endwith %}

    <hr>

    <h2 class="subtitle">Reviews</h2>

    <div class="reviews-wrapper">
        {% for review in product.product_reviews.all %}
            <div class="notification space-below">
                <p>
                    <strong>Date: </strong>{{ review.date_added|date:"Y-m-d" }},
                    <strong>Stars: </strong>{{ review.stars }}
                </p>

                {{ review.content }}
            </div>
        {% empty %}
            <div class="notification space-below">
                No reviews yet...
            </div>
        {% endfor %}

        <div class="notification space-below">
            {% if request.user.is_authenticated %}
                <form method="post" action=".">
                    {% csrf_token %}

                    <div class="field">
                        <label>Stars</label>

                        <div class="control">
                            <div class="select">
                                <select name="stars">
                                    <option value="1">1</option>
                                    <option value="2">2</option>
                                    <option value="3" selected>3</option>
                                    <option value="4">4</option>
                                    <option value="5">5</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <div class="field">
                        <label>Content</label>

                        <div class="control">
                            <textarea class="textarea" name="content"></textarea>
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <button class="button is-success">Submit</button>
                        </div>
                    </div>
                </form>     
            {% else %}
                <p>Sign in to review products</p>
            {% endif %}
        </div>
    </div>
{% endblock %}

{% block scripts %}
<script>
    var productapp = new Vue({
        el: '#productapp',
        delimiters: ['[[', ']]'],
        data () {
            return {
                showMessage: false,
                mainImage: '{{ product.product_image.url }}',
                images : [{{ product_imagesstring|safe }}]
            }
        },
        mounted(){
            console.log('Vue instance mounted for cart');
        },
        methods: {
            changeMainImage (image) {
                this.mainImage = image;
            },
            addToCart(product_id) {
                console.log('Product_id:', product_id);

                var data = {
                    'product_id': product_id, 
                    'update': false,
                    'quantity': 1
                };

                fetch('/api/add_to_cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)  
                })
                .then((response) => {
                    console.log(response)

                    this.showMessage = true

                    store.commit('increment', 1);

                    setTimeout(() => {
                        this.showMessage = false
                    }, 2000)
                })
                .catch(function (error){
                    console.log('Error 2:');
                    console.log(error);
                })
            }
        }
    });
</script>
{% endblock %}



main.css:
form .helptext {
    font-size: 12px;
    color: #ccc;
}

form ul {
    display: none;
}

.newsletter-wrapper {
    padding: 50px 20px;
    text-align: center;
    background-color: #535353;
}

    .newsletter-wrapper .field.has-addons {
        justify-content: center;
    }

    .newsletter-wrapper .notification {
        margin-top: 20px;
    }

.notification.space-below{
    margin-bottom: 20px;
}


store/views.py:
import random

from django.shortcuts import render, get_object_or_404, redirect
from django.db.models import Q

from apps.cart.cart import Cart

from .models import Product, MainCategory, SubCategory, ProductReview

# Create your views here.
def product_detail(request, category_slug, slug):
    product = get_object_or_404(Product, slug=slug) # To call the product database

    # Add review
    if request.method == 'POST' and request.user.is_authenticated: # Get the data from the form
        stars = request.POST.get('stars', 3)
        content = request.POST.get('content', '')

        review = ProductReview.objects.create(product=product, user=request.user, stars=stars, content=content)

        return redirect('product_detail', category_slug=category_slug, slug=slug)

    related_products = list(product.sub_category.products.filter(parent=None).exclude(id=product.id))

    if len(related_products) >= 3:
        related_products = random.sample(related_products, 3) # Can replace it depending on your preference. Take note that this is dependent on the number of products in the database.

    if product.parent:
        return redirect('product_detail', category_slug=category_slug, slug=product.parent.slug)
    

    product_imagesstring = "{'product_thumbnail': '%s', 'product_image': '%s'}," % (product.product_thumbnail.url, product.product_image.url)

    for image in product.images_product.all(): # 'image_product' is the related_name of ProductImaage model. You may refer on store/modesl.py
        product_imagesstring += ("{'product_thumbnail': '%s', 'product_image': '%s'}," % (image.product_thumbnail.url, image.product_image.url))

    cart = Cart(request)

    if cart.has_product(product.id):
        product.in_cart = True
    else:
        product.in_cart = False

    context = {
        'product': product,
        'product_imagesstring': product_imagesstring,
        'related_products': related_products
    }

    return render(request, 'product_detail.html', context)

def main_category_detail(request, slug):
    category = get_object_or_404(MainCategory, slug=slug)
    subcategories = SubCategory.objects.filter(main_category=category)

    
    context = {
        'category': category,
        'menu_sub_categories': subcategories  # Pass only filtered subcategories
    }

    return render(request, 'main_category_detail.html', context)


def sub_category_detail(request, slug):
    sub_category = get_object_or_404(SubCategory, slug=slug)  # Get the subcategory based on the slug
    products = Product.objects.filter(parent=None)  # Get products related to the subcategory

    context = {
        'sub_category': sub_category,
        'products': products  # Pass the products to the template
    }

    return render(request, 'sub_category_detail.html', context)

def search(request):
    query = request.GET.get('query')
    products = Product.objects.filter(Q(title__icontains = query) | Q(description__icontains = query))

    context = {
        'query': query,
        'products': products
    }

    return render(request, 'search.html', context)


U. Some changes in the my profile.
{% extends 'base.html' %}

{% block content %}
    <h1 class="title">My Account</h1>

    <form method="post" action="{% url 'logout' %}">
        {% csrf_token %}
        <button type="submit" class="button is-danger">Log Out</button>
    </form>

    <hr>

    <h2 class="subtitle">Account Information</h2>

    <div id="account-info">
        <div v-if="!isEditing">
            <p><strong>Name: </strong>{{ user.first_name }} {{ user.last_name }}</p>
            <p><strong>Email: </strong>{{ user.email }}</p>
            <p><strong>Username: </strong>{{ user.username }}</p>
            <button class="button is-light" @click="editInfo">Edit</button>
            <br>
            <div class="notification is-success" v-if="showSuccess">
                Your status was updated. Reloading...
            </div>
        </div>

        <div v-else>
            <form @submit.prevent="updateInfo">
                <div class="field">
                    <label class="label">First Name</label>
                    <div class="control">
                        <input class="input" type="text" v-model="user.first_name">
                    </div>
                </div>
                <div class="field">
                    <label class="label">Last Name</label>
                    <div class="control">
                        <input class="input" type="text" v-model="user.last_name">
                    </div>
                </div>
                <div class="field">
                    <label class="label">Username</label>
                    <div class="control">
                        <input class="input" type="text" v-model="user.username">
                    </div>
                </div>
                <div class="field">
                    <label class="label">Email</label>
                    <div class="control">
                        <input class="input" type="email" v-model="user.email">
                    </div>
                </div>
                <div class="field">
                    <label class="label">Password</label>
                    <div class="control">
                        <input class="input" type="password" v-model="user.password1">
                    </div>
                </div>
                <div class="field">
                    <label class="label">Password Confirmation</label>
                    <div class="control">
                        <input class="input" type="password" v-model="user.password2">
                    </div>
                </div>
                <button type="submit" class="button is-success">Done</button>
                <button type="button" class="button is-light" @click="cancelEdit">Cancel</button>
                <br><br>
                <div class="notification is-danger" v-if="showErrorPassword">
                    Password not matched. Please try again!
                </div>
            </form>
        </div>
    </div>

    <hr>

    <h2 class="subtitle">My Orders</h2>

    {% for order in request.user.orders.all %}
        <article class="message is-light">
            <div class="message-header">
                <p>{{ order.order_created_at}}</p>
                <p><strong>Status: </strong>{{ order.shipped_status }}</p>
            </div>

            <div class="message-body">
                <table class="table is-striped is-fullwidth">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Quantity</th>
                            <th>Price</th>
                        </tr>
                    </thead>

                    <tbody>
                        {% for item in order.items.all %}
                        <tr>
                            <td>{{ item.product.title }}</td>
                            <td>{{ item.quantity }}</td>
                            <td>{{ item.price }}</td>
                        </tr>
                        {% endfor %}
                    </tbody>

                    <tfoot>
                        <tr>
                            <td>Total</td>
                            <td>{{ order.get_total_quantity }}</td>
                            <td>{{ order.paid_amount }}</td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </article>
    {% empty %}
        <p>You don't have any orders yet.</p>
    {% endfor %}
{% endblock %}

{% block scripts %}
<script>
    new Vue({
        el: '#account-info',
        data: {
            isEditing: false,
            user: {
                first_name: "{{ request.user.first_name }}",
                last_name: "{{ request.user.last_name }}",
                username: "{{ request.user.username }}",
                email: "{{ request.user.email }}",
                password1: '',
                password2: '',
            }, 
            data () {
                return {
                first_name: "{{ request.user.first_name }}",
                last_name: "{{ request.user.last_name }}",
                username: "{{ request.user.username }}",
                email: "{{ request.user.email }}",
                password1: '',
                password2: '',
                }
            }, 
            showSuccess: false,
            showErrorPassword: false,
        },
        methods: {
            editInfo() {
                this.isEditing = true;
            },
            cancelEdit() {
                this.isEditing = false;
            },
            async updateInfo() {
                var data = {
                    'first_name': this.user.first_name,
                    'last_name': this.user.last_name,
                    'email': this.user.email,
                    'username': this.user.username,
                    'password1': this.user.password1,
                    'password2': this.user.password2
                };
                
                console.log('User details updating...')
                if (data.password1 !== data.password2) {
                    this.showErrorPassword = true
                } else {
                    const response = await fetch('{% url "update_user_info" %}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    body: JSON.stringify({
                        first_name: this.user.first_name,
                        last_name: this.user.last_name,
                        username: this.user.username,
                        email: this.user.email,
                        password1: this.user.password1,
                        password2: this.user.password2
                        })
                    });
                    if (response.ok) {
                        this.isEditing = false 
                        this.showSuccess = true

                        setTimeout(() => {
                            this.showSuccess = false;
                            window.location.reload();
                        }, 2000)
                    } else {
                        console.error("Failed to update user info");
                    }
                }
            }
        }
    });
</script>
{% endblock %}



userprofile/views.py:
from django.shortcuts import render, redirect
from django.contrib.auth import login, update_session_auth_hash
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json

from .forms import SignUpForm
# Create your views here.

def signup(request):
    if request.method == 'POST':
        form = SignUpForm(request.POST)

        if form.is_valid():
            print("Form is valid")  
            user = form.save()
            login(request, user)
            return redirect('frontpage')
        else:
            print("Form errors:", form.errors)  
            
    else:
        form = SignUpForm()

    return render(request, 'signup.html', {'form': form})



@login_required
def myaccount(request):
    print("User is logged in:", request.user.is_authenticated)
    return render(request, 'myaccount.html')

@login_required
@csrf_exempt 
def update_user_info(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        user = request.user

        user.first_name = data['first_name']
        user.last_name = data['last_name']
        user.email = data['email']
        user.username = data['username']

        print(data['first_name']) # Heto nanaman 
        
        if data.get('password1') and data.get('password2') and data['password1'] == data['password2']:
            user.set_password(data['password1'])
            user.save()

            update_session_auth_hash(request, user)
        else:
            user.save()

        print('User details updated')
        return JsonResponse({'status': 'success'})
        
    
    return JsonResponse({'status': 'failed'}, status=400)


V. PDF receipts
store/models.py:
from io import BytesIO
from django.core.files import File
from django.db import models
from PIL import Image
from django.contrib.auth.models import User

# Create your models here.
# Database model
class MainCategory(models.Model):
    title = models.CharField(max_length = 255) # Character field for the database
    slug = models.SlugField(max_length = 255) # a description containing only letters, hyphens, numbers or underscores
    main_ordering = models.IntegerField(default=0)


    class Meta:
        verbose_name_plural = 'Main Categories' # Correcting the plural of the cataegory correct instead of categorys.
        ordering = ('main_ordering',)

    def __str__(self): # To see the title character in admin
        return self.title
    
    def get_absolute_url(self):
        return '/%s/' % (self.slug)


class SubCategory(models.Model):
    main_category = models.ForeignKey(MainCategory, related_name='sub_categories', on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    slug = models.SlugField(max_length=255)
    sub_ordering = models.IntegerField(default=0)

    sub_category_image = models.ImageField(upload_to='uploads/', blank=True, null=True)
    sub_category_thumbnail = models.ImageField(upload_to='uploads/', blank=True, null=True)

    class Meta:
        verbose_name_plural = 'Sub Categories'
        ordering = ('sub_ordering',)

    def __str__(self):
        return self.title
    
    def save_sub_category_image(self, *args, **kwargs):
        self.sub_category_thumbnail = self.make_sub_category_thumbnail(self.sub_category_image)

        super().save(*args, **kwargs)

    def get_absolute_url(self):
        return '/%s/%s' % (self.main_category.slug, self.slug)
    
    def make_sub_category_thumbnail(self, image, size=(300, 200)):
        sub_category_img = Image.open(image)
        sub_category_img.convert('RGB')
        sub_category_img.thumbnail(size)

        sub_category_thumb_io = BytesIO()
        sub_category_img.save(sub_category_thumb_io, 'JPEG', quality=85)

        from os.path import basename
        sub_category_thumbnail = File(sub_category_thumb_io, name=basename(image.name))

        return sub_category_thumbnail
  
  
class Product(models.Model): # Adding the product in the database
    sub_category = models.ForeignKey(SubCategory, related_name='products', on_delete=models.CASCADE)
    parent = models.ForeignKey('self', related_name='variants', on_delete=models.CASCADE, blank=True, null=True)
    title = models.CharField(max_length=255)
    slug = models.SlugField(max_length=255)
    description = models.TextField(blank=True, null=True)
    price = models.FloatField()
    is_featured = models.BooleanField(default=False)
    number_available = models.IntegerField(default=1)

    product_image = models.ImageField(upload_to='uploads/', blank=True, null=True)
    product_thumbnail = models.ImageField(upload_to='uploads/', blank=True, null=True)

    date_added = models.DateTimeField(auto_now_add=True)


    class Meta:
        ordering = ('-date_added',) # Newest one comes first. You can remove the "-" if you want the oldest one to come first.

    def __str__(self):
        return self.title
    
    def save(self, *args, **kwargs):
        self.product_thumbnail = self.make_product_thumbnail(self.product_image)

        super().save(*args, **kwargs)

    def get_absolute_url(self):
        return '/%s/%s' % (self.sub_category.slug, self.slug)
    
    def make_product_thumbnail(self, image, size=(300, 200)):
        product_img = Image.open(image)
        product_img.convert('RGB')
        product_img.thumbnail(size)

        product_thumb_io = BytesIO()
        product_img.save(product_thumb_io, 'JPEG', quality=85)

        from os.path import basename
        product_thumbnail = File(product_thumb_io, name=basename(image.name))

        return product_thumbnail
    
    def get_rating(self):
        total = sum(int(product_review['stars']) for product_review in self.product_reviews.values())

        if self.product_reviews.count() > 0:
            return total / self.product_reviews.count()
        else:
            return 0
    

class ProductImage(models.Model):
    product = models.ForeignKey(Product, related_name='images_product', on_delete=models.CASCADE)

    product_image = models.ImageField(upload_to='uploads/', blank=True, null=True)
    product_thumbnail = models.ImageField(upload_to='uploads/', blank=True, null=True)

    def make_product_thumbnail(self, image, size=(300, 200)):
        product_img = Image.open(image)
        product_img.convert('RGB')
        product_img.thumbnail(size)

        product_thumb_io = BytesIO()
        product_img.save(product_thumb_io, 'JPEG', quality=85)

        from os.path import basename
        product_thumbnail = File(product_thumb_io, name=basename(image.name))

        return product_thumbnail

    def save(self, *args, **kwargs):
        self.product_thumbnail = self.make_product_thumbnail(self.product_image)

        super().save(*args, **kwargs)


class ProductReview(models.Model):
     product = models.ForeignKey(Product, related_name='product_reviews', on_delete=models.CASCADE)
     user = models.ForeignKey(User, related_name='product_reviews', on_delete=models.CASCADE)

     content = models.TextField(blank=True, null=True)
     stars = models.IntegerField()

     date_added = models.DateTimeField(auto_now_add=True)


product_detail.html:
{% extends 'base.html' %}

{% block title %} {{ product.title }} | {% endblock %}

{% block content %}
    <div id="productapp">
        <img :src ="mainImage">
        {% if product.product_image.all %}
            <hr>
            <div class="columns">
                <div class="column is-2" v-for="image in images">
                    <figure class="image is-100x100">
                        <img :src="image.product_thumbnail" @click="changeMainImage(image.product_image)">
                    </figure>
                </div>
            </div>
        {% endif %}
        <hr>
        <h1 class="title">{{ product.title }}</h1>
        <h2 class="subtitle">P{{ product.price }}, Stars: {% if product.get_rating == 0 %} No ratings yet {% else %}{{ product.get_rating |floatformat:1 }} {% endif %}</h2> 

        {% if product.description %}
            <p>{{ product.description }}</p>
        {% endif %}

        <h2 class="subtitle">Add to cart</h2>

        {% if product.variants.all %}
            <div class="columns">
                <div class="column is-6">
                    <div class="table-container"> 
                        <table class="table is-fullwidth">
                            <tbody>
                                <tr>
                                    <td>
                                        <figure class="image is-48x48">
                                            {% if product.product_thumbnail.url %}
                                                <img src="{{ product.product_thumbnail.url }}">
                                            {% endif %}
                                        </figure>
                                    </td>
                                    <td>
                                        {{ product.title }}
                                    </td>
                                    <td>
                                        {{ product.price }}
                                    </td>
                                    <td>
                                        {% if product.in_cart %}
                                            <p>Already in cart! </p>
                                        {% else %}
                                            {% if product.number_available > 0 %}
                                                <button @click="addToCart('{{ product.id }}')" class="button is-success">Add to Cart</button>
                                            {% else %}
                                                <p>The product is out of stock.</p>
                                            {% endif %}
                                        {% endif %}
                                    </td>
                                </tr>
                                {% for variant in product.variants.all %}
                                    <tr>
                                        <td>
                                            <figure class="image is-48x48">
                                                {% if variant.product_thumbnail.url %}
                                                    <img src="{{ variant.product_thumbnail.url }}">
                                                {% endif %}
                                            </figure>
                                        </td>
                                        <td>
                                            {{ variant.title }}
                                        </td>
                                        <td>
                                            {{ variant.price }}
                                        </td>
                                        <td>
                                            {% if variant.in_cart %}
                                                <p>Already in cart! </p>
                                            {% else %}
                                                {% if variant.number_available > 0 %}
                                                    <button @click="addToCart('{{ variant.id }}')" class="button is-success">Add to Cart</button>
                                                {% else %}
                                                    <p>The product is out of stock.</p>
                                                {% endif %}
                                            {% endif %}
                                        </td>
                                    </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        {% else %}
            {% if product.in_cart %}
                <p>Already in cart! </p>
            {% else %}
                {% if product.number_available > 0 %}
                    <button @click="addToCart('{{ product.id }}')" class="button is-success">Add to Cart</button>
                {% else %}
                    <p>The product is out of stock.</p>
                {% endif %}
            {% endif %}
        {% endif %}


        <article class="message is-success" v-if="showMessage">
            <div class="message-body">
                The product was added to the cart!
            </div>
        </article>

        <hr>

        <h2 class="subtitle">Related Products</h2>
    </div>

    {% with related_products as listproducts %}
        {% include 'parts/product_list.html' %}
    {% endwith %}

    <hr>

    <h2 class="subtitle">Reviews</h2>

    <div class="reviews-wrapper">
        {% for review in product.product_reviews.all %}
            <div class="notification space-below">
                <p>
                    <strong>Date: </strong>{{ review.date_added|date:"Y-m-d" }},
                    <strong>Stars: </strong>{{ review.stars }}
                </p>

                {{ review.content }}
            </div>
        {% empty %}
            <div class="notification space-below">
                No reviews yet...
            </div>
        {% endfor %}

        <div class="notification space-below">
            {% if request.user.is_authenticated %}
                <form method="post" action=".">
                    {% csrf_token %}

                    <div class="field">
                        <label>Stars</label>

                        <div class="control">
                            <div class="select">
                                <select name="stars">
                                    <option value="1">1</option>
                                    <option value="2">2</option>
                                    <option value="3" selected>3</option>
                                    <option value="4">4</option>
                                    <option value="5">5</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <div class="field">
                        <label>Content</label>

                        <div class="control">
                            <textarea class="textarea" name="content"></textarea>
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <button class="button is-success">Submit</button>
                        </div>
                    </div>
                </form>     
            {% else %}
                <p>Sign in to review products</p>
            {% endif %}
        </div>
    </div>
{% endblock %}

{% block scripts %}
<script>
    var productapp = new Vue({
        el: '#productapp',
        delimiters: ['[[', ']]'],
        data () {
            return {
                showMessage: false,
                mainImage: '{{ product.product_image.url }}',
                images : [{{ product_imagesstring|safe }}]
            }
        },
        mounted(){
            console.log('Vue instance mounted for cart');
        },
        methods: {
            changeMainImage (image) {
                this.mainImage = image;
            },
            addToCart(product_id) {
                console.log('Product_id:', product_id);

                var data = {
                    'product_id': product_id, 
                    'update': false,
                    'quantity': 1
                };

                fetch('/api/add_to_cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)  
                })
                .then((response) => {
                    console.log(response)

                    this.showMessage = true

                    store.commit('increment', 1);

                    setTimeout(() => {
                        this.showMessage = false
                    }, 2000)
                })
                .catch(function (error){
                    console.log('Error 2:');
                    console.log(error);
                })
            }
        }
    });
</script>
{% endblock %}


order_pdf.html:
<!DOCTYPE html>
<html>
    <head>
        <title>Order pdf</title>

        <style type="text/css">
            body {
                font-size: 14px;
            }

            tr.head td,
            tr.footer td {
                padding-top: 10px;
                padding-bottom: 10px;
                font-size: 18px;
                font-weight: bold;
                background-color: #f9f9f9;
            }

            tr.footer td {
                font-size: 14px;
            }

            tr.item td {
                padding-top: 3px;
                padding-bottom: 3px;
                font-size: 14px;
            }
        </style>
    </head>

    <body>
        <div class="wrapper">
            <h1>Invoice #{{ order.id }}</h1>

            <h2>Shipping Address</h2>

            <p>
                {{ order.first_name}} {{ order.last_name }}
                {{ order.address }} <br>
                {{ order.zip_code}} {{ order.contact_number }}
            </p>

            <h2>Products</h2>

            <table cellpadding="0" cellspacing="0">
                <tr class="head">
                    <td>Name</td>
                    <td>Price</td>
                    <td>Quantity</td>
                    <td>Total</td>
                </tr>

                {% for item in order.items.all %}
                    <tr class="item">
                        <td>
                            {% if item.product.product_thumbnail.url %}
                            <img src="http://127.0.0.1:8000{{ item.product.product_thumbnail.url }}" width="40">
                            {% endif %}
                        </td>

                        <td>{{ item.product.title }}</td>
                        <td>{{ item.product.price }}</td>
                        <td>{{ item.product.quantity }}</td>
                        <td>{{ item.price }}</td>
                    </tr>
                {% endfor %}

                <tr class="footer">
                    <td></td>
                    <td colspan="3">Total</td>
                    <td>{{ order.paid_amount }}</td>

                    <h2>Siklo MNL</h2>

                    <p>Thanks for ordering from us!</p>
                </tr>
            </table>
        </div>
    </body>
</html>


order/views.py:
from io import BytesIO

from django.shortcuts import render, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.template.loader import get_template
from django.http import HttpResponse

from xhtml2pdf import pisa

from .models import Order

# Create your views here.
def render_to_pdf(template_src, context_dict={}):
    template = get_template(template_src)
    html = template.render(context_dict)
    result = BytesIO()
    pdf = pisa.pisaDocument(BytesIO(html.encode("ISO-8859-1")), result)

    if not pdf.err:
        return result.getvalue()
    
    return None

@login_required
def admin_order_pdf(request, order_id):
    if request.user.is_superuser:
        order = get_object_or_404(Order, pk=order_id)
        pdf = render_to_pdf('order_pdf.html', {'order': order})

        if pdf:
            response = HttpResponse(pdf, content_type='application/pdf')
            content = "attachment; filename=%s.pdf" % order_id # The file name will be the order id
            response['Content-Disposition'] = content

            return response
        
    return HttpResponse("Not found")


order/admin.py:
import datetime

from django.urls import reverse
from django.contrib import admin
from django.core.mail import send_mail
from django.template.loader import render_to_string
from django.utils.safestring import mark_safe

from .models import Order, OrderItem, PaymentTracking

# Register your models here.

def order_name(obj): # Combining first name and last name
    return '%s %s' % (obj.first_name, obj.last_name)

order_name.short_description = 'Name'

def admin_order_shipped(ModelAdmin, request, queryset):
    for order in queryset:
        order.shipped_date = datetime.datetime.now()
        order.shipped_status = Order.SHIPPED
        order.save()

        html = render_to_string('order_sent.html', {'order': order})
        send_mail('Order sent', 'Your order is successful!', 'noreply@siklomnl.com', ['mail@siklomnl.com', order.email], fail_silently=False, html_message=html)
    return

admin_order_shipped.short_description = 'Set shipped'

def order_pdf(obj):
    return mark_safe('<a href="{}">PDF</a>'.format(reverse('admin_order_pdf', args=[obj.id])))

order_pdf.short_description = 'PDF Title'

class OrderItemInLine(admin.TabularInline): # To show the ordered items.
    model = OrderItem
    raw_id_fields = ['product']


class OrderAdmin(admin.ModelAdmin):
    list_display = ['id', order_name, 'shipped_status' ,'order_created_at', order_pdf] # Displaying the essential order details
    list_filter = ['order_created_at', 'shipped_status'] # Will show an interface sorting the order based on its order date and shipping status
    search_fields = ['first_name', 'last_name', 'address', 'contact_number'] # Search the order details based on the list
    inlines = [OrderItemInLine] # To show the OrderItemInLine
    actions = [admin_order_shipped]

admin.site.register(Order, OrderAdmin)
admin.site.register(OrderItem)
#admin.site.register(PaymentTracking)


W. Changes in user profile
userprofile/models.py:
from django.contrib.auth.models import User

from django.db import models

# Create your models here.
class Userprofile(models.Model):
    user = models.OneToOneField(User, related_name='userprofile', on_delete=models.CASCADE)
    address = models.CharField(max_length=255, blank=True, null=True)
    zip_code = models.CharField(max_length=255, blank=True, null=True)
    contact_number = models.CharField(max_length=255, blank=True, null=True)

    def __str__(self):
        return '%s' % self.user.username
    

User.userprofile = property(lambda u:Userprofile.objects.get_or_create(user=u)[0]) # If you access the user profile for the first time, this lambda function makes it sure that it exists.


userprofile/admin.py:
from django.contrib import admin
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
from django.contrib.auth.models import User

from .models import Userprofile

class UserprofileInline(admin.StackedInline):
    model = Userprofile
    can_delete = False 
    verbose_name_plural = 'Additional Profile'
    fk_name = 'user'

class UserAdmin(BaseUserAdmin):
    inlines = (UserprofileInline, )

    list_display = ('username', 'email', 'first_name', 'last_name', 'get_contact_number', 'get_address', 'get_zip_code')
    list_select_related = ('userprofile', )

    def get_contact_number(self, instance):
        return instance.userprofile.contact_number
    get_contact_number.short_description = 'Contact Number'

    def get_address(self, instance):
        return instance.userprofile.address
    get_address.short_description = 'Address'

    def get_zip_code(self, instance):
        return instance.userprofile.zip_code
    get_zip_code.short_description = 'Zip Code'

    search_fields = ('username', 'email', 'userprofile__contact_number', 'userprofile__address', 'userprofile__zip_code')
    list_filter = ('is_staff', 'is_superuser', 'is_active', 'groups')

admin.site.unregister(User)
admin.site.register(User, UserAdmin)


forms.py:
from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User

from .models import Userprofile

class SignUpForm(UserCreationForm):
    first_name = forms.CharField(max_length=50, required=True)
    last_name = forms.CharField(max_length=50, required=True)
    email = forms.EmailField(max_length=255, required=True)

    def __init__(self, *args, **kwargs):
        super(SignUpForm, self).__init__(*args, **kwargs)

        self.fields['username'].widget.attrs['class'] = 'input' 
        self.fields['first_name'].widget.attrs['class'] = 'input'  
        self.fields['last_name'].widget.attrs['class'] = 'input' 
        self.fields['email'].widget.attrs['class'] = 'input' 
        self.fields['password1'].widget.attrs['class'] = 'input' 
        self.fields['password2'].widget.attrs['class'] = 'input'
    

    class Meta:
        model = User
        fields = ['username', 'first_name', 'last_name', 'email', 'password1', 'password2']


class UserprofileForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        super(UserprofileForm, self).__init__(*args, **kwargs)

        self.fields['contact_number'].widget.attrs['class'] = 'input'
        self.fields['address'].widget.attrs['class'] = 'input'
        self.fields['zip_code'].widget.attrs['class'] = 'input'

    class Meta:
        model = Userprofile
        fields = ['contact_number', 'address', 'zip_code']


userprofile/views.py:
from django.shortcuts import render, redirect
from django.contrib.auth import login, update_session_auth_hash
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json

from .forms import SignUpForm, UserprofileForm
# Create your views here.

def signup(request):
    if request.method == 'POST':
        form = SignUpForm(request.POST)
        userprofileForm = UserprofileForm(request.POST)

        if form.is_valid() and userprofileForm.is_valid():
            print("Form is valid")  
            user = form.save()

            print("Other profiles are valid.")
            userprofile = userprofileForm.save(commit = False)
            userprofile.user = user
            userprofile.save()

            login(request, user)
            return redirect('frontpage')
        else:
            print("Form errors:", form.errors)
            print("UserProfile form errors:", userprofileForm.errors)
            
    else:
        form = SignUpForm()
        userprofileForm = UserprofileForm()

    return render(request, 'signup.html', {'form': form, 'userprofileForm': userprofileForm})


@login_required
def myaccount(request):
    print("User is logged in:", request.user.is_authenticated)
    return render(request, 'myaccount.html')

@login_required
@csrf_exempt 
def update_user_info(request):
    if request.method == 'POST':
        data = json.loads(request.body)
        user = request.user
        
        user.first_name = data['first_name']
        user.last_name = data['last_name']
        user.email = data['email']
        user.username = data['username']

        user_profile = user.userprofile
        
        user_profile.contact_number = data['contact_number']
        user_profile.address = data['address']
        user_profile.zip_code = data['zip_code']

        user.save()
        user_profile.save()
        print("Updated successfully")
        
        if data.get('password1') and data.get('password2') and data['password1'] == data['password2']:
            user.set_password(data['password1'])
            user.save()
            user_profile.save()
            update_session_auth_hash(request, user)
            print("Updated successfully")

        return JsonResponse({'status': 'success'})

    return JsonResponse({'status': 'failed'}, status=400)


signup.html:
{% extends 'base.html' %}

{% block content %}
<div class="columns">
    <div class="column is-6 is-offset-3">
        <h1 class="title">Sign Up</h1>

        <form method="post" action=".">
            {% csrf_token %}

            {% if form.non_field_errors %}
                <div class="notification is-danger">
                    <ul>
                        {% for error in form.non_field_errors %}
                            <li>{{ error }}</li>
                        {% endfor %}
                    </ul>
                </div>
            {% endif %}


            <div class="field">
                <label class="label">Username</label>
                <div class="control">
                    {{ form.username }}
                    {% if form.username.errors %}
                        <p class="help is-danger">{{ form.username.errors }}</p>
                    {% endif %}
                </div>
            </div>

            <div class="field">
                <label class="label">First Name</label>
                <div class="control">
                    {{ form.first_name }}
                    {% if form.first_name.errors %}
                        <p class="help is-danger">{{ form.first_name.errors }}</p>
                    {% endif %}
                </div>
            </div>

            <div class="field">
                <label class="label">Last Name</label>
                <div class="control">
                    {{ form.last_name }}
                    {% if form.last_name.errors %}
                        <p class="help is-danger">{{ form.last_name.errors }}</p>
                    {% endif %}
                </div>
            </div>

            <div class="field">
                <label class="label">Email</label>
                <div class="control">
                    {{ form.email }}
                    {% if form.email.errors %}
                        <p class="help is-danger">{{ form.email.errors }}</p>
                    {% endif %}
                </div>
            </div>

            <div class="field">
                <label class="label">Contact Number</label>
                <div class="control">
                    {{ userprofileForm.contact_number }}
                    {% if userprofileForm.contact_number.errors %}
                        <p class="help is-danger">{{ userprofileForm.contact_number.errors }}</p>
                    {% endif %}
                </div>
            </div>

            <div class="field">
                <label class="label">Address</label>
                <div class="control">
                    {{ userprofileForm.address }}
                    {% if userprofileForm.address.errors %}
                        <p class="help is-danger">{{ userprofileForm.address.errors }}</p>
                    {% endif %}
                </div>
            </div>

            <div class="field">
                <label class="label">Zip Code</label>
                <div class="control">
                    {{ userprofileForm.zip_code }}
                    {% if userprofileForm.zip_code.errors %}
                        <p class="help is-danger">{{ userprofileForm.zip_code.errors }}</p>
                    {% endif %}
                </div>
            </div>

            <div class="field">
                <label class="label">Password</label>
                <div class="control">
                    {{ form.password1 }}
                    {% if form.password1.errors %}
                        <p class="help is-danger">{{ form.password1.errors }}</p>
                    {% endif %}
                </div>
            </div>

            <div class="field">
                <label class="label">Password Confirmation</label>
                <div class="control">
                    {{ form.password2 }}
                    {% if form.password2.errors %}
                        <p class="help is-danger">{{ form.password2.errors }}</p>
                    {% endif %}
                </div>
            </div>

            <div class="field">
                <div class="control">
                    <button class="button is-success">Sign Up</button>
                </div>
            </div>
        </form>
    </div>
</div>
{% endblock %}


myaccount.html:
{% extends 'base.html' %}

{% block content %}
    <h1 class="title">My Account</h1>

    <form method="post" action="{% url 'logout' %}">
        {% csrf_token %}
        <button type="submit" class="button is-danger">Log Out</button>
    </form>

    <hr>

    <h2 class="subtitle">Account Information</h2>

    <div id="account-info">
        <div v-if="!isEditing">
            <p><strong>Username: </strong>{{ request.user.username }}</p>
            <p><strong>Name: </strong>{{ request.user.first_name }} {{ request.user.last_name }}</p>
            <p><strong>Email: </strong>{{ request.user.email }}</p>
            <p><strong>Address: </strong>{{ request.user.userprofile.address }}</p>
            <p><strong>Contact Number: </strong>{{ request.user.userprofile.contact_number }}</p>
            <p><strong>Zip Code: </strong>{{ request.user.userprofile.zip_code }}</p>
            <button class="button is-light" @click="editInfo">Edit</button>
            <br>
            <div class="notification is-success" v-if="showSuccess">
                Your status was updated. Reloading...
            </div>
        </div>

        <div v-else>
            <form @submit.prevent="updateInfo">
                <div class="field">
                    <label class="label">Username</label>
                    <div class="control">
                        <input class="input" type="text" v-model="user.username">
                    </div>
                </div>
                <div class="field">
                    <label class="label">First Name</label>
                    <div class="control">
                        <input class="input" type="text" v-model="user.first_name">
                    </div>
                </div>
                <div class="field">
                    <label class="label">Last Name</label>
                    <div class="control">
                        <input class="input" type="text" v-model="user.last_name">
                    </div>
                </div>
                <div class="field">
                    <label class="label">Email</label>
                    <div class="control">
                        <input class="input" type="email" v-model="user.email">
                    </div>
                </div>
                <div class="field">
                    <label class="label">Contact Number</label>
                    <div class="control">
                        <input class="input" type="text" v-model="user.userprofile.contact_number">
                    </div>
                </div>
                <div class="field">
                    <label class="label">Address</label>
                    <div class="control">
                        <input class="input" type="text" v-model="user.userprofile.address">
                    </div>
                </div>
                <div class="field">
                    <label class="label">Zip Code</label>
                    <div class="control">
                        <input class="input" type="text" v-model="user.userprofile.zip_code">
                    </div>
                </div>
                <div class="field">
                    <label class="label">Password</label>
                    <div class="control">
                        <input class="input" type="password" v-model="user.password1">
                    </div>
                </div>
                <div class="field">
                    <label class="label">Password Confirmation</label>
                    <div class="control">
                        <input class="input" type="password" v-model="user.password2">
                    </div>
                </div>
                <button type="submit" class="button is-success">Done</button>
                <button type="button" class="button is-light" @click="cancelEdit">Cancel</button>
                <br><br>
                <div class="notification is-danger" v-if="showErrorPassword">
                    Password not matched. Please try again!
                </div>
            </form>
        </div>
    </div>

    <hr>

    <h2 class="subtitle">My Orders</h2>

    {% for order in request.user.orders.all %}
        <article class="message is-light">
            <div class="message-header">
                <p>{{ order.order_created_at}}</p>
                <p><strong>Status: </strong>{{ order.shipped_status }}</p>
            </div>

            <div class="message-body">
                <table class="table is-striped is-fullwidth">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Quantity</th>
                            <th>Price</th>
                        </tr>
                    </thead>

                    <tbody>
                        {% for item in order.items.all %}
                        <tr>
                            <td>{{ item.product.title }}</td>
                            <td>{{ item.quantity }}</td>
                            <td>{{ item.price }}</td>
                        </tr>
                        {% endfor %}
                    </tbody>

                    <tfoot>
                        <tr>
                            <td>Total</td>
                            <td>{{ order.get_total_quantity }}</td>
                            <td>{{ order.paid_amount }}</td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </article>
    {% empty %}
        <p>You don't have any orders yet.</p>
    {% endfor %}
{% endblock %}

{% block scripts %}
<script>
    new Vue({
        el: '#account-info',
        data: {
            isEditing: false,
                    user: {
                        first_name: "{{ request.user.first_name }}",
                        last_name: "{{ request.user.last_name }}",
                        username: "{{ request.user.username }}",
                        email: "{{ request.user.email }}",
                        userprofile: {
                            contact_number: "{{ request.user.userprofile.contact_number }}",
                            address: "{{ request.user.userprofile.address }}",
                            zip_code: "{{ request.user.userprofile.zip_code }}",
                        },
                        password1: '',
                        password2: '',
                    }, 
            showSuccess: false,
            showErrorPassword: false,
        }, 
        methods: {
            editInfo() {
                this.isEditing = true;
            },
            cancelEdit() {
                this.isEditing = false;
            },
            async updateInfo() {
                var data = {
                    'first_name': this.user.first_name,
                    'last_name': this.user.last_name,
                    'email': this.user.email,
                    'username': this.user.username,
                    'contact_number': this.user.userprofile.contact_number,
                    'address': this.user.userprofile.address,
                    'zip_code': this.user.userprofile.zip_code,    
                    'password1': this.user.password1,
                    'password2': this.user.password2
                };
                
                console.log('User details updating...')
                if (data.password1 !== data.password2) {
                    this.showErrorPassword = true
                } else {
                    const response = await fetch('{% url "update_user_info" %}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    body: JSON.stringify({
                        first_name: this.user.first_name,
                        last_name: this.user.last_name,
                        username: this.user.username,
                        email: this.user.email,
                        contact_number: this.user.userprofile.contact_number,
                        address: this.user.userprofile.address,
                        zip_code: this.user.userprofile.zip_code,
                        password1: this.user.password1,
                        password2: this.user.password2
                        })
                    });
                    if (response.ok) {
                        this.isEditing = false 
                        this.showSuccess = true

                        setTimeout(() => {
                            this.showSuccess = false;
                            window.location.reload();
                        }, 2000)
                    } else {
                        console.error("Failed to update user info");
                    }
                }
            }
        }
    });
</script>
{% endblock %}


cart/views.py:
from django.conf import settings
from django.shortcuts import render, redirect

from .cart import Cart

# Create your views here.
def cart_detail(request):
    cart = Cart(request)
    productsstring = ''

    print(f'Cart items: {list(cart)}')  # just to debug >o<

    for item in cart: # Getting the data from the database
        product = item['product']
        url = '/%s/%s' % (product.sub_category.slug, product.slug)
        b = "{'id': '%s', 'title': '%s', 'price': '%s', 'quantity': '%s', 'total_price': '%s', 'product_thumbnail': '%s', 'url': '%s', 'number_available': '%s'}," % (
            product.id, product.title, product.price, item['quantity'], item['total_price'], product.product_thumbnail.url, url, product.number_available)

        productsstring += b

    if request.user.is_authenticated:
        first_name = request.user.first_name
        last_name = request.user.last_name
        email = request.user.email
        contact_number = request.user.userprofile.contact_number
        address = request.user.userprofile.address
        zip_code = request.user.userprofile.zip_code

    else:
        first_name = last_name = email = contact_number = address = zip_code = ''

    print(f'Products string: {productsstring}')  # debugging haha

    context = {
        'cart': cart,
        'first_name': first_name,
        'last_name': last_name,
        'email': email,
        'contact_number': contact_number,
        'address': address,
        'zip_code': zip_code,
        'pub_key': settings.STRIPE_API_KEYS_PUBLISHABLE,
        'productsstring': productsstring
    }

    return render(request, 'cart.html', context)

def success(request):
    cart = Cart(request)
    cart.clear()

    return render(request, 'success.html')


cart.html:
{% extends 'base.html' %}

{% block title %} Cart | {% endblock %}

{% block content %}
    <div id="cartapp">
        <h1 class="title">Cart</h1>
        {% if cart %}
            <div v-if="products.length > 0">
                <div class="table">
                    <table class="table is is-fullwidth is-striped">
                        <thead>
                            <th></th>
                            <th>Product</th>
                            <th>Quantity</th>
                            <th>Price</th>
                            <th></th>
                        </thead>

                        <tbody>
                            <tr v-for="product in products">
                                <td>
                                    <figure class="image is-48x48">
                                        <img :src="product.product_thumbnail">
                                    </figure>
                                </td>
                                <td>
                                    <a :href="product.url">
                                        [[ product.title ]]
                                    </a>
                                </td>
                                <td><button @click="decrementQuantity(product.id, product.quantity, product.price)">-</button> [[ product.quantity ]] <button @click="incrementQuantity(product.id, product.quantity, product.price)">+</button></td>
                                <td>[[ product.total_price ]]</td>
                                <td><button @click="removeFromCart(product.id)" class="button is-danger">Remove</button></td>
                            </tr>
                        </tbody>

                        <tfoot>
                            <tr>
                                <td>Total Cost:</td>
                                <td>[[ numItems ]]</td>
                                <td></td>
                                <td>[[ totalCost ]]</td>
                            </tr>

                            <tr v-if="coupon_value">
                                <td colspan = "3">Total Cost with Coupon:</td>
                                <td>[[ totalCostWithCoupon ]]</td>
                            </tr>
                        </tfoot>
                    </table>

                {% if not request.user.is_authenticated %}
                    <p>You need to login or signup to purchase! <a href="{% url 'login' %}">Log In</a> / <a href="{% url 'signup' %}">Sign Up</a></p>

                    <hr>
                {% else %}
                    <hr>
                    <input type="hidden" v-model="coupon_value">

                    <h2 class="subtitle">Coupon Code</subtitle>
                
                    <div class="field has-addons">
                        <div class="control">
                            <input type="text" v-model="coupon_code" class="input">
                        </div>

                        <div class="control">
                            <button @click="applyCoupon()" class="button is-success">Apply</button>
                        </div>
                    </div>
                    
                    <div class="notification is-warning" v-if="showCouponCodeError">
                        <p>The coupon code is not valid.</p>
                    </div>
                    
                    <hr>

                    <form v-on:submit.prevent="buy()">
                        <h2 class="title">Contact Information</h2>
    
                        <div class="columns">
                            <div class="column is-6">
                                <div class="field">
                                    <label>First Name</label>
                                    <div class="control">
                                        <input class="input" type="text" name="first_name" v-model="first_name">
                                    </div>
                                </div>
            
                                <div class="field">
                                    <label>Last Name</label>
                                    <div class="control">
                                        <input class="input" type="text" name="last_name" v-model="last_name">
                                    </div>
                                </div>
            
                                <div class="field">
                                    <label>Email</label>
                                    <div class="control">
                                        <input class="input" type="text" name="email" v-model="email">
                                    </div>
                                </div>
            
                            </div>
    
                            <div class="column is-6">
                                <div class="field">
                                    <label>Contact Number</label>
                                    <div class="control">
                                        <input class="input" type="text" name="contact_number" v-model="contact_number">
                                    </div>
                                </div>
    
                                <div class="field">
                                    <label>Address</label>
                                    <div class="control">
                                        <input class="input" type="text" name="address" v-model="address">
                                    </div>
                                </div>
            
                                <div class="field">
                                    <label>Zip Code</label>
                                    <div class="control">
                                        <input class="input" type="text" name="zip_code" v-model="zip_code">
                                    </div>
                                </div>
                            </div>
                        </div>
    
                        <div class="field">
                            <div class="control">
                                <button class="button is-primary">Check Out</button>
                            </div>
                        </div>
                    </form>

                {% endif %}

                </div>
            </div>
            <p v-else>Your cart is empty!</p>
        {% else %}
            <p>Your cart is empty!</p>
        {% endif %}

        <div v-if="errors.length > 0">
            <article class="message is-danger"
                v-for="error in errors">
                <div class="message-header">
                    <p>Error</p>
                    <button class="delete" aria-label="delete"></button>
                </div>

                <div class="message-body">
                    [[ error ]]
                </div>

              </article>
        </div>
    </div>
{% endblock %}

{% block scripts %}
<script type="application/javascript" src="https://js.stripe.com/v3/"></script>
<script>
    var productapp = new Vue({
        el: '#cartapp',
        delimiters: ['[[', ']]'],
        store: store,
        data() {
            return {
                errors: [],
                first_name: '{{ first_name }}',
                last_name: '{{ last_name }}',
                email: '{{ email }}',
                contact_number: '{{ contact_number }}',
                address: '{{ address }}',
                zip_code: '{{ zip_code }}',
                products: [{{ productsstring|safe }}],
                coupon_value: 0,
                coupon_code: '',
                showCouponCodeError: false
            };
        },
        computed: {
            numItems: function() {
                return store.state.numItems
            },
            totalCost: function () {
                return store.state.totalCost
            },
            totalCostWithCoupon: function () {
                if (this.coupon_value > 0) {
                    return store.state.totalCost * (parseInt(this.coupon_value) / 100);
                } else {
                    return store.state.totalCost;
                }
            }
        },
        mounted () {
            console.log('Vue instance mounted for cart');
        },
        methods: {
            applyCoupon() {
                if (this.coupon_code !== '') {
                    fetch('/api/can_use/?coupon_code_get=' + this.coupon_code, {
                        method: 'GET'
                    })
                    .then((response) => {
                        return response.json();
                        console.log('Returned');
                    })
                    .then((data) => {
                        if (data.amount) {
                            this,showCouponCodeError = false
                            this.coupon_value = parseInt(data.amount)
                        } else {
                            this.coupon_value = 0
                            this.showCouponCodeError = true
                        }
                    })
                } else {
                    this.showCouponCodeError = true
                }
            },
            buy(){
                var data = {
                    'first_name': this.first_name,
                    'last_name': this.last_name,
                    'email': this.email,
                    'contact_number': this.contact_number,
                    'address': this.address,
                    'zip_code': this.zip_code,
                    'coupon_code': this.coupon_code
                };

                this.errors = [];

                if (data.first_name === '') {
                    this.errors.push('First name is empty');
                }

                if (data.last_name === '') {
                    this.errors.push('Last name is empty');
                }

                if (data.email === '') {
                    this.errors.push('Email is empty');
                }

                if (data.contact_number === '') {
                    this.errors.push('Contact Number is empty');
                }

                if (data.address === '') {
                    this.errors.push('Address is empty');
                }

                if (data.zip_code === '') {
                    this.errors.push('Zip Code is empty');
                }

                if (this.errors.length === 0) {
                    var stripe = Stripe('{{ pub_key }}');

                    fetch('/api/create_checkout_session/', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRFToken': '{{ csrf_token }}'
                        },
                        credentials: 'same-origin',
                        body: JSON.stringify(data)
                    })
                    .then(function(response) {
                        if (!response.ok) {
                            throw new Error('Network response was not ok ' + response.statusText);
                        }
                        return response.json();
                    })
                    .then(function(session) {
                        return stripe.redirectToCheckout({ sessionId: session.session.id });
                    })
                    .catch(function(error) {
                        console.error('Error:', error);
                        alert('There was an issue with the checkout process.');
                    });
                }  
            },
            incrementQuantity(product_id, quantity, price) {
                console.log('Product_id:', product_id);

                for (var i = 0; i < this.products.length; i++) {
                    var product = this.products[i];

                    if (product.id === product_id) {
                        if (quantity < product.number_available) {
                            var data = {
                                'product_id': product_id,
                                'update': true,
                                'quantity': parseInt(quantity) + 1
                            };
                            console.log(price);
                            store.commit('increment', 1);
                            store.commit('changeTotalCost', parseFloat(price));
                            fetch('/api/add_to_cart', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-CSRFToken': '{{ csrf_token }}'
                                },
                                credentials: 'same-origin',
                                body: JSON.stringify(data)
                            })
                            .then((response) => {
                                console.log(response);
                                for (var i = 0; i < this.products.length; i++) {
                                    var product = this.products[i];
                                    if (product.id === product_id) {
                                        this.products[i].quantity = parseInt(this.products[i].quantity) + 1;
                                        this.products[i].total_price = parseInt(this.products[i].quantity) * parseFloat(this.products[i].price);
                                    }
                                }
                            })
                            .catch(function (error) {
                                console.log('Error:', error);
                            });
                        } else {
                        alert('No more available in stock');
                    }
                    } 
                }  
            },
            decrementQuantity(product_id, quantity, price) {
                console.log('Product_id:', product_id);
                var data = {
                    'product_id': product_id,
                    'update': true,
                    'quantity': parseInt(quantity) - 1
                };

                if (parseInt(quantity) - 1 === 0) {
                    this.removeFromCart(product_id);
                } else {
                    store.commit('increment', -1);
                    store.commit('changeTotalCost', -parseFloat(price));

                    fetch('/api/add_to_cart', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRFToken': '{{ csrf_token }}'
                        },
                        credentials: 'same-origin',
                        body: JSON.stringify(data)
                    })
                    .then((response) => {
                        console.log(response);
                        for (var i = 0; i < this.products.length; i++) {
                            var product = this.products[i];
                            if (product.id === product_id) {
                                this.products[i].quantity = parseInt(this.products[i].quantity) - 1;
                                this.products[i].total_price = parseInt(this.products[i].quantity) * parseFloat(this.products[i].price);
                            }
                        }
                    })
                    .catch(function (error) {
                        console.log('Error:', error);
                    });
                }
            },
            removeFromCart(product_id) {
                console.log('Remove Product_id:', product_id);
                var data = {
                    'product_id': product_id
                };
                fetch('/api/remove_from_cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)
                })
                .then((response) => {
                    console.log(response);
                    this.products = this.products.filter(product => product.id !== product_id);
                })
                .catch(function (error) {
                    console.log('Error:', error);
                });
            }
        }
    });
</script>
{% endblock %}


X. Some changes in the navbar, displaying categories, and creating featured categories
base.html:
{% load static %}
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>{% block title %} {% endblock %} Sample Website</title>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@1.0.2/css/bulma.min.css">
        <link rel="stylesheet" href="{% static 'main.css' %}">
        <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    </head>
    <body>
        <nav class="navbar is-dark" id="navbarapp">
            <div class="navbar-brand">
                <a class="navbar-item" href="{% url 'frontpage' %}">Bikes</a>

                <a @click="toggleMenu()" role="button" class="navbar-burger burger" aria-label="menu" aria-expanded="false" data-target="main-navbar">
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                </a>
            </div>

            <div id="main-navbar" class="navbar-menu" :class ="{ 'is-active': menuClass }">
                <div class="navbar-start">
                    <div class="navbar-item">
                        <form method="get" action="{% url 'search' %}">
                            <div class="field has-addons">
                                <div class="control">
                                    <input type="text" class="input" placeholder="Search..." name="query">
                                </div>
                                <div class="control">
                                    <button class="button is-success">Search</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>

                <div class="navbar-end">
                    {% for category in menu_main_categories %}
                        <div class="navbar-item has-dropdown is-hoverable">
                            <a href="{% url 'main_category_detail' category.slug %}" class="navbar-link">
                                {{ category.title }}
                            </a>
                            <div class="navbar-dropdown">
                                {% if category.sub_categories.all %}
                                    {% for sub_category in category.sub_categories.all %}
                                        <a href="{% url 'sub_category_detail' sub_category.slug %}" class="navbar-item">{{ sub_category.title }}</a>
                                    {% endfor %}
                                {% else %}
                                    <div class="navbar-item">No products at this moment.</div>
                                {% endif %}
                            </div>
                        </div>
                    {% endfor %}

                    <div class="navbar-item">
                        <a href="{% url 'cart' %}" class="button is-primary">Cart ([[ numItems ]])</a>
                    </div>

                    {% if request.user.is_authenticated %}
                        <div class="navbar-item">
                            <form method="post" action="{% url 'myaccount' %}">
                                {% csrf_token %}
                                <button type="submit" class="button is-light">My Account</button>
                            </form>
                        </div>
                    {% else %}
                        <div class="navbar-item">
                            <div class="buttons">
                                <a href="{% url 'signup' %}" class="button is-primary"><strong>Sign Up</strong></a>
                                <a href="{% url 'login' %}" class="button is-light">Log In</a>
                            </div>
                        </div>
                    {% endif %}
                </div>
            </div>
        </nav>
        
        <section class="section">
            {% block content %}
            {% endblock %}
        </section>

        {% include 'parts/newsletter.html' %}
        
        <footer class="footer">
            <div class="columns">
                <div class="column is-4">
                    <h2 class="subtitle">Bicycles</h2>
                </div>
                <div class="column is-8">
                    <a href="{% url 'contact' %}" class="navbar-item">Contact</a>
                    <a href="{% url 'about' %}" class="navbar-item">About</a>
                </div>
            </div>
        </footer>
        
        <script src="https://unpkg.com/vuex@4.1.0/dist/vuex.global.js"></script>
    
        <script>
            var store = new Vuex.Store({
                state: {
                    numItems: {{ cart.get_total_length }},
                    totalCost: {{ cart.get_total_cost }}
                },
                mutations: {
                    increment(state, quantity) {
                        state.numItems += quantity;
                    },
                    changeTotalCost(state, newCost) {
                        state.totalCost += newCost;
                    }
                }
            });

            var navbarapp = new Vue({
                el: '#navbarapp',
                delimiters: ['[[', ']]'],
                store: store,
                data () {
                    return {
                        menuClass: false,
                        isDropdownActive: {}  
                    };
                },
                computed: {
                    numItems: function() {
                        return store.state.numItems;
                    }
                },
                methods: {
                    toggleMenu() {
                        this.menuClass = !this.menuClass;
                    },
                }
            });
        </script>
        
        {% block scripts %}
        {% endblock %}
    </body>
</html>


store/views.py:
import random

from django.shortcuts import render, get_object_or_404, redirect
from django.db.models import Q

from apps.cart.cart import Cart

from .models import Product, MainCategory, SubCategory, ProductReview

# Create your views here.
def product_detail(request, category_slug, slug):
    product = get_object_or_404(Product, slug=slug) # To call the product database
    sub_category = product.sub_category # Calling the foreign key of products
    category = sub_category.main_category # Calling the foreign key of sub category

    # Add review
    if request.method == 'POST' and request.user.is_authenticated: # Get the data from the form
        stars = request.POST.get('stars', 3)
        content = request.POST.get('content', '')

        review = ProductReview.objects.create(product=product, user=request.user, stars=stars, content=content)

        return redirect('product_detail', category_slug=category.slug, slug=slug)

    related_products = list(product.sub_category.products.filter(parent=None).exclude(id=product.id))

    if len(related_products) >= 3:
        related_products = random.sample(related_products, 3) # Can replace it depending on your preference. Take note that this is dependent on the number of products in the database.

    if product.parent:
        return redirect('product_detail', category_slug=category.slug, slug=product.parent.slug)
    

    product_imagesstring = "{'product_thumbnail': '%s', 'product_image': '%s'}," % (product.product_thumbnail.url, product.product_image.url)

    for image in product.images_product.all(): # 'image_product' is the related_name of ProductImaage model. You may refer on store/modesl.py
        product_imagesstring += ("{'product_thumbnail': '%s', 'product_image': '%s'}," % (image.product_thumbnail.url, image.product_image.url))

    cart = Cart(request)

    if cart.has_product(product.id):
        product.in_cart = True
    else:
        product.in_cart = False

    context = {
        'category': category,
        'sub_category': sub_category,
        'product': product,
        'product_imagesstring': product_imagesstring,
        'related_products': related_products
    }

    return render(request, 'product_detail.html', context)

def main_category_detail(request, slug):
    category = get_object_or_404(MainCategory, slug=slug)
    subcategories = SubCategory.objects.filter(main_category=category)

    context = {
        'category': category,
        'menu_sub_categories': subcategories  # Pass only filtered subcategories
    }

    return render(request, 'main_category_detail.html', context)


def sub_category_detail(request, slug):
    sub_category = get_object_or_404(SubCategory, slug=slug)  # Get the subcategory based on the slug
    products = Product.objects.filter(sub_category=sub_category, parent=None)  # Get products related to the subcategory

    context = {
        'sub_category': sub_category,
        'category': sub_category.main_category,
        'products': products  # Pass the products details to the template
    }

    return render(request, 'sub_category_detail.html', context)

def search(request):
    query = request.GET.get('query')
    products = Product.objects.filter(Q(title__icontains = query) | Q(description__icontains = query))

    context = {
        'query': query,
        'products': products
    }

    return render(request, 'search.html', context)


main_category_detail.html:
{% extends 'base.html' %}

{% block title %} {{ category.title }} | {% endblock %}

{% block content %}

    <nav class="breadcrumb" aria-label="breadcrumbs">
        <ul>
            <li><a href="{% url 'frontpage' %}">Home</a></li>
            <li class="is-active"><a href="{% url 'main_category_detail' category.slug %}">{{ category.title }}</a></li>
        </ul>
    </nav>

    <h1 class="title">{{ category.title }}</h1>
    {% if category.sub_categories.all %}
        <div class="columns is-multiline">
            {% for sub_category in menu_sub_categories %} {# Loop through filtered subcategories #}
            <div class="column is-3">
                <div class="card">
                    <div class="card-image">
                        <figure class="image">
                            <img src="{{ sub_category.sub_category_image.url }}" alt="{{ sub_category.title }}">
                        </figure>
                    </div>
                    <div class="card-content">
                        <div class="media">
                            <div class="media-content">
                                <p class="title is-4">{{ sub_category.title }}</p>
                            </div>
                        </div>
                    </div>
                    <footer class="card-footer">
                        <a href="{% url 'sub_category_detail' sub_category.slug %}" class="card-footer-item">View</a>
                    </footer>
                </div>
            </div>
            {% endfor %}
        </div>
    {% else %}
        <p>No products at this moment.</p>
    {% endif %}
{% endblock %}


sub_category_detail.html:
{% extends 'base.html' %}

{% block title %} {{ sub_category.title }} | {% endblock %}

{% block content %}

    <nav class="breadcrumb" aria-label="breadcrumbs">
        <ul>
            <li><a href="{% url 'frontpage' %}">Home</a></li>
            <li><a href="{% url 'main_category_detail' category.slug %}">{{ category.title }}</a></li>
            <li class="is-active"><a href="{% url 'sub_category_detail' sub_category.slug %}">{{ sub_category.title }}</a></li>
        </ul>
    </nav>
    
    <h1 class="title">{{ sub_category.title }}</h1>

    {% if sub_category.products.count %}
        {% with products as listproducts %}
            {% include 'parts/product_list.html' %}
        {% endwith %}
    {% else %}
        <p>No products at this moment.</p>
    {% endif %}

{% endblock %}


product_detail.html:
{% extends 'base.html' %}

{% block title %} {{ product.title }} | {% endblock %}

{% block content %}
    <div id="productapp">
        <nav class="breadcrumb" aria-label="breadcrumbs">
            <ul>
                <li><a href="{% url 'frontpage' %}">Home</a></li>
                <li><a href="{% url 'main_category_detail' category.slug %}">{{ category.title }}</a></li>
                <li><a href="{% url 'sub_category_detail' sub_category.slug %}">{{ sub_category.title }}</a></li>
                <li class="is-active"><a href="{% url 'product_detail' category.slug product.slug %}">{{ product.title }}</a></li>
            </ul>
        </nav>

        <div class="columns">
            <div class="column is-4">
                <figure class="image is-3by3">
                    <img :src ="mainImage">
                </figure>
            </div>
        </div>

        {% if product.product_image.all %}
            <hr>
            <div class="columns">
                <div class="column is-2" v-for="image in images">
                    <figure class="image is-100x100">
                        <img :src="image.product_thumbnail" @click="changeMainImage(image.product_image)">
                    </figure>
                </div>
            </div>
        {% endif %}
        <hr>
        <h1 class="title">{{ product.title }}</h1>
        <h2 class="subtitle">P{{ product.price }}, Stars: {% if product.get_rating == 0 %} No ratings yet {% else %}{{ product.get_rating |floatformat:1 }} {% endif %}</h2> 

        {% if product.description %}
            <p>{{ product.description }}</p>
        {% endif %}

        <h2 class="subtitle">Add to cart</h2>

        {% if product.variants.all %}
            <div class="columns">
                <div class="column is-6">
                    <div class="table-container"> 
                        <table class="table is-fullwidth">
                            <tbody>
                                <tr>
                                    <td>
                                        <figure class="image is-48x48">
                                            {% if product.product_thumbnail.url %}
                                                <img src="{{ product.product_thumbnail.url }}">
                                            {% endif %}
                                        </figure>
                                    </td>
                                    <td>
                                        {{ product.title }}
                                    </td>
                                    <td>
                                        {{ product.price }}
                                    </td>
                                    <td>
                                        {% if product.in_cart %}
                                            <p>Already in cart! </p>
                                        {% else %}
                                            {% if product.number_available > 0 %}
                                                <button @click="addToCart('{{ product.id }}')" class="button is-success">Add to Cart</button>
                                            {% else %}
                                                <p>The product is out of stock.</p>
                                            {% endif %}
                                        {% endif %}
                                    </td>
                                </tr>
                                {% for variant in product.variants.all %}
                                    <tr>
                                        <td>
                                            <figure class="image is-48x48">
                                                {% if variant.product_thumbnail.url %}
                                                    <img src="{{ variant.product_thumbnail.url }}">
                                                {% endif %}
                                            </figure>
                                        </td>
                                        <td>
                                            {{ variant.title }}
                                        </td>
                                        <td>
                                            {{ variant.price }}
                                        </td>
                                        <td>
                                            {% if variant.in_cart %}
                                                <p>Already in cart! </p>
                                            {% else %}
                                                {% if variant.number_available > 0 %}
                                                    <button @click="addToCart('{{ variant.id }}')" class="button is-success">Add to Cart</button>
                                                {% else %}
                                                    <p>The product is out of stock.</p>
                                                {% endif %}
                                            {% endif %}
                                        </td>
                                    </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        {% else %}
            {% if product.in_cart %}
                <p>Already in cart! </p>
            {% else %}
                {% if product.number_available > 0 %}
                    <button @click="addToCart('{{ product.id }}')" class="button is-success">Add to Cart</button>
                {% else %}
                    <p>The product is out of stock.</p>
                {% endif %}
            {% endif %}
        {% endif %}


        <article class="message is-success" v-if="showMessage">
            <div class="message-body">
                The product was added to the cart!
            </div>
        </article>

        <hr>

        <h2 class="subtitle">Related Products</h2>
    </div>

    {% with related_products as listproducts %}
        {% include 'parts/product_list.html' %}
    {% endwith %}

    <hr>

    <h2 class="subtitle">Reviews</h2>

    <div class="reviews-wrapper">
        {% for review in product.product_reviews.all %}
            <div class="notification space-below">
                <p>
                    <strong>Date: </strong>{{ review.date_added|date:"Y-m-d" }},
                    <strong>Stars: </strong>{{ review.stars }}
                </p>

                {{ review.content }}
            </div>
        {% empty %}
            <div class="notification space-below">
                No reviews yet...
            </div>
        {% endfor %}

        <div class="notification space-below">
            {% if request.user.is_authenticated %}
                <form method="post" action=".">
                    {% csrf_token %}

                    <div class="field">
                        <label>Stars</label>

                        <div class="control">
                            <div class="select">
                                <select name="stars">
                                    <option value="1">1</option>
                                    <option value="2">2</option>
                                    <option value="3" selected>3</option>
                                    <option value="4">4</option>
                                    <option value="5">5</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <div class="field">
                        <label>Content</label>

                        <div class="control">
                            <textarea class="textarea" name="content"></textarea>
                        </div>
                    </div>

                    <div class="field">
                        <div class="control">
                            <button class="button is-success">Submit</button>
                        </div>
                    </div>
                </form>     
            {% else %}
                <p>Sign in to review products</p>
            {% endif %}
        </div>
    </div>
{% endblock %}

{% block scripts %}
<script>
    var productapp = new Vue({
        el: '#productapp',
        delimiters: ['[[', ']]'],
        data () {
            return {
                showMessage: false,
                mainImage: '{{ product.product_image.url }}',
                images : [{{ product_imagesstring|safe }}]
            }
        },
        mounted(){
            console.log('Vue instance mounted for cart');
        },
        methods: {
            changeMainImage (image) {
                this.mainImage = image;
            },
            addToCart(product_id) {
                console.log('Product_id:', product_id);

                var data = {
                    'product_id': product_id, 
                    'update': false,
                    'quantity': 1
                };

                fetch('/api/add_to_cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRFToken': '{{ csrf_token }}'
                    },
                    credentials: 'same-origin',
                    body: JSON.stringify(data)  
                })
                .then((response) => {
                    console.log(response)

                    this.showMessage = true

                    store.commit('increment', 1);

                    setTimeout(() => {
                        this.showMessage = false
                    }, 2000)
                })
                .catch(function (error){
                    console.log('Error 2:');
                    console.log(error);
                })
            }
        }
    });
</script>
{% endblock %}


store/models.py:
from io import BytesIO
from django.core.files import File
from django.db import models
from PIL import Image
from django.contrib.auth.models import User

# Create your models here.
# Database model
class MainCategory(models.Model):
    title = models.CharField(max_length = 255) # Character field for the database
    slug = models.SlugField(max_length = 255) # a description containing only letters, hyphens, numbers or underscores
    main_ordering = models.IntegerField(default=0)


    class Meta:
        verbose_name_plural = 'Main Categories' # Correcting the plural of the cataegory correct instead of categorys.
        ordering = ('main_ordering',)

    def __str__(self): # To see the title character in admin
        return self.title
    
    def get_absolute_url(self):
        return '/%s/' % (self.slug)


class SubCategory(models.Model):
    main_category = models.ForeignKey(MainCategory, related_name='sub_categories', on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    slug = models.SlugField(max_length=255)
    sub_ordering = models.IntegerField(default=0)
    is_featured = models.BooleanField(default=False)

    sub_category_image = models.ImageField(upload_to='uploads/', blank=True, null=True)
    sub_category_thumbnail = models.ImageField(upload_to='uploads/', blank=True, null=True)

    class Meta:
        verbose_name_plural = 'Sub Categories'
        ordering = ('sub_ordering',)

    def __str__(self):
        return self.title
    
    def save_sub_category_image(self, *args, **kwargs):
        self.sub_category_thumbnail = self.make_sub_category_thumbnail(self.sub_category_image)

        super().save(*args, **kwargs)

    def get_absolute_url(self):
        return '/%s/%s' % (self.main_category.slug, self.slug)
    
    def make_sub_category_thumbnail(self, image, size=(300, 200)):
        sub_category_img = Image.open(image)
        sub_category_img.convert('RGB')
        sub_category_img.thumbnail(size)

        sub_category_thumb_io = BytesIO()
        sub_category_img.save(sub_category_thumb_io, 'JPEG', quality=85)

        from os.path import basename
        sub_category_thumbnail = File(sub_category_thumb_io, name=basename(image.name))

        return sub_category_thumbnail
  
  
class Product(models.Model): # Adding the product in the database
    sub_category = models.ForeignKey(SubCategory, related_name='products', on_delete=models.CASCADE)
    parent = models.ForeignKey('self', related_name='variants', on_delete=models.CASCADE, blank=True, null=True)
    title = models.CharField(max_length=255)
    slug = models.SlugField(max_length=255)
    description = models.TextField(blank=True, null=True)
    price = models.FloatField()
    is_featured = models.BooleanField(default=False)
    number_available = models.IntegerField(default=1)

    product_image = models.ImageField(upload_to='uploads/', blank=True, null=True)
    product_thumbnail = models.ImageField(upload_to='uploads/', blank=True, null=True)

    date_added = models.DateTimeField(auto_now_add=True)


    class Meta:
        ordering = ('-date_added',) # Newest one comes first. You can remove the "-" if you want the oldest one to come first.

    def __str__(self):
        return self.title
    
    def save(self, *args, **kwargs):
        self.product_thumbnail = self.make_product_thumbnail(self.product_image)

        super().save(*args, **kwargs)

    def get_absolute_url(self):
        return '/%s/%s' % (self.sub_category.slug, self.slug)
    
    def make_product_thumbnail(self, image, size=(300, 200)):
        product_img = Image.open(image)
        product_img.convert('RGB')
        product_img.thumbnail(size)

        product_thumb_io = BytesIO()
        product_img.save(product_thumb_io, 'JPEG', quality=85)

        from os.path import basename
        product_thumbnail = File(product_thumb_io, name=basename(image.name))

        return product_thumbnail
    
    def get_rating(self):
        total = sum(int(product_review['stars']) for product_review in self.product_reviews.values())

        if self.product_reviews.count() > 0:
            return total / self.product_reviews.count()
        else:
            return 0
    

class ProductImage(models.Model):
    product = models.ForeignKey(Product, related_name='images_product', on_delete=models.CASCADE)

    product_image = models.ImageField(upload_to='uploads/', blank=True, null=True)
    product_thumbnail = models.ImageField(upload_to='uploads/', blank=True, null=True)

    def make_product_thumbnail(self, image, size=(300, 200)):
        product_img = Image.open(image)
        product_img.convert('RGB')
        product_img.thumbnail(size)

        product_thumb_io = BytesIO()
        product_img.save(product_thumb_io, 'JPEG', quality=85)

        from os.path import basename
        product_thumbnail = File(product_thumb_io, name=basename(image.name))

        return product_thumbnail

    def save(self, *args, **kwargs):
        self.product_thumbnail = self.make_product_thumbnail(self.product_image)

        super().save(*args, **kwargs)


class ProductReview(models.Model):
     product = models.ForeignKey(Product, related_name='product_reviews', on_delete=models.CASCADE)
     user = models.ForeignKey(User, related_name='product_reviews', on_delete=models.CASCADE)

     content = models.TextField(blank=True, null=True)
     stars = models.IntegerField()

     date_added = models.DateTimeField(auto_now_add=True)


core/views.py:
from django.shortcuts import render

from apps.store.models import Product, SubCategory # Importing the Products inside the models.py in Store folder


# Create your views here.
def frontpage(request):
    # products = Product.objects.all() # Getting all products in the database.
    products = Product.objects.filter(is_featured=True) # Showing all products where is_featured = true

    featured_categories = SubCategory.objects.filter(is_featured=True) # Showing all sub category where is_featured = true

    context = { # Dictionary for products to be sent to the frontend
        'featured_categories': featured_categories,
        'products': products
    }

    return render(request, 'frontpage.html', context) # To view the html file of frontpage
    # Add context to view all related products

def contact(request):
    return render(request, 'contact.html')

def about(request):
    return render(request, 'about.html')


frontpage.html:
{% extends 'base.html' %} {# importing the base.html #}

{% block title %} Welcome | {% endblock %}

{% block content %}
    <h2 class="subtitle has-text-centered">Featured Products</h2>
    {% with products as listproducts %}
        {% include 'parts/product_list.html' %}
    {% endwith %}

    <hr>

    <div class="featured-categories">
        {% for sub_category in featured_categories %}
            <h2 class="subtitle has-text-centered">{{ sub_category.title }}</h2>

            {% with sub_category.products.all|slice:":4" as listproducts %}
                {% include 'parts/product_list.html' %}
            {% endwith %}
        {% endfor %}
    </div>
{% endblock %}


Y. Advanced Search and Price Range
search.html:
{% extends 'base.html' %}

{% block title %}Search | {% endblock %}

{% block content %}
    <h1 class="title">Search</h1>
    <h2 class="subtitle">Search term: "{{ query }}"</h2>

    <hr>

    <form method="get" action="{% url 'search' %}">
        <div class="columns is-multiline">
            <div class="column is-4">
                <h2 class="is-size-5">Advanced Search</h2>

                <div class="field">
                    <div class="control">
                        <label>Search Form</label>
                        <input type="text" name="query" class="input" value="{{ query }}">
                    </div>
                </div>

                <div class="field">
                    <label>In Stock</label>

                    <div class="control">
                        <input type="checkbox" name="instock" {% if instock %}checked="checked" {% endif %}>
                    </div>
                </div>
            </div>

            <div class="column is-4">
                <h2 class="is-size-5">Price Range</h2>

                <div class="field">
                    <label>From</label>
                    <div class="control">
                        <input type="number" name="price_from" class="input" value="{{ price_from }}">
                    </div>
                </div>

                <div class="field">
                    <label>To</label>
                    <div class="control">
                        <input type="number" name="price_to" class="input" value="{{ price_to }}">
                    </div>
                </div>
            </div>

            <div class="column is-4">
                <h2 class="is-size-5">Sorting</h2>

                <div class="field">
                    <label>Select Sorting Criteria</label>

                    <div class="control">
                        <div class="select">
                            <select name="sorting">
                                <option value="-date_added"{% if sorting == '-date_added' %} selected{% endif %}>Newest First</option>
                                <option value="price"{% if sorting == 'price' %} selected{% endif %}>Price low-high</option>
                                <option value="-price"{% if sorting == '-price' %} selected{% endif %}>Price high-low</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
               

            <div class="column is-12">
                <div class="field">
                    <button class="button is-success">Search</button>
                </div>
            </div>
        </div>
    </form>

    <hr>

    {% with products as listproducts %}
        {% include 'parts/product_list.html' %}
    {% endwith %}
{% endblock %}


store/views.py:
import random

from django.shortcuts import render, get_object_or_404, redirect
from django.db.models import Q

from apps.cart.cart import Cart

from .models import Product, MainCategory, SubCategory, ProductReview

# Create your views here.
def product_detail(request, category_slug, slug):
    product = get_object_or_404(Product, slug=slug) # To call the product database
    sub_category = product.sub_category # Calling the foreign key of products
    category = sub_category.main_category # Calling the foreign key of sub category

    # Add review
    if request.method == 'POST' and request.user.is_authenticated: # Get the data from the form
        stars = request.POST.get('stars', 3)
        content = request.POST.get('content', '')

        review = ProductReview.objects.create(product=product, user=request.user, stars=stars, content=content)

        return redirect('product_detail', category_slug=category.slug, slug=slug)

    related_products = list(product.sub_category.products.filter(parent=None).exclude(id=product.id))

    if len(related_products) >= 3:
        related_products = random.sample(related_products, 3) # Can replace it depending on your preference. Take note that this is dependent on the number of products in the database.

    if product.parent:
        return redirect('product_detail', category_slug=category.slug, slug=product.parent.slug)
    

    product_imagesstring = "{'product_thumbnail': '%s', 'product_image': '%s'}," % (product.product_thumbnail.url, product.product_image.url)

    for image in product.images_product.all(): # 'image_product' is the related_name of ProductImaage model. You may refer on store/modesl.py
        product_imagesstring += ("{'product_thumbnail': '%s', 'product_image': '%s'}," % (image.product_thumbnail.url, image.product_image.url))

    cart = Cart(request)

    if cart.has_product(product.id):
        product.in_cart = True
    else:
        product.in_cart = False

    context = {
        'category': category,
        'sub_category': sub_category,
        'product': product,
        'product_imagesstring': product_imagesstring,
        'related_products': related_products
    }

    return render(request, 'product_detail.html', context)

def main_category_detail(request, slug):
    category = get_object_or_404(MainCategory, slug=slug)
    subcategories = SubCategory.objects.filter(main_category=category)

    context = {
        'category': category,
        'menu_sub_categories': subcategories  # Pass only filtered subcategories
    }

    return render(request, 'main_category_detail.html', context)


def sub_category_detail(request, slug):
    sub_category = get_object_or_404(SubCategory, slug=slug)  # Get the subcategory based on the slug
    products = Product.objects.filter(sub_category=sub_category, parent=None)  # Get products related to the subcategory

    context = {
        'sub_category': sub_category,
        'category': sub_category.main_category,
        'products': products  # Pass the products details to the template
    }

    return render(request, 'sub_category_detail.html', context)

def search(request):
    query = request.GET.get('query')
    instock = request.GET.get('instock') # Getting the instock variable in the search.html
    price_from = request.GET.get('price_from', 0)
    price_to = request.GET.get('price_to', 100000)
    sorting = request.GET.get('sorting', '-date_added')
    products = Product.objects.filter(Q(title__icontains = query) | Q(description__icontains = query)).filter(price__gte=price_from).filter(price__lte=price_to)

    if instock:
        products = products.filter(number_available__gte=1) # gte is greater than or equal

    context = {
        'query': query,
        'products': products.order_by(sorting),
        'instock': instock,
        'price_from': price_from,
        'price_to': price_to,
        'sorting': sorting
    }

    return render(request, 'search.html', context)


Z. Popular products and Recently viewed:
store/models.py:
from io import BytesIO
from django.core.files import File
from django.db import models
from PIL import Image
from django.contrib.auth.models import User

# Create your models here.
# Database model
class MainCategory(models.Model):
    title = models.CharField(max_length = 255) # Character field for the database
    slug = models.SlugField(max_length = 255) # a description containing only letters, hyphens, numbers or underscores
    main_ordering = models.IntegerField(default=0)


    class Meta:
        verbose_name_plural = 'Main Categories' # Correcting the plural of the cataegory correct instead of categorys.
        ordering = ('main_ordering',)

    def __str__(self): # To see the title character in admin
        return self.title
    
    def get_absolute_url(self):
        return '/%s/' % (self.slug)


class SubCategory(models.Model):
    main_category = models.ForeignKey(MainCategory, related_name='sub_categories', on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    slug = models.SlugField(max_length=255)
    sub_ordering = models.IntegerField(default=0)
    is_featured = models.BooleanField(default=False)

    sub_category_image = models.ImageField(upload_to='uploads/', blank=True, null=True)
    sub_category_thumbnail = models.ImageField(upload_to='uploads/', blank=True, null=True)

    class Meta:
        verbose_name_plural = 'Sub Categories'
        ordering = ('sub_ordering',)

    def __str__(self):
        return self.title
    
    def save_sub_category_image(self, *args, **kwargs):
        self.sub_category_thumbnail = self.make_sub_category_thumbnail(self.sub_category_image)

        super().save(*args, **kwargs)

    def get_absolute_url(self):
        return '/%s/%s' % (self.main_category.slug, self.slug)
    
    def make_sub_category_thumbnail(self, image, size=(300, 200)):
        sub_category_img = Image.open(image)
        sub_category_img.convert('RGB')
        sub_category_img.thumbnail(size)

        sub_category_thumb_io = BytesIO()
        sub_category_img.save(sub_category_thumb_io, 'JPEG', quality=85)

        from os.path import basename
        sub_category_thumbnail = File(sub_category_thumb_io, name=basename(image.name))

        return sub_category_thumbnail
  
  
class Product(models.Model): # Adding the product in the database
    sub_category = models.ForeignKey(SubCategory, related_name='products', on_delete=models.CASCADE)
    parent = models.ForeignKey('self', related_name='variants', on_delete=models.CASCADE, blank=True, null=True)
    title = models.CharField(max_length=255)
    slug = models.SlugField(max_length=255)
    description = models.TextField(blank=True, null=True)
    price = models.FloatField()
    is_featured = models.BooleanField(default=False)
    number_available = models.IntegerField(default=1)

    product_image = models.ImageField(upload_to='uploads/', blank=True, null=True)
    product_thumbnail = models.ImageField(upload_to='uploads/', blank=True, null=True)

    date_added = models.DateTimeField(auto_now_add=True)

    number_of_visits = models.IntegerField(default=0)
    last_visited = models.DateTimeField(blank=True, null=True)


    class Meta:
        ordering = ('-date_added',) # Newest one comes first. You can remove the "-" if you want the oldest one to come first.

    def __str__(self):
        return self.title
    
    """
    def save(self, *args, **kwargs):
        self.product_thumbnail = self.make_product_thumbnail(self.product_image)

        super().save(*args, **kwargs)
    """

    def get_product_thumbnail(self):
        if self.product_thumbnail: # Check if there's a thumbnail for products
            return self.product_thumbnail.url
        else: 
            if self.product_image: # Otherwise, it will check if there's an image of a product, then it will generate a thumbnail.
                self.product_thumbnail = self.make_product_thumbnail(self.product_image)
                self.save()
                return self.product_thumbnail.url
            else: # If there are still no images, it will return an empty string.
                return ''

    def get_absolute_url(self):
        return '/%s/%s' % (self.sub_category.slug, self.slug)
    
    def make_product_thumbnail(self, image, size=(300, 200)):
        product_img = Image.open(image)
        product_img.convert('RGB')
        product_img.thumbnail(size)

        product_thumb_io = BytesIO()
        product_img.save(product_thumb_io, 'JPEG', quality=85)

        from os.path import basename
        product_thumbnail = File(product_thumb_io, name=basename(image.name))

        return product_thumbnail
    
    def get_rating(self):
        total = sum(int(product_review['stars']) for product_review in self.product_reviews.values())

        if self.product_reviews.count() > 0:
            return total / self.product_reviews.count()
        else:
            return 0
    

class ProductImage(models.Model):
    product = models.ForeignKey(Product, related_name='images_product', on_delete=models.CASCADE)

    product_image = models.ImageField(upload_to='uploads/', blank=True, null=True)
    product_thumbnail = models.ImageField(upload_to='uploads/', blank=True, null=True)

    def make_product_thumbnail(self, image, size=(300, 200)):
        product_img = Image.open(image)
        product_img.convert('RGB')
        product_img.thumbnail(size)

        product_thumb_io = BytesIO()
        product_img.save(product_thumb_io, 'JPEG', quality=85)

        from os.path import basename
        product_thumbnail = File(product_thumb_io, name=basename(image.name))

        return product_thumbnail

    def save(self, *args, **kwargs):
        self.product_thumbnail = self.make_product_thumbnail(self.product_image)

        super().save(*args, **kwargs)


class ProductReview(models.Model):
     product = models.ForeignKey(Product, related_name='product_reviews', on_delete=models.CASCADE)
     user = models.ForeignKey(User, related_name='product_reviews', on_delete=models.CASCADE)

     content = models.TextField(blank=True, null=True)
     stars = models.IntegerField()

     date_added = models.DateTimeField(auto_now_add=True)


store/views.py:
import random

from datetime import datetime

from django.shortcuts import render, get_object_or_404, redirect
from django.db.models import Q

from apps.cart.cart import Cart

from .models import Product, MainCategory, SubCategory, ProductReview

# Create your views here.
def product_detail(request, category_slug, slug):
    product = get_object_or_404(Product, slug=slug) # To call the product database
    sub_category = product.sub_category # Calling the foreign key of products
    category = sub_category.main_category # Calling the foreign key of sub category
    product.number_of_visits += 1 # Adds the number of visits by 1
    product.last_visited = datetime.now()
    product.save() # Save the increment in the database

    # Add review
    if request.method == 'POST' and request.user.is_authenticated: # Get the data from the form
        stars = request.POST.get('stars', 3)
        content = request.POST.get('content', '')

        review = ProductReview.objects.create(product=product, user=request.user, stars=stars, content=content)

        return redirect('product_detail', category_slug=category.slug, slug=slug)

    related_products = list(product.sub_category.products.filter(parent=None).exclude(id=product.id))

    if len(related_products) >= 3:
        related_products = random.sample(related_products, 3) # Can replace it depending on your preference. Take note that this is dependent on the number of products in the database.

    if product.parent:
        return redirect('product_detail', category_slug=category.slug, slug=product.parent.slug)
    

    product_imagesstring = "{'product_thumbnail': '%s', 'product_image': '%s'}," % (product.product_thumbnail.url, product.product_image.url)

    for image in product.images_product.all(): # 'image_product' is the related_name of ProductImaage model. You may refer on store/modesl.py
        product_imagesstring += ("{'product_thumbnail': '%s', 'product_image': '%s'}," % (image.product_thumbnail.url, image.product_image.url))

    cart = Cart(request)

    if cart.has_product(product.id):
        product.in_cart = True
    else:
        product.in_cart = False

    context = {
        'category': category,
        'sub_category': sub_category,
        'product': product,
        'product_imagesstring': product_imagesstring,
        'related_products': related_products
    }

    return render(request, 'product_detail.html', context)

def main_category_detail(request, slug):
    category = get_object_or_404(MainCategory, slug=slug)
    subcategories = SubCategory.objects.filter(main_category=category)

    context = {
        'category': category,
        'menu_sub_categories': subcategories  # Pass only filtered subcategories
    }

    return render(request, 'main_category_detail.html', context)


def sub_category_detail(request, slug):
    sub_category = get_object_or_404(SubCategory, slug=slug)  # Get the subcategory based on the slug
    products = Product.objects.filter(sub_category=sub_category, parent=None)  # Get products related to the subcategory

    context = {
        'sub_category': sub_category,
        'category': sub_category.main_category,
        'products': products  # Pass the products details to the template
    }

    return render(request, 'sub_category_detail.html', context)

def search(request):
    query = request.GET.get('query')
    instock = request.GET.get('instock') # Getting the instock variable in the search.html
    price_from = request.GET.get('price_from', 0)
    price_to = request.GET.get('price_to', 100000)
    sorting = request.GET.get('sorting', '-date_added')
    products = Product.objects.filter(Q(title__icontains = query) | Q(description__icontains = query)).filter(price__gte=price_from).filter(price__lte=price_to)

    if instock:
        products = products.filter(number_available__gte=1) # gte is greater than or equal

    context = {
        'query': query,
        'products': products.order_by(sorting),
        'instock': instock,
        'price_from': price_from,
        'price_to': price_to,
        'sorting': sorting
    }

    return render(request, 'search.html', context)


product_list.html:
<div class="columns is-multiline">
    {% for p in listproducts %}
    <div class="column is-3">
        <div class="card">
            <div class="card-image">
                <figure class="image">
                    <img src="{{ p.get_product_thumbnail }}" alt="{{ product.title }}">
                </figure>
            </div>
            <div class="card-content">
                <div class="media">
                    <div class="media-content">
                        <p class="title is-4">{{p.title }}</p>
                        <p class="subtitle is-6">P{{ p.price }}</p>
                    </div>
                </div>
            </div>
            <footer class="card-footer">
                <a href="{% url 'product_detail' p.sub_category.slug p.slug %}" class="card-footer-item">View</a>
            </footer>
        </div>
    </div>
    {% endfor %}
</div>


core/views.py:
from django.shortcuts import render

from apps.store.models import Product, SubCategory # Importing the Products inside the models.py in Store folder


# Create your views here.
def frontpage(request):
    # products = Product.objects.all() # Getting all products in the database.
    products = Product.objects.filter(is_featured=True) # Showing all products where is_featured = true
    featured_categories = SubCategory.objects.filter(is_featured=True) # Showing all sub category where is_featured = true
    popular_products = Product.objects.all().order_by('-number_of_visits')[0:4] # Get the products according to the number of visits and limiting it to 4 products only.
    recently_viewed_products = Product.objects.all().order_by('-last_visited')[0:4]

    context = { # Dictionary for products to be sent to the frontend
        'featured_categories': featured_categories,
        'products': products,
        'popular_products': popular_products,
        'recently_viewed_products': recently_viewed_products
    }

    return render(request, 'frontpage.html', context) # To view the html file of frontpage
    # Add context to view all related products

def contact(request):
    return render(request, 'contact.html')

def about(request):
    return render(request, 'about.html')



frontpage.html:
{% extends 'base.html' %} {# importing the base.html #}

{% block title %} Welcome | {% endblock %}

{% block content %}
    <h2 class="subtitle has-text-centered">Featured Products</h2>
    {% with products as listproducts %}
        {% include 'parts/product_list.html' %}
    {% endwith %}

    <hr>

    <div class="featured-categories">
        {% for sub_category in featured_categories %}
            <h2 class="subtitle has-text-centered">{{ sub_category.title }}</h2>

            {% with sub_category.products.all|slice:":4" as listproducts %}
                {% include 'parts/product_list.html' %}
            {% endwith %}
        {% endfor %}
    </div>

    <hr>

    <h2 class="subtitle has-text-centered">Popular Products</h2>

    {% with popular_products as listproducts %}
        {% include 'parts/product_list.html' %}
    {% endwith %}

    <hr>

    <h2 class="subtitle has-text-centered">Recently Viewed Products</h2>
    
    {% with recently_viewed_products as listproducts %}
        {% include 'parts/product_list.html' %}
    {% endwith %}
{% endblock %}